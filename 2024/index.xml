<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>2024s on Today I Learned</title><link>https://skalt.github.io/til/2024/</link><description>Recent content in 2024s on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/2024/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2024/01/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/01/03/</guid><description>bit bucket n.
(very common) 1. The universal data sink (originally, the mythical receptacle used to catch bits when they fall off the end of a register during a shift instruction). Discarded, lost, or destroyed data is said to have &amp;ldquo;gone to the bit bucket&amp;rdquo;. On Unix, often used for /dev/null. Sometimes amplified as &amp;ldquo;the Great Bit Bucket in the Sky&amp;rdquo;.
The place where all lost mail and news messages eventually go.</description></item><item><title/><link>https://skalt.github.io/til/2024/01/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/01/28/</guid><description>That 401 Unauthorized responses are supposed to include a www-authenticate header with a value indicating how to obtain a valid token. See https://datatracker.ietf.org/doc/html/rfc6750#section-3 for more details.</description></item><item><title/><link>https://skalt.github.io/til/2024/01/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/01/29/</guid><description>Typographic Units Absolute distance Name CSS Unit length Picas pc 1/6 inch Points pt 1/72 inches &amp;ndash; https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#absolute_length_units
Font-relative units em:
In metal type, the point size (and hence the em, from em quadrat) was equal to the line height of the metal body from which the letter rises. [&amp;hellip;] In some older texts, but not all, the em is defined, or said to have been defined, as the width of the capital &amp;lsquo;M&amp;rsquo; in the current typeface and point size.</description></item><item><title/><link>https://skalt.github.io/til/2024/01/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/01/31/</guid><description>That SQL implementations with recursive CTEs are Turing-complete! It makes sense: recursion and conditionals are all that is required for Turing completeness.
See https://learnsql.com/blog/sql-subquery-cte-difference/</description></item><item><title/><link>https://skalt.github.io/til/2024/02/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/05/</guid><description>That a *.tiff file:
was specified in 1986 by a company later consumed by Adobe was originally intended for scanner interop starts with an 8-byte header that includes a 2-byte magic number, a 2-byte endianness flag, and a 4-byte pointer to the first Image File Directory entry the max tiff size is 2^32 bytes due to the u32 pointer size Each IFD starts with a u16 count of entries, then a sequence of 12-byte ields, then another 4-byte offset of the next IFD entry (0 = none) each IFD entry (= &amp;ldquo;field&amp;rdquo;) has a 2-byte tag, 2 bytes of field type, 4-byte count, and 4-byte offset of the value(s) of the field.</description></item><item><title/><link>https://skalt.github.io/til/2024/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/08/</guid><description>In signal processing, the Nyquist rate, named after Harry Nyquist, is a value (in units of samples per second or hertz, Hz) equal to twice the highest frequency (bandwidth) of a given function or signal. When the function is digitized at a higher sample rate (see &amp;ldquo;Critical frequency&amp;rdquo;), the resulting discrete-time sequence is said to be free of the distortion known as aliasing.
&amp;ndash; https://en.wikipedia.org/wiki/Nyquist_rate
In signal processing and related disciplines, aliasing is the overlapping of frequency components resulting from a sample rate below the Nyquist rate.</description></item><item><title/><link>https://skalt.github.io/til/2024/02/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/12/</guid><description>That rust has built-in numeric types named like NonZero* that reserve the bit-pattern of 0 as a niche: see https://doc.rust-lang.org/core/num/index.html.
This is useful since that niche will absorb the cost of wrapping a NonZero int with Option:
use core::num::NonZeroU8; use std::mem::size_of; struct Struct&amp;lt;T&amp;gt;{ // has alignment 2, size 4 a: u16, b: T, } fn main() { println!(&amp;#34; NonZeroU8: {}&amp;#34;, size_of::&amp;lt;NonZeroU8&amp;gt;()); println!(&amp;#34; Option&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Option&amp;lt;NonZeroU8&amp;gt;&amp;gt;()); println!(&amp;#34; Struct&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;&amp;gt;()); println!(&amp;#34;Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;&amp;gt;&amp;gt;()); } # NonZeroU8: 1 # Option&amp;lt;NonZeroU8&amp;gt;: 1 # Struct&amp;lt;NonZeroU8&amp;gt;: 4 # Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;: 4 playground link</description></item><item><title/><link>https://skalt.github.io/til/2024/02/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/14/</guid><description>A more concise way to implement light/dark modes:
:root { color-scheme: light dark; } which saves a few more bytes than my usual
:root { --fg: #000; --bg: #fff; } @media (prefers-color-scheme: dark) { :root { --fg: #fff; --bg: #000; } } &amp;ndash; https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme#declaring_color_scheme_preferences
I also learned that CSS has special syntax for systmem-provided colors, notably:
Canvas: the default background color CanvasText: the default text color &amp;ndash; https://developer.mozilla.org/en-US/docs/Web/CSS/system-color#syntax</description></item><item><title/><link>https://skalt.github.io/til/2024/02/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/19/</guid><description>That CSS can adjust any font&amp;rsquo;s aspect value using font-size-adjust &amp;ndash; the ratio between the cap height and the x-height, NOT the aspect ratio.</description></item><item><title/><link>https://skalt.github.io/til/2024/03/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/07/</guid><description>That go mod tidy needs to be followed by go mod vendor to keep ./vendor/modules.txt up-to-date. That go mod vendor only pulls in files that are referenced by your current project.
See https://go.dev/ref/mod#vendoring</description></item><item><title/><link>https://skalt.github.io/til/2024/03/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/08/</guid><description>That OpenTelemetry HTTP reciever endpoints tend to have port 4318</description></item><item><title/><link>https://skalt.github.io/til/2024/03/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/10/</guid><description>That you can add #![warn(missing_docs)] at the top of a lib.rs file to lint for undocumented public methods.</description></item><item><title/><link>https://skalt.github.io/til/2024/03/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/13/</guid><description>Common Platform Enumeration, a syntax for identifying &amp;ldquo;IT stuff&amp;rdquo;:
cpe :&amp;lt;cpe_version&amp;gt; :&amp;lt;part&amp;gt; :&amp;lt;vendor&amp;gt; :&amp;lt;product&amp;gt; :&amp;lt;version&amp;gt; :&amp;lt;update&amp;gt; :&amp;lt;edition&amp;gt; :&amp;lt;language&amp;gt; :&amp;lt;sw_edition&amp;gt; :&amp;lt;target_sw&amp;gt; :&amp;lt;target_hw&amp;gt; :&amp;lt;other&amp;gt; Notably, part can only be a|h|o = app | hardware | OS, not &amp;ldquo;documentation&amp;rdquo;.
See https://en.wikipedia.org/wiki/Common_Platform_Enumeration</description></item><item><title/><link>https://skalt.github.io/til/2024/03/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/18/</guid><description>Alerts are an extension of Markdown used to emphasize critical information. On GitHub, they are displayed with distinctive colors and icons to indicate the importance of the content.
An example of all five types:
&amp;gt; [!NOTE] &amp;gt; Highlights information that users should take into account, even when skimming. &amp;gt; [!TIP] &amp;gt; Optional information to help a user be more successful. [!IMPORTANT]
Crucial information necessary for users to succeed.
[!WARNING]</description></item><item><title/><link>https://skalt.github.io/til/2024/03/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/21/</guid><description>that depends_on: [ service ] waits for service to be started, not for service to be healthy.
On startup, Compose does not wait until a container is &amp;ldquo;ready&amp;rdquo;, only until it&amp;rsquo;s running.
The solution for detecting the ready state of a service is to use the condition attribute with one of the following options:
service_started service_healthy. This specifies that a dependency is expected to be “healthy”, which is defined with healthcheck, before starting a dependent service.</description></item><item><title/><link>https://skalt.github.io/til/2024/03/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/25/</guid><description>The authoritative list of TLDs can be found at https://data.iana.org/TLD/tlds-alpha-by-domain.txt</description></item><item><title/><link>https://skalt.github.io/til/2024/03/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/26/</guid><description>That you can specify an alternate .terraformrc file using the environment variable TF_CLI_CONFIG_FILE=$ABSOLUTE_PATH. This can help with local provider development. See https://developer.hashicorp.com/terraform/cli/config/environment-variables#tf_cli_config_file</description></item><item><title/><link>https://skalt.github.io/til/2024/04/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/03/</guid><description>That BuildKit supports the using OpenTelemetry to trace builds with context from the $TRACEPARENT and $TRACESTATE environment variables (directly equivalent to their w3c header counterparts): https://github.com/moby/buildkit/blob/dc23e43dc15c14dcf1871f8cc97a6e96c8f94a2e/util/tracing/env/traceenv.go#L20-L41</description></item><item><title/><link>https://skalt.github.io/til/2024/04/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/07/</guid><description>That any function named func init(){ ... } runs on load of a module. See https://go.dev/ref/spec#Package_initialization. See also https://www.digitalocean.com/community/tutorials/understanding-init-in-go.</description></item><item><title/><link>https://skalt.github.io/til/2024/04/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/08/</guid><description>That select can only be used to race communications operations (e.g. &amp;lt;- myChan). See https://go.dev/ref/spec#Select_statements</description></item><item><title/><link>https://skalt.github.io/til/2024/04/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/13/</guid><description>That you can write
fn foo&amp;lt;const N: usize&amp;gt;(arr: &amp;amp;[u8; N]) { todo!() } to specialize a function for different array sizes, etc. You can use the following types in const generics:
u8, u16, u32, u64, u128, usize i8, i16, i32, i64, i128, isize char bool See https://doc.rust-lang.org/reference/items/generics.html#const-generics See also https://blog.cocl2.com/posts/const-currying-rs/</description></item><item><title/><link>https://skalt.github.io/til/2024/04/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/17/</guid><description>That shasum(1) is implemented in perl: https://linux.die.net/man/1/shasum, though shaXXXsum et al. seem to be implemented in C: https://github.com/coreutils/coreutils/blob/a9b78541fa7c06567c5b82fb4e89d85a1dc0c611/src/digest.c#L103</description></item><item><title/><link>https://skalt.github.io/til/2024/04/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/18/</guid><description>That &amp;ldquo;SASL&amp;rdquo; stands for &amp;ldquo;Simple Authentication and Security Layer&amp;rdquo;, which may/not be a misnomer: it&amp;rsquo;s a set of challenges and responses that can be embedded within a protocol. Notably, one challenge is &amp;ldquo;OAUTHBEARER&amp;rdquo;, a standard Oauth 2.0 bearer token challenge.
See https://en.wikipedia.org/wiki/Simple_Authentication_and_Security_Layer See https://www.rfc-editor.org/rfc/rfc4422</description></item><item><title/><link>https://skalt.github.io/til/2024/04/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/20/</guid><description>That git will place a file with the (absolute?) path to the actual git dir if initialized with git init --separate-git-dir. This is intended as an FS-agnostic symlink.
The lesson here is to never assume repo/.git exists and is a directory; use
git rev-parse --absolute-git-dir docs</description></item><item><title/><link>https://skalt.github.io/til/2024/04/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/22/</guid><description>That Go has labels and can goto label. I&amp;rsquo;m not entirely sure what the usefulness of these is outside of switch statements, but it&amp;rsquo;s still cool!</description></item><item><title/><link>https://skalt.github.io/til/2024/04/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/27/</guid><description>That you can add a [workspace.dependencies] table in your top-level Cargo.toml specifying paths to internal crates:
# ${PROJECT_DIR}/Cargo.toml [workspace] members = [&amp;#34;path/to/my_crate&amp;#34;] [workspace.dependencies] my_crate = { path = &amp;#34;path/to/my_crate&amp;#34; } # ${PROJECT_DIR}/path/to/other_crate/Cargo.toml [dependencies] my_crate = { workspace = true} See https://doc.rust-lang.org/cargo/reference/workspaces.html#the-dependencies-table. See also https://doc.rust-lang.org/cargo/reference/workspaces.html.
workspace = true can also help share external dependencies within multiple internal crates; see https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace.</description></item></channel></rss>