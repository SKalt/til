<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>2022s on Today I Learned</title><link>https://skalt.github.io/til/2022/</link><description>Recent content in 2022s on Today I Learned</description><generator>Hugo -- gohugo.io</generator><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/2022/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2022/01/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/04/</guid><description>about the css :target selector (matches the element with the id specified by the url document-fragment) and the svg &amp;lt;view&amp;gt; element, which specifies a viewBox and can have an id.
see https://css-tricks.com/svg-fragment-identifiers-work/</description></item><item><title/><link>https://skalt.github.io/til/2022/01/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/09/</guid><description>1: That you can set statement timeouts:
ALTER DATABASE mydatabase SET statement_timeout = &amp;#39;60s&amp;#39;; Source: https://blog.crunchydata.com/blog/five-tips-for-a-healthier-postgres-database-in-the-new-year
2: that you can query your cache and index hit metrics (src)
3: writes to indexed columns don&amp;rsquo;t necessarily update indices:
If an indexed column has to have new values inserted, or existing values updated or deleted, the corresponding index does get updated as well. Ironically, that might make queries take more time to evaluate.</description></item><item><title/><link>https://skalt.github.io/til/2022/01/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/10/</guid><description>Of the html table &amp;lt;caption&amp;gt; element</description></item><item><title/><link>https://skalt.github.io/til/2022/01/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/11/</guid><description>that you can pass default values to css variable references, e.g. var(--button-color, pink)
Also,
If the SVG fragment identifier addresses a time segment (e.g., MyDrawing.svg#t=10),then the initial view into the SVG document is established as if no fragment identifier was provided. The rendering of the SVG Document shall be as if the setCurrentTime method on the SVG Document element had been called with the begin time value from the fragment identifier.</description></item><item><title/><link>https://skalt.github.io/til/2022/01/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/13/</guid><description>In sqlite, all rows have a 64-bit ROWID (with some exceptions). Putting those aside, if you have a single-column integer primary key and use the magic words PRIMARY KEY INTEGER then the pkey becomes an alias for rowid, greatly speeding up lookups. I&amp;rsquo;m not sure how this affects insertions, though.
https://sqlite.org/lang_createtable.html#rowids_and_the_integer_primary_key</description></item><item><title/><link>https://skalt.github.io/til/2022/01/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/26/</guid><description>That you can extract sensitive output values from terraform, you can terraform output $output_name
&amp;ndash; see https://learn.hashicorp.com/tutorials/terraform/outputs#redact-sensitive-outputs
Also, sqlite provides a PRAGMA user_version=&amp;lt;number&amp;gt; to let applications store and retrieve a versioning number. See https://sqlite.org/pragma.html#pragma_user_version</description></item><item><title/><link>https://skalt.github.io/til/2022/01/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/31/</guid><description>that the fmt utility exists. It seems to fold or center text according to a target width.</description></item><item><title/><link>https://skalt.github.io/til/2022/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/08/</guid><description>In zsh, ls *(n) will &amp;ldquo;human-sort&amp;rdquo; mostly-numeric filenames.
https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers
https://twitter.com/nedbat/status/1491032300800421892</description></item><item><title/><link>https://skalt.github.io/til/2022/02/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/14/</guid><description>that adding a ! suffix tells tsc that the expression to the left doesn&amp;rsquo;t evaluate to null
https://mariusschulz.com/blog/assertion-functions-in-typescript#using-the-non-null-assertion-operator
that going to about:profile in firefox lets you create separate firefox profiles.</description></item><item><title/><link>https://skalt.github.io/til/2022/02/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/18/</guid><description>you can import from a parent-module using from ... import .</description></item><item><title/><link>https://skalt.github.io/til/2022/02/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/25/</guid><description>that you can use variables in make targets, e.g.
path/${TO}/file: path/${TO}/other/file</description></item><item><title/><link>https://skalt.github.io/til/2022/02/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/28/</guid><description>If you want to get a list of aws:principalTags/* values that can be used in your IAM conditions, search CloudTrail events for Event Name: AssumeRoleWithSaml.</description></item><item><title/><link>https://skalt.github.io/til/2022/03/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/06/</guid><description>About git-sparse-checkout:
https://linuxhint.com/what-is-git-sparse-checkout/ https://git-scm.com/docs/git-sparse-checkout The general script for doing a sparse checkout is:
#!/usr/bin/env bash git_url=&amp;#34;${git_url:?required}&amp;#34; target_dir=&amp;#34;${target_dir:?required}&amp;#34; is_git_dir() { git rev-parse; } init() { mkdir -p &amp;#34;$target_dir&amp;#34; &amp;amp;&amp;amp; cd &amp;#34;$target_dir&amp;#34; if ! is_git_dir; then git init &amp;amp;&amp;amp; git remote add -f origin &amp;#34;$git_url&amp;#34; fi git config core.sparseCheckout true &amp;amp;&amp;amp; git sparse-checkout init &amp;amp;&amp;amp; git sparse-checkout set test &amp;amp;&amp;amp; git pull origin master } see also: https://about.gitlab.com/blog/2020/03/13/partial-clone-for-massive-repositories/</description></item><item><title/><link>https://skalt.github.io/til/2022/03/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/08/</guid><description>random: turns out HTML comments are valid line-comments in JS: https://smitop.com/post/js-html-comments/</description></item><item><title/><link>https://skalt.github.io/til/2022/03/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/17/</guid><description>About the terraform count meta-argument:
you can pass a count = n to any resource-block to create n copies of the resource you can differentiate each of the resources using ${count.index}</description></item><item><title/><link>https://skalt.github.io/til/2022/03/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/18/</guid><description>How to check if a debian package is installed:
deb_pkg_is_installed() { sudo dpkg --get-selections &amp;#34;$1&amp;#34; | grep -q &amp;#34;$1&amp;#34;; }</description></item><item><title/><link>https://skalt.github.io/til/2022/03/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/19/</guid><description>How to pass a multi-character field separator to awk:
awk -F &amp;#39;[ :]+&amp;#39; &amp;#39;{print $1, $3}&amp;#39; # character set: [ :] # repetition: +</description></item><item><title/><link>https://skalt.github.io/til/2022/03/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/22/</guid><description>You can replace the nth instance of a pattern on a line with sed:
; printf &amp;#34;a\tb\tc\n&amp;#34; | sed &amp;#39;s/\t/\t~/2&amp;#39; # a b ~c</description></item><item><title/><link>https://skalt.github.io/til/2022/04/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/04/</guid><description>to run terraform output $output_name to print a named output</description></item><item><title/><link>https://skalt.github.io/til/2022/04/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/06/</guid><description>That python f-strings can do
date and time formatting: f&amp;quot;{today:%Y-%m-%d}&amp;quot; have a variable-debugging format: f&amp;quot;{x = }, {y = }&amp;quot; can use __repr__ rather than __str__: f&amp;quot;{user!r}&amp;quot; can be nested: f&amp;quot;output: {value:{width}.{precision}}&amp;quot; https://martinheinz.dev/blog/70 Of the window.prompt() method: https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt</description></item><item><title/><link>https://skalt.github.io/til/2022/04/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/08/</guid><description>What hardlinks are: direct references to inodes. A hardlink can&amp;rsquo;t reference filesystem objects that don&amp;rsquo;t have inodes, such as directories or ports, and aren&amp;rsquo;t portable across different hardware devices even with the same filesystem layout (I think).
Also, the opposite of mount(8) is not unmount, it&amp;rsquo;s umount &amp;gt;:(
gzip -vt $path_to_file checks the validity of a gzip archive: see https://unix.stackexchange.com/questions/359303/check-validity-of-gz-file</description></item><item><title/><link>https://skalt.github.io/til/2022/04/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/11/</guid><description>You can use journalctl -u ${service_name}.service --since ${time:-today} to view the logs of a systemd service: https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</description></item><item><title/><link>https://skalt.github.io/til/2022/04/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/13/</guid><description>That a rust if-statement can have a return type
let x: u32 = 123; let stmt_result = if x % 2 == 0 { Ok(&amp;#34;even steven&amp;#34;) } else { Err(&amp;#34;odd steven&amp;#34;) }; assert_eq!(x, Err(&amp;#34;odd steven&amp;#34;));</description></item><item><title/><link>https://skalt.github.io/til/2022/04/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/20/</guid><description>tar -ztvf file.tar.gz will list the files in tar.gz</description></item><item><title/><link>https://skalt.github.io/til/2022/04/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/22/</guid><description>that there&amp;rsquo;s a scheduled send option in slack. It&amp;rsquo;s the first option in the dropdown next to the send button.</description></item><item><title/><link>https://skalt.github.io/til/2022/04/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/29/</guid><description>how to check the last apt update time:
last_update=&amp;#34;$(stat --format=%Y /var/cache/apt/pkgcache.bin)&amp;#34; https://askubuntu.com/a/410259/505362</description></item><item><title/><link>https://skalt.github.io/til/2022/04/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/30/</guid><description>That there&amp;rsquo;s an IETF spec for CSVs/TSVs, and it uses doubled double-quotes as quote-escapes, as SQL does https://datatracker.ietf.org/doc/html/rfc4180#section-2</description></item><item><title/><link>https://skalt.github.io/til/2022/05/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/03/</guid><description>aws policy documents can change the order of items within permissions arrays, but that&amp;rsquo;s safe to ignore:
Order is lost for data aws_iam_policy_document Policy elements that are syntactically lists but semantically sets should have their order ignored Perpetual diffs / Objects have changed outside of Terraform tracking ticket Also, that &amp;amp; types take 8 bytes = 64 bits on 64-bit systems
use std::mem; pub struct Foo { bar: String, // 24 baz: usize, // 8 } pub struct Quux&amp;lt;&amp;#39;a&amp;gt; { foo: &amp;amp;&amp;#39;a Foo, bar: usize, } fn main() { println!</description></item><item><title/><link>https://skalt.github.io/til/2022/05/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/04/</guid><description>Not to use BETWEEN for timestamps Not to use char(n), or varchar(n), since they&amp;rsquo;re not natively fixed-width and will defy expectations. See https://wiki.postgresql.org/wiki/Don't_Do_This
Also, I learned that you can&amp;rsquo;t run chsh(1) with sudo; chsh needs to run as the user who&amp;rsquo;s changing their shell.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/05/</guid><description>To prefer async context managers or asyncio.run() instead of creating+managing event loops natively.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/09/</guid><description>that sudo can be configured with the visudo command and that sudo can produce audit logs. See https://www.sudo.ws/posts/2022/05/sudo-for-blue-teams-how-to-control-and-log-better/
that there&amp;rsquo;s an Element.closest(selector) method, which means you can run this function to set the url to the closest link to an element:
((el) =&amp;gt; { let id = el.closest(&amp;#34;[id]&amp;#34;)?.id; if (!id) return; else location.hash = id; })($0); that you can use
SELECT /*...*/ FROM one_table JOIN other_table USING (common_column) as shorthand for one_table.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/10/</guid><description>That you can call time(1) to time how long a shell command takes, like so:
; time terraform fmt -write=true -recursive . # terraform fmt -write=true -recursive . 0.10s user 0.23s system 24% cpu 1.377 total</description></item><item><title/><link>https://skalt.github.io/til/2022/05/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/16/</guid><description>that gzip(1), by default, includes file mtimes. The flag to prevent gzip from zipping non-deterministically is gzip --no-name or gzip -n.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/18/</guid><description>The term &amp;ldquo;brochureware&amp;rdquo;: &amp;ldquo;simply listing products and services on a [static] Web site&amp;rdquo;. https://en.wikipedia.org/wiki/Brochureware</description></item><item><title/><link>https://skalt.github.io/til/2022/05/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/23/</guid><description>aarch64 is a 64-bit version of armv7 (which seems to be 32-bit). Thus, aarch64 = arm64 ~= armv8
AArch64 is the 64-bit state introduced in the Armv8-A architecture (https://en.wikipedia.org/wiki/ARM_architecture#ARMv8-A). The 32-bit state which is backwards compatible with Armv7-A and previous 32-bit Arm architectures is referred to as AArch32. Therefore the GNU triplet for the 64-bit ISA is aarch64. The Linux kernel community chose to call their port of the kernel to this architecture arm64 rather than aarch64, so that&amp;rsquo;s where some of the arm64 usage comes from.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/30/</guid><description>How to write hugo templates. Hugo seems to require RTFM to get a grasp on the functions and variables available in its DSL.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/31/</guid><description>That sql has assertions:
CREATE ASSERTION &amp;lt;Constraint name&amp;gt; CHECK (search condition) [ &amp;lt;constraint attributes&amp;gt; ] see https://crate.io/docs/sql-99/en/latest/chapters/20.html#create-assertion-statement.
h/t https://www.scattered-thoughts.net/log/0024/ for bringing that to my attention.
Also, from the weekend: in postgres, at least, you can call TABLE :table_name; directly to SELECT * FROM :table_name;
Also: how to look up a domain name from an ip:
reverse_ip_lookup() { ip_address=&amp;#34;$1&amp;#34; dig -x $ip_address +noall +answer } Also: how to audit AWS VPC flow logs from CloudWatch Log Insights: use the example queries in the right sidebar.</description></item><item><title/><link>https://skalt.github.io/til/2022/06/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/01/</guid><description>That pg_dumpall exists. That you need to use pg_dumpall to dump tablespaces, roles, and subscriptions. That pg_dumpall will dump the postgres role by default, causing resultant dump to fail to restore. Fortunately, I&amp;rsquo;m able to grep -ve '^CREATE ROLE postgres</description></item><item><title/><link>https://skalt.github.io/til/2022/06/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/02/</guid><description>How to create a JS BigInt value:
A BigInt value, also sometimes just called a BigInt, is a bigint primitive, created by appending n to the end of an integer literal, or by calling the BigInt() constructor (but without the new operator) and giving it an integer value or string value. &amp;ndash; https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt</description></item><item><title/><link>https://skalt.github.io/til/2022/06/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/06/</guid><description>that chickens are native to tropical jungles in south-east Asia.
Source: https://www.theguardian.com/science/2022/jun/06/chickens-were-first-tempted-down-from-trees-by-rice-research-suggests</description></item><item><title/><link>https://skalt.github.io/til/2022/06/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/07/</guid><description>That 1Password has a separate SSH key type! https://developer.1password.com/docs/ssh/manage-keys/
Also, that make has a MAKEFLAGS variable that can be used in recursive calls to make: see https://earthly.dev/blog/make-flags/. This also means you can set -r, which eliminates default rules and file actions.</description></item><item><title/><link>https://skalt.github.io/til/2022/06/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/08/</guid><description>that you can write raise SomeException() from prev_exception: see https://docs.python.org/3/reference/simple_stmts.html#raise</description></item><item><title/><link>https://skalt.github.io/til/2022/06/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/14/</guid><description>That Array.sort separates floats and ints:
x = [8, 7.4, 14, 13, 12, 11] // [ 8, 7.4, 14, 13, 12, 11 ] x.sort() // [ 11, 12, 13, 14, 7.4, 8 ] x.sort().reverse() // [ 8, 7.4, 14, 13, 12, 11 ]</description></item><item><title/><link>https://skalt.github.io/til/2022/06/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/24/</guid><description>That on GitHub, you can add footers like
statement[^1] [^1]: footnote See https://github.blog/changelog/2021-09-30-footnotes-now-supported-in-markdown-fields/ or https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#footnotes</description></item><item><title/><link>https://skalt.github.io/til/2022/07/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/01/</guid><description>That in Chrome/chromium you can view the actually-rendered font by
inspecting an element view computed properties source: https://stackoverflow.com/a/31254584/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/07/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/02/</guid><description>That you can unescape newlines with printf &amp;quot;%b&amp;quot; 'escaped\nstring':
escaped=&amp;#39;a\nb&amp;#39; printf &amp;#34;%b&amp;#34; &amp;#34;$escaped&amp;#34; # a # b</description></item><item><title/><link>https://skalt.github.io/til/2022/07/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/04/</guid><description>How to subset fonts:
# in a virtualenv pip install fonttools brotli zopfli pyftsubset --help see:
https://fonttools.readthedocs.io/en/latest/subset/index.html#initial-glyph-set-specification https://markoskon.com/creating-font-subsets/#available-tools https://clagnut.com/blog/2418/ https://wakamaifondue.com/beta/ Also, optical-sized variable fonts look great.</description></item><item><title/><link>https://skalt.github.io/til/2022/07/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/06/</guid><description>that DNS listens on port 53</description></item><item><title/><link>https://skalt.github.io/til/2022/07/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/08/</guid><description>That there&amp;rsquo;s an official 1Password terraform provider: https://registry.terraform.io/providers/1Password/onepassword/latest/docs</description></item><item><title/><link>https://skalt.github.io/til/2022/07/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/11/</guid><description>CMD+K clears the screen same as clear does!</description></item><item><title/><link>https://skalt.github.io/til/2022/07/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/27/</guid><description>That there&amp;rsquo;s a npm outdated command that finds packages which are not at their most recent versions! Example:
npm outdated --global # Package Current Wanted Latest Location # n 7.5.0 7.5.0 9.0.0 global # npm 6.14.15 6.14.17 8.15.0 global # pnpm 6.15.2 6.33.1 7.6.0 global # yarn 1.22.11 1.22.19 1.22.19 global</description></item></channel></rss>