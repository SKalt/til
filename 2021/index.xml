<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>2021s on Today I Learned</title><link>https://skalt.github.io/til/2021/</link><description>Recent content in 2021s on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/2021/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/12/</guid><description>&lt;p&gt;TIL that terminals attached to interactive docker containers don&amp;rsquo;t necesarily respect ANSI escape codes.
I&amp;rsquo;m still not 100% sure what causes the terminal to respect ANSI escape codes or not, but &lt;code&gt;test -t 1&lt;/code&gt; didn&amp;rsquo;t seem to correctly discriminate.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/07/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/13/</guid><description>&lt;p&gt;That &lt;code&gt;pickle.loads(pickle.dumps(obj))&lt;/code&gt; is faster than &lt;code&gt;copy.deepcopy(obj)&lt;/code&gt;
Learned from &lt;a href="https://twitter.com/simonw/status/1413635105755570177"&gt;Simon Willison&amp;rsquo;s twitter&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/07/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/14/</guid><description>&lt;p&gt;that &lt;!-- raw HTML omitted --&gt;Cmd&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;D&lt;!-- raw HTML omitted --&gt; selects the next occurence of the currently-highlighted text in VS Code!
Thanks to Mark Brewer for teaching me this!&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/07/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/22/</guid><description>&lt;p&gt;about &lt;code&gt;const enum&lt;/code&gt;s in typescript, which get compiled to their values rather than getting represented as a mapping object.
See &lt;a href="https://www.typescriptlang.org/docs/handbook/enums.html#const-enums"&gt;https://www.typescriptlang.org/docs/handbook/enums.html#const-enums&lt;/a&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/07/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/24/</guid><description>&lt;p&gt;&lt;a href="https://web.dev/fetch-upload-streaming/#previously-on-the-exciting-adventures-of-fetch-streams"&gt;How to stream large responses using the Javascript &lt;code&gt;Fetch&lt;/code&gt; API:&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Response fully received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also: &lt;a href="https://linuxhandbook.com/login-shell/"&gt;the circumstances under which ~/.*profile files are run: only if you log in.&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/07/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/25/</guid><description>&lt;p&gt;You can create new google docs/spreadsheets/presentations, office365 docs/sheets/presentations, and github repos/gists/codespaces by accessing specific URLs in the browser:&lt;/p&gt;
&lt;h2 id="g-suite"&gt;G Suite&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docs: &lt;a href="https://doc.new"&gt;https://doc.new&lt;/a&gt;, &lt;a href="https://docs.new"&gt;https://docs.new&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sheets: &lt;a href="https://sheet.new"&gt;https://sheet.new&lt;/a&gt;, &lt;a href="https://sheets.new"&gt;https://sheets.new&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;slides: &lt;a href="http://slide.new"&gt;http://slide.new&lt;/a&gt;, &lt;a href="http://slides.new"&gt;http://slides.new&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="office-365"&gt;Office 365&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docs: &lt;a href="https://word.new"&gt;https://word.new&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sheets: &lt;a href="https://excel.new"&gt;https://excel.new&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;slides: &lt;a href="https://ppt.new"&gt;https://ppt.new&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="github"&gt;github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://repo.new"&gt;https://repo.new&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.new"&gt;https://gist.new&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codespace.new"&gt;https://codespace.new&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;source: &lt;a href="https://twitter.com/rothgar/status/1419339782258184192"&gt;https://twitter.com/rothgar/status/1419339782258184192&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/31/</guid><description>&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-grep"&gt;That you can use &lt;code&gt;git grep&lt;/code&gt;&lt;/a&gt; to search for a string in a git repo.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/08/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/05/</guid><description>&lt;p&gt;that running python with the &lt;a href="https://docs.python.org/3/using/cmdline.html#cmdoption-o"&gt;&lt;code&gt;-O&lt;/code&gt; flag disables &lt;code&gt;assert&lt;/code&gt; statements&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/08/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/12/</guid><description>&lt;p&gt;about a new source of standard-ish python functionality: &lt;a href="https://github.com/mahmoud/boltons"&gt;https://github.com/mahmoud/boltons&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/09/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/05/</guid><description>&lt;p&gt;about &lt;a href="https://pkg.go.dev/cmd/go#hdr-Build_constraints"&gt;go build constraints&lt;/a&gt;. Add&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;//go:build (booleanExprUsingTagNames)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to the top of the conditionally-included file. The boolean expression can be composed of tags (passed via &lt;code&gt;go build -tag &amp;lt;tag&amp;gt;...&lt;/code&gt;) or expressions referencing the host or target os and arch.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/09/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/06/</guid><description>&lt;p&gt;about &lt;code&gt;PATH_MAX&lt;/code&gt;: the part of the POSIX standard which determines the maximum number of bytes allowed in an absolute path. In Linux, &lt;code&gt;PATH_MAX&lt;/code&gt; is 4096 &lt;a href="https://stackoverflow.com/a/9449307/6571327"&gt;[src]&lt;/a&gt;, but it&amp;rsquo;s possible to construct longer paths if you don&amp;rsquo;t care about some (most) utilities that use the current working directory to fail due to buffer overflow.&lt;/p&gt;
&lt;p&gt;Also, I learned that &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_file_systems#Limits"&gt;most filesystems restrict file names to 255 bytes&lt;/a&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/09/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/15/</guid><description>&lt;p&gt;That you &lt;em&gt;can&lt;/em&gt;, technically, write inline comments in bash. Specifically, you have to put the comments in a subshell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; abc &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="c1"&gt;#put your comment here` \&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; def &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="c1"&gt;#another chance for a comment` \&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; xyz etc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;^ from &lt;a href="https://stackoverflow.com/a/23872003/6571327"&gt;https://stackoverflow.com/a/23872003/6571327&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/09/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/21/</guid><description>&lt;p&gt;That the &lt;!-- raw HTML omitted --&gt;IANA&lt;!-- raw HTML omitted --&gt; suggests 49152–65535 (215 + 214 to 216 − 1) for dynamic or private ports.
source: &lt;a href="https://en.wikipedia.org/wiki/Ephemeral_port#Range"&gt;https://en.wikipedia.org/wiki/Ephemeral_port#Range&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/09/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/24/</guid><description>&lt;p&gt;that you can find the version of debian used by your current ubuntu version by running &lt;code&gt;cat /etc/debian_version&lt;/code&gt;. Even better, you can &lt;code&gt;source /etc/os-release&lt;/code&gt; and get &lt;code&gt;$ID&lt;/code&gt; and &lt;code&gt;$VERSION_ID&lt;/code&gt; variables.
Here&amp;rsquo;s what&amp;rsquo;s in the os-release for Ubuntu 20.04:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Ubuntu&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;20.04.3 LTS (Focal Fossa)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;ID_LIKE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;debian
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;PRETTY_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Ubuntu 20.04.3 LTS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;VERSION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;20.04&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;HOME_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;https://www.ubuntu.com/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;SUPPORT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;https://help.ubuntu.com/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;BUG_REPORT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;https://bugs.launchpad.net/ubuntu/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;PRIVACY_POLICY_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;VERSION_CODENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;focal
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;UBUNTU_CODENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;focal
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sources: &lt;a href="https://askubuntu.com/a/445496/505362"&gt;https://askubuntu.com/a/445496/505362&lt;/a&gt; and the source code at &lt;a href="https://dot.net/v1/dotnet-installer.sh"&gt;https://dot.net/v1/dotnet-installer.sh&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/01/</guid><description>&lt;p&gt;That there&amp;rsquo;s a postgres keyword &lt;code&gt;DEALLOCATE&lt;/code&gt; to remove prepared statements from memory: &lt;a href="https://www.postgresql.org/docs/current/sql-deallocate.html"&gt;https://www.postgresql.org/docs/current/sql-deallocate.html&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/02/</guid><description>&lt;p&gt;that you can hold &lt;!-- raw HTML omitted --&gt;shift+alt&lt;!-- raw HTML omitted --&gt; (linux) or &lt;!-- raw HTML omitted --&gt;shift+opt&lt;!-- raw HTML omitted --&gt; (mac) and click to select box of rows and columns in VS Code.
See &lt;a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_column-box-selection"&gt;https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_column-box-selection&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/04/</guid><description>&lt;p&gt;that different versions of &lt;code&gt;sort(1)&lt;/code&gt; have different sorting presets.
For example, on ubuntu 20.04 vs debian buster, &lt;code&gt;sort&lt;/code&gt; will swap the order of how it sorts &lt;code&gt;_&lt;/code&gt;s.
These differences can be resolved by passing &lt;code&gt;--unique --dictionary-order --stable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Bonus: &lt;code&gt;-h/--human-numeric-sort&lt;/code&gt; can sort SI suffixes.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/07/</guid><description>&lt;p&gt;That GNU awk has a networking stack: &lt;a href="https://www.gnu.org/software/gawk/manual/gawkinet/gawkinet.html"&gt;https://www.gnu.org/software/gawk/manual/gawkinet/gawkinet.html&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/09/</guid><description>&lt;p&gt;That &lt;code&gt;cgo&lt;/code&gt; will automagically ship a &lt;code&gt;C.sizeof_YourStruct&lt;/code&gt; for every C struct that you can reference as &lt;code&gt;C.YourStruct&lt;/code&gt;.
This is useful for pointer arithmetic via &lt;code&gt;unsafe.Pointer(uintptr(something) + uintptr(intIndex * C.sizeof_YourStruct))&lt;/code&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/12/</guid><description>&lt;p&gt;about the shell &lt;code&gt;until&lt;/code&gt; keyword, which is equivalent to &lt;code&gt;while !&lt;/code&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/13/</guid><description>&lt;p&gt;about &lt;a href="https://linux.die.net/man/1/reset"&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt;, which resets your terminal after a series of undesired ANSI escape codes.
I also learned about &lt;a href="https://linux.die.net/man/1/echo"&gt;&lt;code&gt;echo -e &amp;quot;\e&amp;quot;&lt;/code&gt;&lt;/a&gt; meaning &amp;ldquo;interpret backslash escape codes&amp;rdquo; (&lt;code&gt;-e&lt;/code&gt;) and &lt;code&gt;&amp;quot;\e&amp;quot; == &amp;quot;\033&amp;quot;&lt;/code&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/19/</guid><description>&lt;p&gt;that you can write multiple lines to a file using a &lt;code&gt;cat &amp;gt; path/to/file&lt;/code&gt; with argument, like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;cat &amp;gt; /tmp/file
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;subsequent typed input
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;is still stdin, which is being &lt;span class="nb"&gt;read&lt;/span&gt; by &lt;span class="sb"&gt;`&lt;/span&gt;cat&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;and so will be written to the file
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;^C &lt;span class="c1"&gt;# cancels `cat` writing to the file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/22/</guid><description>&lt;p&gt;That there are special CSS classes for theme colors in MSFT PowerPoint: &lt;a href="https://www.brightcarbon.com/blog/responsive-svgs-and-smart-icons-in-powerpoint/"&gt;https://www.brightcarbon.com/blog/responsive-svgs-and-smart-icons-in-powerpoint/&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/27/</guid><description>&lt;p&gt;About the svg &lt;code&gt;view&lt;/code&gt; element: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view"&gt;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view&lt;/a&gt;
It can be used to create views referable like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;total&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;view&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;view-1&amp;#34;&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;circle&lt;/span&gt; &lt;span class="na"&gt;cx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span class="na"&gt;cy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;#view-1&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/28/</guid><description>&lt;p&gt;That you can detect the terminal you&amp;rsquo;re running in (including vscode) by checking the value of &lt;code&gt;&amp;quot;${TERM_PROGRAM:-}&amp;quot;&lt;/code&gt;.
The VS Code integrated termial always has a &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; of &lt;code&gt;vscode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://stackoverflow.com/a/59231654/6571327"&gt;https://stackoverflow.com/a/59231654/6571327&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/30/</guid><description>&lt;p&gt;about &lt;code&gt;terminfo&lt;/code&gt;, the terminal information database: it can be queried to find all kinds of fun facts about your current terminal.
For instance,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tput cols&lt;/code&gt; =&amp;gt; number of columns in the current terminal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tput colors&lt;/code&gt; =&amp;gt; number of colors the terminal supports&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tput setaf&lt;/code&gt; =&amp;gt; generate ansi codes to set the foregrount color in the terminal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, &lt;code&gt;infocmp screen&lt;/code&gt; dumps a bunch of other related information drawn from &lt;code&gt;terminfo&lt;/code&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/11/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/03/</guid><description>&lt;p&gt;That&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two accepted formats for these strings: plain keyword/value strings and URIs.
URIs generally follow RFC 3986, except that multi-host connection strings are allowed.&lt;/p&gt;
&lt;p&gt;&amp;ndash; &lt;a href="https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING"&gt;https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;you can pass a &lt;code&gt;application_name&lt;/code&gt; parameter to a connection string &amp;ndash; &lt;a href="https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-APPLICATION-NAME"&gt;https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-APPLICATION-NAME&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/11/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/05/</guid><description>&lt;p&gt;That &lt;code&gt;sudo&lt;/code&gt; has a webpage and an unfortunate mascot: &lt;a href="https://www.sudo.ws/"&gt;https://www.sudo.ws/&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/11/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/23/</guid><description>&lt;p&gt;&lt;code&gt;locate&lt;/code&gt; searches all filenames for a keyword using a database which you can update &lt;code&gt;updatedb&lt;/code&gt;.
&lt;code&gt;whereis&lt;/code&gt; searches for binaries using the same mechanism.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.madebygps.com/an-intro-to-finding-things-in-linux/"&gt;https://www.madebygps.com/an-intro-to-finding-things-in-linux/&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/11/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/29/</guid><description>&lt;p&gt;that there&amp;rsquo;s a &lt;code&gt;pg_sleep(seconds)&lt;/code&gt; function: see &lt;a href="https://til.hashrocket.com/posts/8a6f68519d-sleeping-in-postgresql"&gt;https://til.hashrocket.com/posts/8a6f68519d-sleeping-in-postgresql&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/12/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/12/01/</guid><description>&lt;p&gt;that you can write any file in your git history using &lt;code&gt;git show &amp;lt;ref&amp;gt;:&amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://juplo.de/cat-any-file-in-any-commit-with-git/"&gt;https://juplo.de/cat-any-file-in-any-commit-with-git/&lt;/a&gt;&lt;/p&gt;</description></item></channel></rss>