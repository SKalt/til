<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>2021s on Today I Learned</title><link>https://skalt.github.io/til/2021/</link><description>Recent content in 2021s on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/2021/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/12/</guid><description>TIL that terminals attached to interactive docker containers don&amp;rsquo;t necesarily respect ANSI escape codes. I&amp;rsquo;m still not 100% sure what causes the terminal to respect ANSI escape codes or not, but test -t 1 didn&amp;rsquo;t seem to correctly discriminate.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/13/</guid><description>That pickle.loads(pickle.dumps(obj)) is faster than copy.deepcopy(obj) Learned from Simon Willison&amp;rsquo;s twitter</description></item><item><title/><link>https://skalt.github.io/til/2021/07/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/14/</guid><description>that Cmd+D selects the next occurence of the currently-highlighted text in VS Code! Thanks to Mark Brewer for teaching me this!</description></item><item><title/><link>https://skalt.github.io/til/2021/07/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/22/</guid><description>about const enums in typescript, which get compiled to their values rather than getting represented as a mapping object. See https://www.typescriptlang.org/docs/handbook/enums.html#const-enums.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/24/</guid><description>How to stream large responses using the Javascript Fetch API:
const response = await fetch(url); const reader = response.body.getReader(); while (true) { const { value, done } = await reader.read(); if (done) break; console.log(&amp;#39;Received&amp;#39;, value); } console.log(&amp;#39;Response fully received&amp;#39;); Also: the circumstances under which ~/.*profile files are run: only if you log in.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/25/</guid><description>You can create new google docs/spreadsheets/presentations, office365 docs/sheets/presentations, and github repos/gists/codespaces by accessing specific URLs in the browser:
G Suite docs: https://doc.new, https://docs.new sheets: https://sheet.new, https://sheets.new slides: http://slide.new, http://slides.new Office 365 docs: https://word.new sheets: https://excel.new slides: https://ppt.new github https://repo.new https://gist.new https://codespace.new source: https://twitter.com/rothgar/status/1419339782258184192</description></item><item><title/><link>https://skalt.github.io/til/2021/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/31/</guid><description>That you can use git grep to search for a string in a git repo.</description></item><item><title/><link>https://skalt.github.io/til/2021/08/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/05/</guid><description>that running python with the -O flag disables assert statements</description></item><item><title/><link>https://skalt.github.io/til/2021/08/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/12/</guid><description>about a new source of standard-ish python functionality: https://github.com/mahmoud/boltons</description></item><item><title/><link>https://skalt.github.io/til/2021/09/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/05/</guid><description>about go build constraints. Add
//go:build (booleanExprUsingTagNames) to the top of the conditionally-included file. The boolean expression can be composed of tags (passed via go build -tag &amp;lt;tag&amp;gt;...) or expressions referencing the host or target os and arch.</description></item><item><title/><link>https://skalt.github.io/til/2021/09/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/06/</guid><description>about PATH_MAX: the part of the POSIX standard which determines the maximum number of bytes allowed in an absolute path. In Linux, PATH_MAX is 4096 [src], but it&amp;rsquo;s possible to construct longer paths if you don&amp;rsquo;t care about some (most) utilities that use the current working directory to fail due to buffer overflow.
Also, I learned that most filesystems restrict file names to 255 bytes.</description></item><item><title/><link>https://skalt.github.io/til/2021/09/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/15/</guid><description>That you can, technically, write inline comments in bash. Specifically, you have to put the comments in a subshell:
echo abc `#put your comment here` \ def `#another chance for a comment` \ xyz etc ^ from https://stackoverflow.com/a/23872003/6571327</description></item><item><title/><link>https://skalt.github.io/til/2021/09/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/21/</guid><description>That the IANA suggests 49152–65535 (215 + 214 to 216 − 1) for dynamic or private ports. source: https://en.wikipedia.org/wiki/Ephemeral_port#Range</description></item><item><title/><link>https://skalt.github.io/til/2021/09/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/24/</guid><description>that you can find the version of debian used by your current ubuntu version by running cat /etc/debian_version. Even better, you can source /etc/os-release and get $ID and $VERSION_ID variables. Here&amp;rsquo;s what&amp;rsquo;s in the os-release for Ubuntu 20.04:
NAME=&amp;#34;Ubuntu&amp;#34; VERSION=&amp;#34;20.04.3 LTS (Focal Fossa)&amp;#34; ID=ubuntu ID_LIKE=debian PRETTY_NAME=&amp;#34;Ubuntu 20.04.3 LTS&amp;#34; VERSION_ID=&amp;#34;20.04&amp;#34; HOME_URL=&amp;#34;https://www.ubuntu.com/&amp;#34; SUPPORT_URL=&amp;#34;https://help.ubuntu.com/&amp;#34; BUG_REPORT_URL=&amp;#34;https://bugs.launchpad.net/ubuntu/&amp;#34; PRIVACY_POLICY_URL=&amp;#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;#34; VERSION_CODENAME=focal UBUNTU_CODENAME=focal Sources: https://askubuntu.com/a/445496/505362 and the source code at https://dot.net/v1/dotnet-installer.sh</description></item><item><title/><link>https://skalt.github.io/til/2021/10/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/01/</guid><description>That there&amp;rsquo;s a postgres keyword DEALLOCATE to remove prepared statements from memory: https://www.postgresql.org/docs/current/sql-deallocate.html</description></item><item><title/><link>https://skalt.github.io/til/2021/10/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/02/</guid><description>that you can hold shift+alt (linux) or shift+opt (mac) and click to select box of rows and columns in VS Code. See https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_column-box-selection</description></item><item><title/><link>https://skalt.github.io/til/2021/10/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/04/</guid><description>that different versions of sort(1) have different sorting presets. For example, on ubuntu 20.04 vs debian buster, sort will swap the order of how it sorts _s. These differences can be resolved by passing --unique --dictionary-order --stable.
Bonus: -h/--human-numeric-sort can sort SI suffixes.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/07/</guid><description>That GNU awk has a networking stack: https://www.gnu.org/software/gawk/manual/gawkinet/gawkinet.html</description></item><item><title/><link>https://skalt.github.io/til/2021/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/09/</guid><description>That cgo will automagically ship a C.sizeof_YourStruct for every C struct that you can reference as C.YourStruct. This is useful for pointer arithmetic via unsafe.Pointer(uintptr(something) + uintptr(intIndex * C.sizeof_YourStruct)).</description></item><item><title/><link>https://skalt.github.io/til/2021/10/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/12/</guid><description>about the shell until keyword, which is equivalent to while !.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/13/</guid><description>about reset, which resets your terminal after a series of undesired ANSI escape codes. I also learned about echo -e &amp;quot;\e&amp;quot; meaning &amp;ldquo;interpret backslash escape codes&amp;rdquo; (-e) and &amp;quot;\e&amp;quot; == &amp;quot;\033&amp;quot;.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/19/</guid><description>that you can write multiple lines to a file using a cat &amp;gt; path/to/file with argument, like
cat &amp;gt; /tmp/file subsequent typed input is still stdin, which is being read by `cat` and so will be written to the file ^C # cancels `cat` writing to the file</description></item><item><title/><link>https://skalt.github.io/til/2021/10/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/22/</guid><description>That there are special CSS classes for theme colors in MSFT PowerPoint: https://www.brightcarbon.com/blog/responsive-svgs-and-smart-icons-in-powerpoint/</description></item><item><title/><link>https://skalt.github.io/til/2021/10/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/27/</guid><description>About the svg view element: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view It can be used to create views referable like
&amp;lt;svg id=&amp;#34;total&amp;#34;&amp;gt; &amp;lt;view id=&amp;#34;view-1&amp;#34; viewBox=&amp;#34;...&amp;#34; /&amp;gt; &amp;lt;circle cx=&amp;#34;1&amp;#34; cy=&amp;#34;1&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; &amp;lt;img src=&amp;#34;#view-1&amp;#34; /&amp;gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/28/</guid><description>That you can detect the terminal you&amp;rsquo;re running in (including vscode) by checking the value of &amp;quot;${TERM_PROGRAM:-}&amp;quot;. The VS Code integrated termial always has a $TERM_PROGRAM of vscode.
Source: https://stackoverflow.com/a/59231654/6571327</description></item><item><title/><link>https://skalt.github.io/til/2021/10/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/30/</guid><description>about terminfo, the terminal information database: it can be queried to find all kinds of fun facts about your current terminal. For instance,
tput cols =&amp;gt; number of columns in the current terminal tput colors =&amp;gt; number of colors the terminal supports tput setaf =&amp;gt; generate ansi codes to set the foregrount color in the terminal Also, infocmp screen dumps a bunch of other related information drawn from terminfo.</description></item><item><title/><link>https://skalt.github.io/til/2021/11/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/03/</guid><description>That
There are two accepted formats for these strings: plain keyword/value strings and URIs. URIs generally follow RFC 3986, except that multi-host connection strings are allowed.
&amp;ndash; https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING
you can pass a application_name parameter to a connection string &amp;ndash; https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-APPLICATION-NAME</description></item><item><title/><link>https://skalt.github.io/til/2021/11/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/05/</guid><description>That sudo has a webpage and an unfortunate mascot: https://www.sudo.ws/</description></item><item><title/><link>https://skalt.github.io/til/2021/11/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/23/</guid><description>locate searches all filenames for a keyword using a database which you can update updatedb. whereis searches for binaries using the same mechanism.
https://www.madebygps.com/an-intro-to-finding-things-in-linux/</description></item><item><title/><link>https://skalt.github.io/til/2021/11/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/29/</guid><description>that there&amp;rsquo;s a pg_sleep(seconds) function: see https://til.hashrocket.com/posts/8a6f68519d-sleeping-in-postgresql</description></item><item><title/><link>https://skalt.github.io/til/2021/12/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/12/01/</guid><description>that you can write any file in your git history using git show &amp;lt;ref&amp;gt;:&amp;lt;path&amp;gt;.
See https://juplo.de/cat-any-file-in-any-commit-with-git/</description></item></channel></rss>