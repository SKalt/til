<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>2023s on Today I Learned</title><link>https://skalt.github.io/til/2023/</link><description>Recent content in 2023s on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/2023/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2023/01/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/01/</guid><description>The difference between triggers and event triggers in postgres:
Unlike regular triggers, which are attached to a single table and capture only DML events, event triggers are global to a particular database and are capable of capturing DDL events. Like regular triggers, event triggers can be written in any procedural language that includes event trigger support, or in C, but not in plain SQL.
&amp;ndash; https://www.postgresql.org/docs/current/event-triggers.html</description></item><item><title/><link>https://skalt.github.io/til/2023/01/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/09/</guid><description>That a directory service doesn&amp;rsquo;t necessarily provide authentication: https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ldap/what-is-a-directory-service describes a directory service as a document database optimized for searches of a hierarchical (directory) tree.
[Directory] entries are arranged hierarchically in a tree that is structured geographically and organizationally. Global entries, such as countries/regions, reside at the top of the tree, followed by state or national organizations, then organizational units, people, devices, or anything else that might be represented in a directory.</description></item><item><title/><link>https://skalt.github.io/til/2023/01/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/17/</guid><description>that you can set PYTHONDONTWRITEBYTECODE=1 to prevent python from writing pycs (see https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE)
Also: that AWS SSO does SCIM actions using the sso-directory:* IAM prefix rather than the sso:* prefix.</description></item><item><title/><link>https://skalt.github.io/til/2023/01/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/28/</guid><description>That you need ato git add a flake.nix for the flake&amp;rsquo;s contents to start to work with nix develop
This is needed because Nix flakes respects gitignores. If you don&amp;rsquo;t add things to the git staging area, git doesn&amp;rsquo;t know about the files at all, and Nix flakes can&amp;rsquo;t know if it should ignore them. &amp;ndash; https://xeiaso.net/blog/nix-flakes-go-programs
that &amp;ldquo;truecolor&amp;rdquo; support in shells is detected with the $COLORTERM env var</description></item><item><title/><link>https://skalt.github.io/til/2023/01/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/29/</guid><description>how to setup passwordless SSH login:
ssh-copy-id $(whoami)@${other_host} https://linuxize.com/post/how-to-setup-passwordless-ssh-login/
how to change a ubuntu machine&amp;rsquo;s computer&amp;rsquo;s hostname:
echo &amp;#34;new-hostname&amp;#34; &amp;gt; sudo tee /etc/hostname; sudo sed -i &amp;#39;s/old-hostname/new-hostname/1&amp;#39; /etc/hosts; sudo hosname &amp;#39;new-hostname&amp;#39;; # &amp;lt;- for changes to take effect prior to reboot h/t https://www.howtogeek.com/197934/how-to-change-your-hostname-computer-name-on-ubuntu-linux/</description></item><item><title/><link>https://skalt.github.io/til/2023/01/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/30/</guid><description>That psql et al. support colors:
export PG_COLOR=auto # only colorize output to ttys learned from https://fluca1978.github.io/2023/01/23/PostgreSQLColors.html See also:
https://www.postgresql.org/docs/current/color-when.html https://www.postgresql.org/docs/current/color-which.html</description></item><item><title/><link>https://skalt.github.io/til/2023/02/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/01/</guid><description>git restore exists, and works like a more destructive git stash
See https://git-scm.com/docs/git-restore</description></item><item><title/><link>https://skalt.github.io/til/2023/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/08/</guid><description>That in Rust, assert! runs in both debug and release builds. For debug-only assertions, use debug_assert!. See https://doc.rust-lang.org/stable/std/macro.debug_assert.html.
That in Python, you can call isinstance(thing, (tuple, OfMany, DifferentClasses)) to check if a variable is an instance of many possible classes. See https://docs.python.org/3/library/functions.html?highlight=isinstance#isinstance.</description></item><item><title/><link>https://skalt.github.io/til/2023/02/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/21/</guid><description>That properties of a NamedTuple can have docstrings:
class FooBar(NamedTuple): foo: str &amp;#34;&amp;#34;&amp;#34;Foo&amp;#34;&amp;#34;&amp;#34; bar: int &amp;#34;&amp;#34;&amp;#34;Bar&amp;#34;&amp;#34;&amp;#34; As seen in https://github.com/sqlalchemy/sqlalchemy/blob/main/lib/sqlalchemy/sql/compiler.py#L348</description></item><item><title/><link>https://skalt.github.io/til/2023/02/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/22/</guid><description>How to make a self-signed TLS certificate:
#!/usr/bin/env bash # stolen from https://stackoverflow.com/questions/10175812/how-to-generate-a-self-signed-ssl-certificate-using-openssl openssl \ req -x509 \ -newkey rsa:4096 \ -keyout key.pem \ -out cert.pem \ -sha256 -days 365 -nodes -subj &amp;#39;/CN=localhost&amp;#39;</description></item><item><title/><link>https://skalt.github.io/til/2023/03/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/02/</guid><description>that there&amp;rsquo;s a git commit --trailer &amp;lt;token&amp;gt;:&amp;lt;value&amp;gt; flag.
https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---trailerlttokengtltvaluegt</description></item><item><title/><link>https://skalt.github.io/til/2023/03/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/04/</guid><description>The string &amp;ldquo;0.1.12&amp;rdquo; is a version requirement. Although it looks like a specific version of the time crate, it actually specifies a range of versions and allows SemVer compatible updates.
&amp;ndash; https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
Instead, in order to lock to a specific version of a crate, you need to write = 0.1.2.</description></item><item><title/><link>https://skalt.github.io/til/2023/03/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/09/</guid><description>This was a bit of a rollercoaster morning: (1) I tried git worktree add $branch, and it was pretty convenient! (2) until I got a pre-commit error, then I got error: unable to read $HASH on git status (3) which led me to discover git fsck --full --name-objects, which is currently yelling about error: $HASH: invalid sha1 pointer in cache-tree</description></item><item><title/><link>https://skalt.github.io/til/2023/03/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/19/</guid><description>That you can use a .gitattributes file to prevent files from appearing in GitHub diffs like so:
generated/**/* linguist-generated=true See https://docs.github.com/en/repositories/working-with-files/managing-files/customizing-how-changed-files-appear-on-github</description></item><item><title/><link>https://skalt.github.io/til/2023/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/09/</guid><description>About the precedent for deriving serde from serialize/deserialize:
A codec is a device or computer program that encodes or decodes a data stream or signal. Codec is a portmanteau of coder/decoder. In electronic communications, an endec is a device that acts as both an encoder and a decoder on a signal or data stream, and hence is a type of codec. Endec is a portmanteau of encoder/decoder. &amp;ndash; https://en.wikipedia.org/wiki/Codec</description></item><item><title/><link>https://skalt.github.io/til/2023/05/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/15/</guid><description>That powerline networking kits exist: they send signals over home electrical wiring to extend your home network. Similarly, MoCA (Multimedia over Coaxial Alliance) sends signals over coax cable.</description></item><item><title/><link>https://skalt.github.io/til/2023/05/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/16/</guid><description>That there are instances where a git commit-message can start with a #:
set -eu experiment=&amp;#34;$(mkdtemp -d)&amp;#34; cd &amp;#34;$experiment&amp;#34; git init# touch readme &amp;amp;&amp;amp; git add readme git commit -m &amp;#34;# not a comment, apparently&amp;#34; actual=&amp;#34;$(cat ./.git/COMMIT_EDITMSG)&amp;#34; expected=&amp;#34;# not a comment, apparently&amp;#34; test &amp;#34;$actual&amp;#34; = &amp;#34;$expected&amp;#34; git log # &amp;lt;hash&amp;gt; # # not a comment, apparently</description></item><item><title/><link>https://skalt.github.io/til/2023/05/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/24/</guid><description>That you can destructure struct values:
struct Point { x: i32, y: i32, } fn main() { let p = Point { x: 0, y: 7 }; let Point { x: a, y: b } = p; assert_eq!(0, a); assert_eq!(7, b); } see https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#destructuring-structs</description></item><item><title/><link>https://skalt.github.io/til/2023/05/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/27/</guid><description>That you can list the files in a zipfile using unzip -l path/to/file.zip. Also, that VSIX (Visual Studio and VSCode extension packaging files) are zipfiles with an XML manifest.</description></item><item><title/><link>https://skalt.github.io/til/2023/05/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/28/</guid><description>type NonEmptyArray&amp;lt;T&amp;gt; = [T, ...T[]]; First seen at https://github.com/rust-lang/rust-analyzer/blob/master/editors/code/src/util.ts#L24</description></item><item><title/><link>https://skalt.github.io/til/2023/05/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/29/</guid><description>During some research on build systems, I began re-reading Build Systems a la Carte (repo, paper). I found the Haskell even more confusing than I remembered, so I set out to translate the Haskell types to Typescript, Rust, and other type systems I know. When I got into the translation, I realized I only know enough to get the vibe of what Haskell code&amp;rsquo;s saying :/.
The following are my notes on the 2021 open-source update to Learn You A Haskell for Great Good.</description></item><item><title/><link>https://skalt.github.io/til/2023/05/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/30/</guid><description>That there&amp;rsquo;s a Linux command to do sql-like JOINs of lines in files, possibly based on a field in each line: join(1)</description></item><item><title/><link>https://skalt.github.io/til/2023/05/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/31/</guid><description>WebDAV (Web Distributed Authoring and Versioning) is a set of extensions to the Hypertext Transfer Protocol (HTTP)[. WebDAV provides] concurrency control and namespace operations &amp;hellip; WebDAV is defined in IETF RFC 4918.
&amp;ndash; https://en.wikipedia.org/wiki/WebDAV
Apparently, Bazel, Gradle, and CCache all have support for a WebDAV-based remote cache: https://github.com/mozilla/sccache/blob/main/docs/Webdav.md</description></item><item><title/><link>https://skalt.github.io/til/2023/06/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/04/</guid><description>That k8s can run &amp;ldquo;init containers&amp;rdquo; before a pod&amp;rsquo;s app containers: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/. This provides setup-script functionality, and Cloudflare Pages uses multiple init containers for cloning, installing toolchains, and building pages: https://blog.cloudflare.com/moderizing-cloudflare-pages-builds-toolbox/#our-modular-and-scalable-architecture</description></item><item><title/><link>https://skalt.github.io/til/2023/06/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/05/</guid><description>SPF (Sender Policy Framework) records are DNS TXT records like v=spf1 _include=${email_server_domain} ~all. SPF records help email servers verify that another email server is allowed to send messages from a domain (e.g. foo@domain.com should only be sent by servers listed in an SPF record on a DNS server with authority over domain.com). More info at https://www.cloudflare.com/learning/dns/dns-records/dns-spf-record/
DKIM is another TXT record that issues public keys to check signature headers in email: https://www.</description></item><item><title/><link>https://skalt.github.io/til/2023/06/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/13/</guid><description>That
uuids are 128 bits long in uuid v1, only the first 8 hex digits (32 bits) are randomly generated in uuid v4, the entire 128 bits are randomly generated uuid v5 derives all 128 bits deterministically from the hash of a seed uuid and some input bytes See https://www.sohamkamani.com/uuid-versions-explained/</description></item><item><title/><link>https://skalt.github.io/til/2023/06/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/18/</guid><description>By default, a closure seems to live as long as its parent function unless you use the move keyword.
fn unmoved&amp;lt;&amp;#39;a&amp;gt;(arg: &amp;amp;&amp;#39;a str) -&amp;gt; impl Fn() + &amp;#39;a { let f = || println!(&amp;#34;unmoved: {}&amp;#34;, arg); f } fn moved&amp;lt;&amp;#39;a&amp;gt;(arg: &amp;amp;&amp;#39;a str) -&amp;gt; impl Fn() + &amp;#39;a { let f = move || println!(&amp;#34;moved: {}&amp;#34;, arg); f } fn main() { unmoved(&amp;#34;a&amp;#34;)() // does not compile moved(&amp;#34;b&amp;#34;)() // works fine } &amp;ndash; playground link</description></item><item><title/><link>https://skalt.github.io/til/2023/06/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/19/</guid><description>That Option&amp;lt;T&amp;gt; costs ~1x the alignment value of T. I also learned Vec&amp;lt;T&amp;gt;&amp;rsquo;s size and alignment don&amp;rsquo;t reflect the size and alignment of T since the Vec is tracking an owned buffer on the heap which isn&amp;rsquo;t counted in the Vec&amp;rsquo;s own size.
struct Alone8(u8); // size= 1, align=1 struct Opt8(Option&amp;lt;u8&amp;gt;); // size= 2, align=1 struct Vec8(Vec&amp;lt;u8&amp;gt;); // size=24; align=8 struct Alone64(u64); // size= 8, align=8 struct Opt64(Option&amp;lt;u64&amp;gt;); // size=16, align=8 struct Vec64(Vec&amp;lt;u64&amp;gt;); // size=24; align=8 That Firefox bundles process and task managers for performance monitoring, available at about:processes and about:tasks, respectively https://support.</description></item><item><title/><link>https://skalt.github.io/til/2023/06/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/22/</guid><description>That you can send texts to email and recieve emails from texts. When recieving an email from a text client, the emaio sender will be an email address at the text-sender&amp;rsquo;s carrier domain (e.g. +1234567890@carrier.domain).</description></item><item><title/><link>https://skalt.github.io/til/2023/07/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/07/09/</guid><description>I guessed that not all data centers were created equal, but I hadn&amp;rsquo;t heard of an official ranking system before now.
Apparently the Uptime Institute provides international rankings of trustworthiness based on uptime guarantees, redundancy, security measures, etc.
The tiers of data centers:
Tier 1: A data center with a single path for power and cooling, and no backup components. This tier has an expected uptime of 99.671% per year.</description></item><item><title/><link>https://skalt.github.io/til/2023/07/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/07/10/</guid><description>That in vscode, you can make your keypresses display on-screen using the &amp;ldquo;Developer: Toggle screencast mode&amp;rdquo; command.</description></item><item><title/><link>https://skalt.github.io/til/2023/07/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/07/12/</guid><description>How to create subtables in a table in an array in TOML: [table_name.subtable_name].
Any reference to an array of tables points to the most recently defined table element of the array. This allows you to define sub-tables, and even sub-arrays of tables, inside the most recent table.
&amp;ndash; https://toml.io/en/v1.0.0#array-of-tables</description></item><item><title/><link>https://skalt.github.io/til/2023/07/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/07/30/</guid><description>Getting the top-level directory of the relevant git worktree #!/usr/bin/env bash # set up a dummy repo set -euo pipefail experiment_dir=&amp;#34;$(mktemp -d --tmpdir test_repo.XXX)&amp;#34; git clone --recurse-submodules git@github.com:SKalt/dummy_repo.git &amp;#34;$experiment_dir&amp;#34; cd &amp;#34;$experiment_dir&amp;#34; git pull --recurse-submodules=yes git checkout -b brnch &amp;amp;&amp;amp; git checkout - # set up a dummy branch git worktree add wrktr brnch # add a wortree cd wrktr &amp;amp;&amp;amp; git submodule update --init --recursive # init the recursive submodules in the worktree tree .</description></item><item><title/><link>https://skalt.github.io/til/2023/08/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/02/</guid><description>On ubuntu:
# X11 keyboard options contain the codes that can be passed as options man xkeyboard-config # dconf controls how your keyboard(s) behave -- including lighting the caps-lock # indicator dconf_opts=&amp;#34;/org/gnome/desktop/input-sources/xkb-options&amp;#34; dconf read $dconf_opts dconf write $dconf_opts &amp;#34;[$values]&amp;#34; # where values are taken from `man xkeyboard-config` # notably, dconf&amp;#39;s settings clobber those set by `setxkbmap` and # `/etc/default/keyboard`&amp;#39;s XKBOPTIONS variable setxkbmap -query # prints the current key-map settings setxkbmap -option $values # &amp;lt;- these changes show up in Settings&amp;gt;Keyboard&amp;gt;${CurrentLayout} cat /etc/default/keyboard | grep XKBOPTIONS xev # opens a window and prints the events it sees -- including keypress events # with key codes https://unix.</description></item><item><title/><link>https://skalt.github.io/til/2023/08/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/08/</guid><description>sqlite3 has a .import [--csv] [--skip 1] FILE [TABLE] meta-command (docs). Also, for some reason my version of sqlite3 doesn&amp;rsquo;t respect any flags.
Also, sqlite3 has a .dump meta-command that out puts pure SQL (plus a few sqlite PRAGMAs): docs</description></item><item><title/><link>https://skalt.github.io/til/2023/08/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/09/</guid><description>That you can cancel/reset timeouts in JS using clearTimeout</description></item><item><title/><link>https://skalt.github.io/til/2023/08/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/18/</guid><description>That the authorative database of top-level domains is published by the IANA at https://www.iana.org/domains/root/db</description></item><item><title/><link>https://skalt.github.io/til/2023/08/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/20/</guid><description>That there&amp;rsquo;s a JSON schema for job postings that usually gets included in job-posting pages as a &amp;lt;script type=&amp;quot;application/ld+json&amp;quot;&amp;gt;.</description></item><item><title/><link>https://skalt.github.io/til/2023/08/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/26/</guid><description>That sometimes ssh sessions with x-forwarding don&amp;rsquo;t unlock the GNOME &amp;ldquo;login&amp;rdquo; keyring. This can lead to &amp;ldquo;Cannot create an item in a locked collection&amp;rdquo; errors. The way to fix the problem is to:
printf &amp;#34;password: &amp;#34; read -s password printf &amp;#34;%s&amp;#34; &amp;#34;$password&amp;#34; | gnome-keyring-daemon --replace --unlock</description></item><item><title/><link>https://skalt.github.io/til/2023/09/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/08/</guid><description>(1) that gnu ld, part of gnu&amp;rsquo;s binutils suite, is the de-facto standard interface for linker CLIs. Thus, all of gold (elf-only ld), mold/sold, and lld also try to expose ld-compatible CLIs.
(2) that ld has several modes of adding a build id to an executable:
--build-id[=style]
[Create a ] .note.gnu.build-id ELF note section or a .buildid COFF section. The contents of the note are unique bits identifying this linked file.</description></item><item><title/><link>https://skalt.github.io/til/2023/09/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/09/</guid><description>To add JSON schema validation to e.g. Cargo.toml files in VSCode using tamasfe.even-better-toml, you can add a special comment:
#:schema https://json.schemastore.org/cargo.json # see https://taplo.tamasfe.dev/configuration/directives.html#the-schema-directive That there&amp;rsquo;s such a thing as &amp;ldquo;canadian compilation&amp;rdquo;:
If build, host, and target are all the same, this is called a native. If build and host are the same but target is different, this is called a cross. If build, host, and target are all different this is called a canadian (for obscure reasons dealing with Canada’s political party and the background of the person working on the build at that time).</description></item><item><title/><link>https://skalt.github.io/til/2023/09/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/12/</guid><description>Start typing your search with&amp;hellip;
^ to show only matches in your browsing history.
* to show only matches in your bookmarks.
+ to show only matches in bookmarks you’ve tagged.
% to show only matches in your currently open tabs.
# to show only matches where every search term is part of the title or part of a tag.
$ to show only matches where every search term is part of the web address (URL).</description></item><item><title/><link>https://skalt.github.io/til/2023/09/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/20/</guid><description>The meaning of the tags
#LI-Remote: Remote #LI-Hybrid: Hybrid #LI-Onsite: Onsite #LI-DNI: To prevent jobs from displaying on LinkedIn completely. (DNI = Do Not Ingest) #LI-DNP: To prevent jobs from filling a job slot, use this tag or use the ‘block job’ functionality. &amp;ndash; https://www.reddit.com/r/AskHR/comments/ifrayb/what_does_liremote_in_a_job_description_mean/</description></item><item><title/><link>https://skalt.github.io/til/2023/09/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/22/</guid><description>How to position an element relative to its parent without affecting the flow of other sibling elements:
you&amp;rsquo;re most likely interested in position: absolute which will position an element relative to a container. By default, the container is the browser window, but if a parent element either has position: relative or position: absolute set on it, then it will act as the parent for positioning coordinates for its children.
&amp;ndash; https://stackoverflow.</description></item><item><title/><link>https://skalt.github.io/til/2023/09/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/25/</guid><description>Acronym Meaning DSO distribution system operators AGR aggregator TSO transmission system operator MCM market-based coordination mechanism &amp;ndash; https://lfenergy.org/projects/shapeshifter/</description></item><item><title/><link>https://skalt.github.io/til/2023/09/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/28/</guid><description>Executables, dynamic libraries and debug companions on all Apple platforms use the Mach Object, or short Mach-O, container format. This applies to iOS, iPadOS, tvOS, watchOS, and macOS.
Executables do not carry a file extension. For desktop applications, they are often placed in app bundle structures with the .app suffix. Unless stripped manually, executables contain unwind information and a symbol table. Debug information is never stored in executables. Dynamic Libraries use the .</description></item><item><title/><link>https://skalt.github.io/til/2023/10/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/03/</guid><description>That out of ~51672 extensions on the VSCode marketplace, there are only 31 that are marked as commercial software: &amp;ldquo;Trial&amp;rdquo; rather than &amp;ldquo;Free&amp;rdquo;.
# date extension publisher license kind 1 2020-04-18 Redis Weijan Chen MIT db 2 2020-04-21 SSH Client Weijan Chen MIT db 3 2020-05-05 MySQL Weijan Chen MIT db 4 2021-01-27 ElasticSearch Weijan Chen MIT db 5 2021-01-27 PostgreSQL Weijan Chen MIT db 6 2021-02-05 Database Client Weijan Chen MIT db 7 2021-06-20 JS Refactoring Assistant P42 MIT ai 8 2021-06-29 GitHub Copilot GitHub commercial ai 9 2021-11-22 Local CI Local CI GPL-2 tool 10 2021-12-01 SQl Server Client(mssql) Weijan Chen MIT db 11 2022-01-18 DVT IDE for Visual Studio Code AMIQ EDA s.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/09/</guid><description>About the hot-off-the-press OAuth2 DPoP specification: https://datatracker.ietf.org/doc/html/rfc9449. DPoP is a &amp;ldquo;sender constraint&amp;rdquo;: a way of checking that the sender of an access (JW) token is the same as the entity to whom the access token was issued.
My simplified understanding of DPoP is as follows:
the client generates a private/public key pair the client generates a request for an access token. The request includes: the client&amp;rsquo;s public key the the authorization endpoint&amp;rsquo;s URL the client signs the request with the client&amp;rsquo;s private key the authorization server validates the request (signature and all) and issues an access (JW) token including the thumbprint of the client&amp;rsquo;s public key.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/17/</guid><description>&amp;ldquo;relationship-based access control model (ReBAC).&amp;rdquo;</description></item><item><title/><link>https://skalt.github.io/til/2023/10/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/18/</guid><description>RFCs are labeled with different statuses:
Internet Standard (e.g. HTTP/1.1) Proposed Standard (e.g. HTTP/3, HTTP/2) Best Current Practice Experimental Informational Historic [&amp;hellip;]
RFCs usually begin as Internet-Drafts (I-Ds) written by an individual or a small group. In the IETF, these are then usually adopted by a working group, and improved and revised.
&amp;ndash; https://www.ietf.org/standards/rfcs/
Class fields are public by default, but private class members can be created by using a hash # prefix.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/20/</guid><description>First, that hugo supports goat ascii diagrams out-of-the box.
Second, about OAuth 2.0 authentication + authorization flows:
Authorization Code Flow From https://tools.ietf.org/html/rfc6749#section-4.1 and https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow
U U s s e c e r l r i c k l o g C i C l n l i i e P O e n O r T n t S e P t T d , A i c c r c c l e l e i c i s e t e s n L n t t o t t o g o I I k D I i O D e , d n T , n P t P , r o c e l I d I i D i d e A r P n t A u e t o u t c k t h t s e h o e n o r U c r i R r i z I e z a t a t t i i o o n I n D S S e t e r o r v k v e e e r n r I I d d P P Note: IdP = &amp;ldquo;Identity Provider&amp;rdquo;.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/23/</guid><description>About the three VCard specifications:
2.1 3.0 4.0 (2011) I also learned that iPhones can import contacts from a v4.0-formatted vcf file, but a (Samsung) android phne will only import portions of the same file. Exporting contacts from my android phone seems to use v2.1.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/31/</guid><description>That POSIX shell has configuration option, set -a or set -o allexport that exports all assigned variables. This simplifies using .env files in .envrc files:
# evaluate a .env file, if it exists if [ -f .env ]; then set -a # assigning a variable exports the variable # shellcheck disable=SC1091 source .env set +a fi That JS has a String.raw template literal tag function that unescapes escape sequences in a backtick-string:</description></item><item><title/><link>https://skalt.github.io/til/2023/11/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/11/02/</guid><description>How to type a decorator function or decorator factory in Python: see https://mypy.readthedocs.io/en/stable/generics.html##declaring-decorators</description></item><item><title/><link>https://skalt.github.io/til/2023/12/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/12/12/</guid><description>TL;DR: slap copyright comments on files and vendor licenses into a top-level LICENSES/${spdx_id}.${ext} directory.
The SPDX spec v2.3 references the REUSE spec v3.
Alternatively, you can use aLicenseRef-custom license identifier to refer to a license that is not on the SPDX License List, such as the following:
SPDX-License-Identifier: LicenseRef-my-special-license TheLicenseRef-format is defined in AnnexD. When using a customLicenseRef-identifier, you will also need to provide a way for others to determine what license text corresponds to it.</description></item><item><title/><link>https://skalt.github.io/til/2023/12/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/12/15/</guid><description>That
Any value in an array may be semantically null, whether primitive or nested type.
[&amp;hellip;]
Arrays having a 0 null count may choose to not allocate the validity bitmap; how this is represented depends on the implementation
&amp;ndash; https://arrow.apache.org/docs/format/Columnar.html#null-count
Which is frustrating. I usually think of arrays or database columns as NOT NULL by default, so I&amp;rsquo;m disappointed that I need to watch out for that footgun again when writing in-memory DBs.</description></item><item><title/><link>https://skalt.github.io/til/2023/12/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/12/23/</guid><description>Turns out Rust does support Any-types and downcasting: see https://doc.rust-lang.org/std/any/index.html and https://doc.rust-lang.org/std/any/struct.TypeId.html .</description></item><item><title/><link>https://skalt.github.io/til/2023/12/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/12/24/</guid><description>Bayer and McCreight never explained what, if anything, the B stands for: Boeing, balanced, between, broad, bushy, and Bayer have been suggested. McCreight has said that &amp;ldquo;the more you think about what the B in B-trees means, the better you understand B-trees.&amp;rdquo;
&amp;ndash; https://en.wikipedia.org/wiki/B-tree#History</description></item></channel></rss>