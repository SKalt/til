<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Postgres on Today I Learned</title><link>https://skalt.github.io/til/tags/postgres/</link><description>Recent content in Postgres on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/postgres/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/10/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/01/</guid><description>That there&amp;rsquo;s a postgres keyword DEALLOCATE to remove prepared statements from memory: https://www.postgresql.org/docs/current/sql-deallocate.html</description></item><item><title/><link>https://skalt.github.io/til/2021/11/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/03/</guid><description>That
There are two accepted formats for these strings: plain keyword/value strings and URIs. URIs generally follow RFC 3986, except that multi-host connection strings are allowed.
&amp;ndash; https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING
you can pass a application_name parameter to a connection string &amp;ndash; https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-APPLICATION-NAME</description></item><item><title/><link>https://skalt.github.io/til/2021/11/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/29/</guid><description>that there&amp;rsquo;s a pg_sleep(seconds) function: see https://til.hashrocket.com/posts/8a6f68519d-sleeping-in-postgresql</description></item><item><title/><link>https://skalt.github.io/til/2022/01/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/09/</guid><description>1: That you can set statement timeouts:
ALTER DATABASE mydatabase SET statement_timeout = &amp;#39;60s&amp;#39;; Source: https://blog.crunchydata.com/blog/five-tips-for-a-healthier-postgres-database-in-the-new-year
2: that you can query your cache and index hit metrics (src)
3: writes to indexed columns don&amp;rsquo;t necessarily update indices:
If an indexed column has to have new values inserted, or existing values updated or deleted, the corresponding index does get updated as well. Ironically, that might make queries take more time to evaluate.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/04/</guid><description>Not to use BETWEEN for timestamps Not to use char(n), or varchar(n), since they&amp;rsquo;re not natively fixed-width and will defy expectations. See https://wiki.postgresql.org/wiki/Don't_Do_This
Also, I learned that you can&amp;rsquo;t run chsh(1) with sudo; chsh needs to run as the user who&amp;rsquo;s changing their shell.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/09/</guid><description>that sudo can be configured with the visudo command and that sudo can produce audit logs. See https://www.sudo.ws/posts/2022/05/sudo-for-blue-teams-how-to-control-and-log-better/
that there&amp;rsquo;s an Element.closest(selector) method, which means you can run this function to set the url to the closest link to an element:
((el) =&amp;gt; { let id = el.closest(&amp;#34;[id]&amp;#34;)?.id; if (!id) return; else location.hash = id; })($0); that you can use
SELECT /*...*/ FROM one_table JOIN other_table USING (common_column) as shorthand for one_table.</description></item><item><title/><link>https://skalt.github.io/til/2022/06/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/01/</guid><description>That pg_dumpall exists. That you need to use pg_dumpall to dump tablespaces, roles, and subscriptions. That pg_dumpall will dump the postgres role by default, causing resultant dump to fail to restore. Fortunately, I&amp;rsquo;m able to grep -ve '^CREATE ROLE postgres</description></item><item><title/><link>https://skalt.github.io/til/2022/11/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/14/</guid><description>That pg_catalog.pg_shdepend exists, and &amp;ldquo;records the dependency relationships between database objects and shared objects, such as roles.&amp;rdquo; See https://www.postgresql.org/docs/current/catalog-pg-shdepend.html</description></item><item><title/><link>https://skalt.github.io/til/2022/12/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/12/14/</guid><description>that it&amp;rsquo;s possible to create indices on materialized views in postgres: https://www.postgresql.org/docs/current/rules-materializedviews.html#RULES-MATERIALIZEDVIEWS</description></item><item><title/><link>https://skalt.github.io/til/2023/01/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/01/</guid><description>The difference between triggers and event triggers in postgres:
Unlike regular triggers, which are attached to a single table and capture only DML events, event triggers are global to a particular database and are capable of capturing DDL events. Like regular triggers, event triggers can be written in any procedural language that includes event trigger support, or in C, but not in plain SQL.
&amp;ndash; https://www.postgresql.org/docs/current/event-triggers.html</description></item><item><title/><link>https://skalt.github.io/til/2023/01/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/30/</guid><description>That psql et al. support colors:
export PG_COLOR=auto # only colorize output to ttys learned from https://fluca1978.github.io/2023/01/23/PostgreSQLColors.html See also:
https://www.postgresql.org/docs/current/color-when.html https://www.postgresql.org/docs/current/color-which.html</description></item></channel></rss>