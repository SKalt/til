<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>bash on Today I Learned</title><link>https://skalt.github.io/til/tags/bash/</link><description>Recent content in bash on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/bash/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/09/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/15/</guid><description>That you can, technically, write inline comments in bash. Specifically, you have to put the comments in a subshell:
echo abc `#put your comment here` \ def `#another chance for a comment` \ xyz etc ^ from https://stackoverflow.com/a/23872003/6571327</description></item><item><title/><link>https://skalt.github.io/til/2021/10/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/04/</guid><description>that different versions of sort(1) have different sorting presets. For example, on ubuntu 20.04 vs debian buster, sort will swap the order of how it sorts _s. These differences can be resolved by passing --unique --dictionary-order --stable.
Bonus: -h/--human-numeric-sort can sort SI suffixes.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/12/</guid><description>about the shell until keyword, which is equivalent to while !.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/28/</guid><description>That you can detect the terminal you&amp;rsquo;re running in (including vscode) by checking the value of &amp;quot;${TERM_PROGRAM:-}&amp;quot;. The VS Code integrated termial always has a $TERM_PROGRAM of vscode.
Source: https://stackoverflow.com/a/59231654/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/04/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/11/</guid><description>You can use journalctl -u ${service_name}.service --since ${time:-today} to view the logs of a systemd service: https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</description></item><item><title/><link>https://skalt.github.io/til/2022/05/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/10/</guid><description>That you can call time(1) to time how long a shell command takes, like so:
; time terraform fmt -write=true -recursive . # terraform fmt -write=true -recursive . 0.10s user 0.23s system 24% cpu 1.377 total</description></item><item><title/><link>https://skalt.github.io/til/2022/07/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/02/</guid><description>That you can unescape newlines with printf &amp;quot;%b&amp;quot; 'escaped\nstring':
escaped=&amp;#39;a\nb&amp;#39; printf &amp;#34;%b&amp;#34; &amp;#34;$escaped&amp;#34; # a # b</description></item><item><title/><link>https://skalt.github.io/til/2022/07/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/29/</guid><description>that in bash and zsh, you can put a newline in a variable like so:
newline=$&amp;#39;\n&amp;#39; echo &amp;#34;&amp;gt;&amp;gt;&amp;gt;${newline}&amp;lt;&amp;lt;&amp;lt;&amp;#34; learned from: https://stackoverflow.com/a/4456399/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/08/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/24/</guid><description>that you can lsblk to list the block devices that the OS knows about without sudo.
that you can sudo growpart to increase a partition size without restarting the machine.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/29/</guid><description>That you can list the listening ports on a UNIX machine using sudo lsof -i -P -n | grep LISTEN</description></item><item><title/><link>https://skalt.github.io/til/2022/10/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/03/</guid><description>That you can write &amp;gt;&amp;amp; 1 and it still redirects to stdout! example:
f() { echo &amp;#34;ok&amp;#34; &amp;gt;&amp;amp;2; } f 2&amp;gt;&amp;amp; 1 | grep ok</description></item><item><title/><link>https://skalt.github.io/til/2022/10/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/11/</guid><description>That terraform plan -detailed-exitcode exists: 0 means no diff, 1 means error, 2 means a diff exists.
Also, that you can print the source code of a bash function like so:
print_fn_src() { declare -f &amp;#34;$1&amp;#34;; }</description></item><item><title/><link>https://skalt.github.io/til/2022/10/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/18/</guid><description>That BSD arch command found on Macs also supports a -${arch} flag for running universal binaries.</description></item><item><title/><link>https://skalt.github.io/til/2022/10/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/23/</guid><description>That ARIA stands for Accessible Rich Internet Applications! See https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA
That in linux ls(1) uses the environment variable LS_COLORS to determine the colors in which the filenames are to be displayed. Also, that linux specifies a dir_colors(5) configuration file format for dircolors(1), which exports LS_COLORS
See https://man7.org/linux/man-pages/man5/dir_colors.5.html
That nix is complicated, which is exactly what my prior research told me.
On one hand, it is AWESOME to cd into a project and watch direnv automatically spawn a development shell with all the fixings.</description></item><item><title/><link>https://skalt.github.io/til/2022/10/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/24/</guid><description>That you can list all addresses in terraform state by running
terraform state list Docs at https://developer.hashicorp.com/terraform/cli/commands/state/list
Also, that compgen -v is a function, at least on Mac zsh. Apparently in zsh compgen -v calls something like
for var_name in &amp;#34;${(k)parameters[@]}&amp;#34;; do printf &amp;#39;%s\n&amp;#39; &amp;#34;$var_name&amp;#34; done which is the first time I&amp;rsquo;ve seen that kind of shell syntax. It generates a bad substitution message in bash 3.2, so I can only assume it&amp;rsquo;s zsh-specific.</description></item><item><title/><link>https://skalt.github.io/til/2023/05/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/30/</guid><description>That there&amp;rsquo;s a Linux command to do sql-like JOINs of lines in files, possibly based on a field in each line: join(1)</description></item></channel></rss>