<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>css on Today I Learned</title><link>https://skalt.github.io/til/tags/css/</link><description>Recent content in css on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/css/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2022/01/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/04/</guid><description>about the css :target selector (matches the element with the id specified by the url document-fragment) and the svg &amp;lt;view&amp;gt; element, which specifies a viewBox and can have an id.
see https://css-tricks.com/svg-fragment-identifiers-work/</description></item><item><title/><link>https://skalt.github.io/til/2022/01/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/11/</guid><description>that you can pass default values to css variable references, e.g. var(--button-color, pink)
Also,
If the SVG fragment identifier addresses a time segment (e.g., MyDrawing.svg#t=10),then the initial view into the SVG document is established as if no fragment identifier was provided. The rendering of the SVG Document shall be as if the setCurrentTime method on the SVG Document element had been called with the begin time value from the fragment identifier.</description></item><item><title/><link>https://skalt.github.io/til/2022/07/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/01/</guid><description>That in Chrome/chromium you can view the actually-rendered font by
inspecting an element view computed properties source: https://stackoverflow.com/a/31254584/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/07/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/04/</guid><description>How to subset fonts:
# in a virtualenv pip install fonttools brotli zopfli pyftsubset --help see:
https://fonttools.readthedocs.io/en/latest/subset/index.html#initial-glyph-set-specification https://markoskon.com/creating-font-subsets/#available-tools https://clagnut.com/blog/2418/ https://wakamaifondue.com/beta/ Also, optical-sized variable fonts look great.</description></item><item><title/><link>https://skalt.github.io/til/2023/09/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/22/</guid><description>How to position an element relative to its parent without affecting the flow of other sibling elements:
you&amp;rsquo;re most likely interested in position: absolute which will position an element relative to a container. By default, the container is the browser window, but if a parent element either has position: relative or position: absolute set on it, then it will act as the parent for positioning coordinates for its children.
&amp;ndash; https://stackoverflow.</description></item><item><title/><link>https://skalt.github.io/til/2024/01/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/01/29/</guid><description>Typographic Units Absolute distance Name CSS Unit length Picas pc 1/6 inch Points pt 1/72 inches &amp;ndash; https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#absolute_length_units
Font-relative units em:
In metal type, the point size (and hence the em, from em quadrat) was equal to the line height of the metal body from which the letter rises. [&amp;hellip;] In some older texts, but not all, the em is defined, or said to have been defined, as the width of the capital &amp;lsquo;M&amp;rsquo; in the current typeface and point size.</description></item><item><title/><link>https://skalt.github.io/til/2024/02/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/14/</guid><description>A more concise way to implement light/dark modes:
:root { color-scheme: light dark; } which saves a few more bytes than my usual
:root { --fg: #000; --bg: #fff; } @media (prefers-color-scheme: dark) { :root { --fg: #fff; --bg: #000; } } &amp;ndash; https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme#declaring_color_scheme_preferences
I also learned that CSS has special syntax for systmem-provided colors, notably:
Canvas: the default background color CanvasText: the default text color &amp;ndash; https://developer.mozilla.org/en-US/docs/Web/CSS/system-color#syntax</description></item><item><title/><link>https://skalt.github.io/til/2024/02/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/19/</guid><description>That CSS can adjust any font&amp;rsquo;s aspect value using font-size-adjust &amp;ndash; the ratio between the cap height and the x-height, NOT the aspect ratio.</description></item></channel></rss>