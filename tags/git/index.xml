<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>git on Today I Learned</title><link>https://skalt.github.io/til/tags/git/</link><description>Recent content in git on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/31/</guid><description>That you can use git grep to search for a string in a git repo.</description></item><item><title/><link>https://skalt.github.io/til/2021/12/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/12/01/</guid><description>that you can write any file in your git history using git show &amp;lt;ref&amp;gt;:&amp;lt;path&amp;gt;.
See https://juplo.de/cat-any-file-in-any-commit-with-git/</description></item><item><title/><link>https://skalt.github.io/til/2022/03/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/06/</guid><description>About git-sparse-checkout:
https://linuxhint.com/what-is-git-sparse-checkout/ https://git-scm.com/docs/git-sparse-checkout The general script for doing a sparse checkout is:
#!/usr/bin/env bash git_url=&amp;#34;${git_url:?required}&amp;#34; target_dir=&amp;#34;${target_dir:?required}&amp;#34; is_git_dir() { git rev-parse; } init() { mkdir -p &amp;#34;$target_dir&amp;#34; &amp;amp;&amp;amp; cd &amp;#34;$target_dir&amp;#34; if ! is_git_dir; then git init &amp;amp;&amp;amp; git remote add -f origin &amp;#34;$git_url&amp;#34; fi git config core.sparseCheckout true &amp;amp;&amp;amp; git sparse-checkout init &amp;amp;&amp;amp; git sparse-checkout set test &amp;amp;&amp;amp; git pull origin master } see also: https://about.gitlab.com/blog/2020/03/13/partial-clone-for-massive-repositories/</description></item><item><title/><link>https://skalt.github.io/til/2022/08/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/06/</guid><description>How to consistently establish relative symlinks within a git repo:
cd &amp;#34;$target_dir&amp;#34; # the directory in which you want to create the symlink ln -s ../relative/path/to/source.file ./symlink.name https://stackoverflow.com/a/15465514/6571327</description></item><item><title/><link>https://skalt.github.io/til/2023/02/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/01/</guid><description>git restore exists, and works like a more destructive git stash
See https://git-scm.com/docs/git-restore</description></item><item><title/><link>https://skalt.github.io/til/2023/03/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/02/</guid><description>that there&amp;rsquo;s a git commit --trailer &amp;lt;token&amp;gt;:&amp;lt;value&amp;gt; flag.
https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---trailerlttokengtltvaluegt</description></item><item><title/><link>https://skalt.github.io/til/2023/03/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/09/</guid><description>This was a bit of a rollercoaster morning: (1) I tried git worktree add $branch, and it was pretty convenient! (2) until I got a pre-commit error, then I got error: unable to read $HASH on git status (3) which led me to discover git fsck --full --name-objects, which is currently yelling about error: $HASH: invalid sha1 pointer in cache-tree</description></item><item><title/><link>https://skalt.github.io/til/2023/05/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/16/</guid><description>That there are instances where a git commit-message can start with a #:
set -eu experiment=&amp;#34;$(mkdtemp -d)&amp;#34; cd &amp;#34;$experiment&amp;#34; git init# touch readme &amp;amp;&amp;amp; git add readme git commit -m &amp;#34;# not a comment, apparently&amp;#34; actual=&amp;#34;$(cat ./.git/COMMIT_EDITMSG)&amp;#34; expected=&amp;#34;# not a comment, apparently&amp;#34; test &amp;#34;$actual&amp;#34; = &amp;#34;$expected&amp;#34; git log # &amp;lt;hash&amp;gt; # # not a comment, apparently</description></item></channel></rss>