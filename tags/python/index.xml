<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python on Today I Learned</title><link>https://skalt.github.io/til/tags/python/</link><description>Recent content in Python on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/13/</guid><description>&lt;p&gt;That &lt;code&gt;pickle.loads(pickle.dumps(obj))&lt;/code&gt; is faster than &lt;code&gt;copy.deepcopy(obj)&lt;/code&gt;
Learned from &lt;a href="https://twitter.com/simonw/status/1413635105755570177"&gt;Simon Willison&amp;rsquo;s twitter&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/08/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/05/</guid><description>&lt;p&gt;that running python with the &lt;a href="https://docs.python.org/3/using/cmdline.html#cmdoption-o"&gt;&lt;code&gt;-O&lt;/code&gt; flag disables &lt;code&gt;assert&lt;/code&gt; statements&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/08/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/12/</guid><description>&lt;p&gt;about a new source of standard-ish python functionality: &lt;a href="https://github.com/mahmoud/boltons"&gt;https://github.com/mahmoud/boltons&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/02/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/18/</guid><description>&lt;p&gt;you can import from a parent-module using &lt;code&gt;from ... import &lt;/code&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/04/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/06/</guid><description>&lt;p&gt;That python f-strings can do&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;date and time formatting: &lt;code&gt;f&amp;quot;{today:%Y-%m-%d}&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;have a variable-debugging format: &lt;code&gt;f&amp;quot;{x = }, {y = }&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;can use &lt;code&gt;__repr__&lt;/code&gt; rather than &lt;code&gt;__str__&lt;/code&gt;: &lt;code&gt;f&amp;quot;{user!r}&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;can be nested: &lt;code&gt;f&amp;quot;output: {value:{width}.{precision}}&amp;quot;&lt;/code&gt;
&lt;a href="https://martinheinz.dev/blog/70"&gt;https://martinheinz.dev/blog/70&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of the &lt;code&gt;window.prompt()&lt;/code&gt; method:
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/05/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/05/</guid><description>&lt;p&gt;To prefer async context managers or &lt;code&gt;asyncio.run()&lt;/code&gt; instead of creating+managing event loops natively.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/05/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/31/</guid><description>&lt;p&gt;That &lt;code&gt;sql&lt;/code&gt; has assertions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ASSERTION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;Constraint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;CHECK&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;constraint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;see &lt;a href="https://crate.io/docs/sql-99/en/latest/chapters/20.html#create-assertion-statement"&gt;https://crate.io/docs/sql-99/en/latest/chapters/20.html#create-assertion-statement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;h/t &lt;a href="https://www.scattered-thoughts.net/log/0024/"&gt;https://www.scattered-thoughts.net/log/0024/&lt;/a&gt; for bringing that to my attention.&lt;/p&gt;
&lt;p&gt;Also, from the weekend: in postgres, at least, you can call &lt;code&gt;TABLE :table_name;&lt;/code&gt; directly to &lt;code&gt;SELECT * FROM :table_name;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Also: how to look up a domain name from an ip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;reverse_ip_lookup&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nv"&gt;ip_address&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; dig -x &lt;span class="nv"&gt;$ip_address&lt;/span&gt; +noall +answer
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also: how to audit AWS VPC flow logs from CloudWatch Log Insights: use the example queries in the right sidebar.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/06/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/08/</guid><description>&lt;p&gt;that you can write &lt;code&gt;raise SomeException() from prev_exception&lt;/code&gt;: see
&lt;a href="https://docs.python.org/3/reference/simple_stmts.html#raise"&gt;https://docs.python.org/3/reference/simple_stmts.html#raise&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/19/</guid><description>&lt;p&gt;that you can easily send asyncio tasks to threads:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;asyncio.threads&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;to_thread&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2023/01/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/17/</guid><description>&lt;p&gt;that you can set &lt;code&gt;PYTHONDONTWRITEBYTECODE=1&lt;/code&gt; to prevent python from writing pycs (see &lt;a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE"&gt;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Also: that AWS SSO does SCIM actions using the &lt;code&gt;sso-directory:*&lt;/code&gt; IAM prefix rather than the &lt;code&gt;sso:*&lt;/code&gt; prefix.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2023/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/08/</guid><description>&lt;p&gt;That in Rust, &lt;code&gt;assert!&lt;/code&gt; runs in both debug and release builds. For debug-only assertions, use &lt;code&gt;debug_assert!&lt;/code&gt;. See &lt;a href="https://doc.rust-lang.org/stable/std/macro.debug_assert.html"&gt;https://doc.rust-lang.org/stable/std/macro.debug_assert.html&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That in Python, you can call &lt;code&gt;isinstance(thing, (tuple, OfMany, DifferentClasses))&lt;/code&gt; to check if a variable is an instance of many possible classes.
See &lt;a href="https://docs.python.org/3/library/functions.html?highlight=isinstance#isinstance"&gt;https://docs.python.org/3/library/functions.html?highlight=isinstance#isinstance&lt;/a&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2023/02/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/21/</guid><description>&lt;p&gt;That properties of a &lt;code&gt;NamedTuple&lt;/code&gt; can have docstrings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-py" data-lang="py"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooBar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamedTuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s2"&gt;&amp;#34;&amp;#34;&amp;#34;Foo&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="s2"&gt;&amp;#34;&amp;#34;&amp;#34;Bar&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As seen in &lt;a href="https://github.com/sqlalchemy/sqlalchemy/blob/main/lib/sqlalchemy/sql/compiler.py#L348"&gt;https://github.com/sqlalchemy/sqlalchemy/blob/main/lib/sqlalchemy/sql/compiler.py#L348&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2023/11/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/11/02/</guid><description>&lt;p&gt;How to type a decorator function or decorator factory in Python: see &lt;a href="https://mypy.readthedocs.io/en/stable/generics.html##declaring-decorators"&gt;https://mypy.readthedocs.io/en/stable/generics.html##declaring-decorators&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2024/07/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/07/05/</guid><description>&lt;p&gt;That Python mangles class attributes named like &lt;code&gt;__name&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python mangles these names with the class name: if class &lt;code&gt;Foo&lt;/code&gt; has an attribute named &lt;code&gt;__a&lt;/code&gt;, it cannot be accessed by &lt;code&gt;Foo.__a&lt;/code&gt;.
(An insistent user could still gain access by calling &lt;code&gt;Foo._Foo__a&lt;/code&gt;.)
Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed.&lt;/p&gt;
&lt;p&gt;Note: there is some controversy about the use of &lt;code&gt;__names&lt;/code&gt; (see below).&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2024/08/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/08/04/</guid><description>&lt;p&gt;That if you specify an &lt;code&gt;Entry-points&lt;/code&gt; key in python &lt;code&gt;.dist-info/METADATA&lt;/code&gt;, python will create command-line wrappers for your scripts.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://packaging.python.org/en/latest/specifications/entry-points/"&gt;https://packaging.python.org/en/latest/specifications/entry-points/&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2024/08/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/08/11/</guid><description>&lt;p&gt;That virtualenvs may contain two files that alter the &lt;code&gt;sys.path&lt;/code&gt; outside of the &lt;code&gt;$PYTHONPATH&lt;/code&gt; variable:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.venv/pyvenv.cfg&lt;/code&gt; (see &lt;a href="https://docs.python.org/3/library/sys_path_init.html#virtual-environments"&gt;https://docs.python.org/3/library/sys_path_init.html#virtual-environments&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.venv/python3.*/site-packages/*.pth&lt;/code&gt; (see &lt;a href="https://docs.python.org/3/library/sys_path_init.html#pth-files"&gt;https://docs.python.org/3/library/sys_path_init.html#pth-files&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title/><link>https://skalt.github.io/til/2024/08/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/08/12/</guid><description>&lt;p&gt;That python dicts have an upsert method: &lt;a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault"&gt;https://docs.python.org/3/library/stdtypes.html#dict.setdefault&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2024/09/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/09/28/</guid><description>&lt;p&gt;That on windows, creating a virtualenv:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;symlinks executables into &lt;code&gt;$VIRTUAL_ENV/Scripts&lt;/code&gt; rather than &lt;code&gt;$VIRTUAL_ENV/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;only creates a &lt;code&gt;python.exe&lt;/code&gt; symlink, not a &lt;code&gt;python3.exe&lt;/code&gt; symlink.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See &lt;a href="https://docs.python.org/3/library/venv.html#creating-virtual-environments"&gt;https://docs.python.org/3/library/venv.html#creating-virtual-environments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Less exciting, but I also (re-)learned that setting a &lt;code&gt;PYTHONPATH&lt;/code&gt; on windows requires using &lt;code&gt;;&lt;/code&gt; rather than &lt;code&gt;:&lt;/code&gt; as the path-separator.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2025/07/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/07/07/</guid><description>&lt;p&gt;About python&amp;rsquo;s &lt;code&gt;__debug__&lt;/code&gt; constant: &lt;a href="https://docs.python.org/3/library/constants.html#debug"&gt;https://docs.python.org/3/library/constants.html#debug&lt;/a&gt;__&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s true unless python is run in &lt;code&gt;-O&lt;/code&gt; mode, stripping out assertions and other unoptimized code.&lt;/p&gt;</description></item></channel></rss>