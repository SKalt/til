<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Python on Today I Learned</title><link>https://skalt.github.io/til/tags/python/</link><description>Recent content in Python on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/13/</guid><description>&lt;p>That &lt;code>pickle.loads(pickle.dumps(obj))&lt;/code> is faster than &lt;code>copy.deepcopy(obj)&lt;/code>
Learned from &lt;a href="https://twitter.com/simonw/status/1413635105755570177">Simon Willison&amp;rsquo;s twitter&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/08/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/05/</guid><description>&lt;p>that running python with the &lt;a href="https://docs.python.org/3/using/cmdline.html#cmdoption-o">&lt;code>-O&lt;/code> flag disables &lt;code>assert&lt;/code> statements&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/08/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/12/</guid><description>&lt;p>about a new source of standard-ish python functionality: &lt;a href="https://github.com/mahmoud/boltons">https://github.com/mahmoud/boltons&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/02/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/18/</guid><description>&lt;p>you can import from a parent-module using &lt;code>from ... import &lt;/code>.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/04/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/06/</guid><description>&lt;p>That python f-strings can do&lt;/p>
&lt;ul>
&lt;li>date and time formatting: &lt;code>f&amp;quot;{today:%Y-%m-%d}&amp;quot;&lt;/code>&lt;/li>
&lt;li>have a variable-debugging format: &lt;code>f&amp;quot;{x = }, {y = }&amp;quot;&lt;/code>&lt;/li>
&lt;li>can use &lt;code>__repr__&lt;/code> rather than &lt;code>__str__&lt;/code>: &lt;code>f&amp;quot;{user!r}&amp;quot;&lt;/code>&lt;/li>
&lt;li>can be nested: &lt;code>f&amp;quot;output: {value:{width}.{precision}}&amp;quot;&lt;/code>
&lt;a href="https://martinheinz.dev/blog/70">https://martinheinz.dev/blog/70&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Of the &lt;code>window.prompt()&lt;/code> method:
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt">https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/05/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/05/</guid><description>&lt;p>To prefer async context managers or &lt;code>asyncio.run()&lt;/code> instead of creating+managing event loops natively.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/05/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/31/</guid><description>&lt;p>That &lt;code>sql&lt;/code> has assertions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ASSERTION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">Constraint&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CHECK&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">search&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">constraint&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">attributes&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>see &lt;a href="https://crate.io/docs/sql-99/en/latest/chapters/20.html#create-assertion-statement">https://crate.io/docs/sql-99/en/latest/chapters/20.html#create-assertion-statement&lt;/a>.&lt;/p>
&lt;p>h/t &lt;a href="https://www.scattered-thoughts.net/log/0024/">https://www.scattered-thoughts.net/log/0024/&lt;/a> for bringing that to my attention.&lt;/p>
&lt;p>Also, from the weekend: in postgres, at least, you can call &lt;code>TABLE :table_name;&lt;/code> directly to &lt;code>SELECT * FROM :table_name;&lt;/code>&lt;/p>
&lt;p>Also: how to look up a domain name from an ip:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">reverse_ip_lookup&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">ip_address&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dig -x &lt;span class="nv">$ip_address&lt;/span> +noall +answer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also: how to audit AWS VPC flow logs from CloudWatch Log Insights: use the example queries in the right sidebar.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/06/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/08/</guid><description>&lt;p>that you can write &lt;code>raise SomeException() from prev_exception&lt;/code>: see
&lt;a href="https://docs.python.org/3/reference/simple_stmts.html#raise">https://docs.python.org/3/reference/simple_stmts.html#raise&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/19/</guid><description>&lt;p>that you can easily send asyncio tasks to threads:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="ch">#!/usr/bin/env python3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">asyncio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">asyncio.threads&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">to_thread&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">async&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">asyncio&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">to_thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;baz&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://skalt.github.io/til/2023/01/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/17/</guid><description>&lt;p>that you can set &lt;code>PYTHONDONTWRITEBYTECODE=1&lt;/code> to prevent python from writing pycs (see &lt;a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE">https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE&lt;/a>)&lt;/p>
&lt;p>Also: that AWS SSO does SCIM actions using the &lt;code>sso-directory:*&lt;/code> IAM prefix rather than the &lt;code>sso:*&lt;/code> prefix.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2023/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/08/</guid><description>&lt;p>That in Rust, &lt;code>assert!&lt;/code> runs in both debug and release builds. For debug-only assertions, use &lt;code>debug_assert!&lt;/code>. See &lt;a href="https://doc.rust-lang.org/stable/std/macro.debug_assert.html">https://doc.rust-lang.org/stable/std/macro.debug_assert.html&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>That in Python, you can call &lt;code>isinstance(thing, (tuple, OfMany, DifferentClasses))&lt;/code> to check if a variable is an instance of many possible classes.
See &lt;a href="https://docs.python.org/3/library/functions.html?highlight=isinstance#isinstance">https://docs.python.org/3/library/functions.html?highlight=isinstance#isinstance&lt;/a>.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2023/02/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/21/</guid><description>&lt;p>That properties of a &lt;code>NamedTuple&lt;/code> can have docstrings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">FooBar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NamedTuple&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">foo&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Foo&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bar&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Bar&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As seen in &lt;a href="https://github.com/sqlalchemy/sqlalchemy/blob/main/lib/sqlalchemy/sql/compiler.py#L348">https://github.com/sqlalchemy/sqlalchemy/blob/main/lib/sqlalchemy/sql/compiler.py#L348&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2023/11/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/11/02/</guid><description>&lt;p>How to type a decorator function or decorator factory in Python: see &lt;a href="https://mypy.readthedocs.io/en/stable/generics.html##declaring-decorators">https://mypy.readthedocs.io/en/stable/generics.html##declaring-decorators&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/07/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/07/05/</guid><description>&lt;p>That Python mangles class attributes named like &lt;code>__name&lt;/code>:&lt;/p>
&lt;blockquote>
&lt;p>Python mangles these names with the class name: if class &lt;code>Foo&lt;/code> has an attribute named &lt;code>__a&lt;/code>, it cannot be accessed by &lt;code>Foo.__a&lt;/code>.
(An insistent user could still gain access by calling &lt;code>Foo._Foo__a&lt;/code>.)
Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed.&lt;/p>
&lt;p>Note: there is some controversy about the use of &lt;code>__names&lt;/code> (see below).&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/08/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/08/04/</guid><description>&lt;p>That if you specify an &lt;code>Entry-points&lt;/code> key in python &lt;code>.dist-info/METADATA&lt;/code>, python will create command-line wrappers for your scripts.&lt;/p>
&lt;p>See &lt;a href="https://packaging.python.org/en/latest/specifications/entry-points/">https://packaging.python.org/en/latest/specifications/entry-points/&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/08/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/08/11/</guid><description>&lt;p>That virtualenvs may contain two files that alter the &lt;code>sys.path&lt;/code> outside of the &lt;code>$PYTHONPATH&lt;/code> variable:&lt;/p>
&lt;ol>
&lt;li>&lt;code>.venv/pyvenv.cfg&lt;/code> (see &lt;a href="https://docs.python.org/3/library/sys_path_init.html#virtual-environments">https://docs.python.org/3/library/sys_path_init.html#virtual-environments&lt;/a>)&lt;/li>
&lt;li>&lt;code>.venv/python3.*/site-packages/*.pth&lt;/code> (see &lt;a href="https://docs.python.org/3/library/sys_path_init.html#pth-files">https://docs.python.org/3/library/sys_path_init.html#pth-files&lt;/a>)&lt;/li>
&lt;/ol></description></item><item><title/><link>https://skalt.github.io/til/2024/08/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/08/12/</guid><description>&lt;p>That python dicts have an upsert method: &lt;a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault">https://docs.python.org/3/library/stdtypes.html#dict.setdefault&lt;/a>&lt;/p></description></item></channel></rss>