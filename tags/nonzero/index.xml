<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>NonZero on Today I Learned</title><link>https://skalt.github.io/til/tags/nonzero/</link><description>Recent content in NonZero on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/nonzero/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2024/02/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/12/</guid><description>That rust has built-in numeric types named like NonZero* that reserve the bit-pattern of 0 as a niche: see https://doc.rust-lang.org/core/num/index.html.
This is useful since that niche will absorb the cost of wrapping a NonZero int with Option:
use core::num::NonZeroU8; use std::mem::size_of; struct Struct&amp;lt;T&amp;gt;{ // has alignment 2, size 4 a: u16, b: T, } fn main() { println!(&amp;#34; NonZeroU8: {}&amp;#34;, size_of::&amp;lt;NonZeroU8&amp;gt;()); println!(&amp;#34; Option&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Option&amp;lt;NonZeroU8&amp;gt;&amp;gt;()); println!(&amp;#34; Struct&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;&amp;gt;()); println!(&amp;#34;Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;&amp;gt;&amp;gt;()); } # NonZeroU8: 1 # Option&amp;lt;NonZeroU8&amp;gt;: 1 # Struct&amp;lt;NonZeroU8&amp;gt;: 4 # Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;: 4</description></item></channel></rss>