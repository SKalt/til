<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>shell on Today I Learned</title><link>https://skalt.github.io/til/tags/shell/</link><description>Recent content in shell on Today I Learned</description><generator>Hugo -- gohugo.io</generator><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/24/</guid><description>How to stream large responses using the Javascript Fetch API:
const response = await fetch(url); const reader = response.body.getReader(); while (true) { const { value, done } = await reader.read(); if (done) break; console.log(&amp;#39;Received&amp;#39;, value); } console.log(&amp;#39;Response fully received&amp;#39;); Also: the circumstances under which ~/.*profile files are run: only if you log in.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/31/</guid><description>That you can use git grep to search for a string in a git repo.</description></item><item><title/><link>https://skalt.github.io/til/2021/09/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/15/</guid><description>That you can, technically, write inline comments in bash. Specifically, you have to put the comments in a subshell:
echo abc `#put your comment here` \ def `#another chance for a comment` \ xyz etc ^ from https://stackoverflow.com/a/23872003/6571327</description></item><item><title/><link>https://skalt.github.io/til/2021/10/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/04/</guid><description>that different versions of sort(1) have different sorting presets. For example, on ubuntu 20.04 vs debian buster, sort will swap the order of how it sorts _s. These differences can be resolved by passing --unique --dictionary-order --stable.
Bonus: -h/--human-numeric-sort can sort SI suffixes.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/13/</guid><description>about reset, which resets your terminal after a series of undesired ANSI escape codes. I also learned about echo -e &amp;quot;\e&amp;quot; meaning &amp;ldquo;interpret backslash escape codes&amp;rdquo; (-e) and &amp;quot;\e&amp;quot; == &amp;quot;\033&amp;quot;.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/19/</guid><description>that you can write multiple lines to a file using a cat &amp;gt; path/to/file with argument, like
cat &amp;gt; /tmp/file subsequent typed input is still stdin, which is being read by `cat` and so will be written to the file ^C # cancels `cat` writing to the file</description></item><item><title/><link>https://skalt.github.io/til/2021/10/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/30/</guid><description>about terminfo, the terminal information database: it can be queried to find all kinds of fun facts about your current terminal. For instance,
tput cols =&amp;gt; number of columns in the current terminal tput colors =&amp;gt; number of colors the terminal supports tput setaf =&amp;gt; generate ansi codes to set the foregrount color in the terminal Also, infocmp screen dumps a bunch of other related information drawn from terminfo.</description></item><item><title/><link>https://skalt.github.io/til/2021/11/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/23/</guid><description>locate searches all filenames for a keyword using a database which you can update updatedb. whereis searches for binaries using the same mechanism.
https://www.madebygps.com/an-intro-to-finding-things-in-linux/</description></item><item><title/><link>https://skalt.github.io/til/2021/12/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/12/01/</guid><description>that you can write any file in your git history using git show &amp;lt;ref&amp;gt;:&amp;lt;path&amp;gt;.
See https://juplo.de/cat-any-file-in-any-commit-with-git/</description></item><item><title/><link>https://skalt.github.io/til/2022/01/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/31/</guid><description>that the fmt utility exists. It seems to fold or center text according to a target width.</description></item><item><title/><link>https://skalt.github.io/til/2022/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/08/</guid><description>In zsh, ls *(n) will &amp;ldquo;human-sort&amp;rdquo; mostly-numeric filenames.
https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers
https://twitter.com/nedbat/status/1491032300800421892</description></item><item><title/><link>https://skalt.github.io/til/2022/02/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/25/</guid><description>that you can use variables in make targets, e.g.
path/${TO}/file: path/${TO}/other/file</description></item><item><title/><link>https://skalt.github.io/til/2022/03/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/06/</guid><description>About git-sparse-checkout:
https://linuxhint.com/what-is-git-sparse-checkout/ https://git-scm.com/docs/git-sparse-checkout The general script for doing a sparse checkout is:
#!/usr/bin/env bash git_url=&amp;#34;${git_url:?required}&amp;#34; target_dir=&amp;#34;${target_dir:?required}&amp;#34; is_git_dir() { git rev-parse; } init() { mkdir -p &amp;#34;$target_dir&amp;#34; &amp;amp;&amp;amp; cd &amp;#34;$target_dir&amp;#34; if ! is_git_dir; then git init &amp;amp;&amp;amp; git remote add -f origin &amp;#34;$git_url&amp;#34; fi git config core.sparseCheckout true &amp;amp;&amp;amp; git sparse-checkout init &amp;amp;&amp;amp; git sparse-checkout set test &amp;amp;&amp;amp; git pull origin master } see also: https://about.gitlab.com/blog/2020/03/13/partial-clone-for-massive-repositories/</description></item><item><title/><link>https://skalt.github.io/til/2022/03/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/18/</guid><description>How to check if a debian package is installed:
deb_pkg_is_installed() { sudo dpkg --get-selections &amp;#34;$1&amp;#34; | grep -q &amp;#34;$1&amp;#34;; }</description></item><item><title/><link>https://skalt.github.io/til/2022/03/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/19/</guid><description>How to pass a multi-character field separator to awk:
awk -F &amp;#39;[ :]+&amp;#39; &amp;#39;{print $1, $3}&amp;#39; # character set: [ :] # repetition: +</description></item><item><title/><link>https://skalt.github.io/til/2022/03/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/22/</guid><description>You can replace the nth instance of a pattern on a line with sed:
; printf &amp;#34;a\tb\tc\n&amp;#34; | sed &amp;#39;s/\t/\t~/2&amp;#39; # a b ~c</description></item><item><title/><link>https://skalt.github.io/til/2022/04/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/04/</guid><description>to run terraform output $output_name to print a named output</description></item><item><title/><link>https://skalt.github.io/til/2022/04/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/20/</guid><description>tar -ztvf file.tar.gz will list the files in tar.gz</description></item><item><title/><link>https://skalt.github.io/til/2022/04/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/29/</guid><description>how to check the last apt update time:
last_update=&amp;#34;$(stat --format=%Y /var/cache/apt/pkgcache.bin)&amp;#34; https://askubuntu.com/a/410259/505362</description></item><item><title/><link>https://skalt.github.io/til/2022/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/09/</guid><description>that sudo can be configured with the visudo command and that sudo can produce audit logs. See https://www.sudo.ws/posts/2022/05/sudo-for-blue-teams-how-to-control-and-log-better/
that there&amp;rsquo;s an Element.closest(selector) method, which means you can run this function to set the url to the closest link to an element:
((el) =&amp;gt; { let id = el.closest(&amp;#34;[id]&amp;#34;)?.id; if (!id) return; else location.hash = id; })($0); that you can use
SELECT /*...*/ FROM one_table JOIN other_table USING (common_column) as shorthand for one_table.</description></item><item><title/><link>https://skalt.github.io/til/2022/06/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/01/</guid><description>That pg_dumpall exists. That you need to use pg_dumpall to dump tablespaces, roles, and subscriptions. That pg_dumpall will dump the postgres role by default, causing resultant dump to fail to restore. Fortunately, I&amp;rsquo;m able to grep -ve '^CREATE ROLE postgres</description></item></channel></rss>