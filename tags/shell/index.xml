<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Shell on Today I Learned</title><link>https://skalt.github.io/til/tags/shell/</link><description>Recent content in Shell on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/24/</guid><description>&lt;p&gt;&lt;a href="https://web.dev/fetch-upload-streaming/#previously-on-the-exciting-adventures-of-fetch-streams"&gt;How to stream large responses using the Javascript &lt;code&gt;Fetch&lt;/code&gt; API:&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Response fully received&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also: &lt;a href="https://linuxhandbook.com/login-shell/"&gt;the circumstances under which ~/.*profile files are run: only if you log in.&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/31/</guid><description>&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-grep"&gt;That you can use &lt;code&gt;git grep&lt;/code&gt;&lt;/a&gt; to search for a string in a git repo.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/09/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/15/</guid><description>&lt;p&gt;That you &lt;em&gt;can&lt;/em&gt;, technically, write inline comments in bash. Specifically, you have to put the comments in a subshell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; abc &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="c1"&gt;#put your comment here` \&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; def &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="c1"&gt;#another chance for a comment` \&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; xyz etc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;^ from &lt;a href="https://stackoverflow.com/a/23872003/6571327"&gt;https://stackoverflow.com/a/23872003/6571327&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/04/</guid><description>&lt;p&gt;that different versions of &lt;code&gt;sort(1)&lt;/code&gt; have different sorting presets.
For example, on ubuntu 20.04 vs debian buster, &lt;code&gt;sort&lt;/code&gt; will swap the order of how it sorts &lt;code&gt;_&lt;/code&gt;s.
These differences can be resolved by passing &lt;code&gt;--unique --dictionary-order --stable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Bonus: &lt;code&gt;-h/--human-numeric-sort&lt;/code&gt; can sort SI suffixes.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/13/</guid><description>&lt;p&gt;about &lt;a href="https://linux.die.net/man/1/reset"&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt;, which resets your terminal after a series of undesired ANSI escape codes.
I also learned about &lt;a href="https://linux.die.net/man/1/echo"&gt;&lt;code&gt;echo -e &amp;quot;\e&amp;quot;&lt;/code&gt;&lt;/a&gt; meaning &amp;ldquo;interpret backslash escape codes&amp;rdquo; (&lt;code&gt;-e&lt;/code&gt;) and &lt;code&gt;&amp;quot;\e&amp;quot; == &amp;quot;\033&amp;quot;&lt;/code&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/19/</guid><description>&lt;p&gt;that you can write multiple lines to a file using a &lt;code&gt;cat &amp;gt; path/to/file&lt;/code&gt; with argument, like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;cat &amp;gt; /tmp/file
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;subsequent typed input
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;is still stdin, which is being &lt;span class="nb"&gt;read&lt;/span&gt; by &lt;span class="sb"&gt;`&lt;/span&gt;cat&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;and so will be written to the file
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;^C &lt;span class="c1"&gt;# cancels `cat` writing to the file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/30/</guid><description>&lt;p&gt;about &lt;code&gt;terminfo&lt;/code&gt;, the terminal information database: it can be queried to find all kinds of fun facts about your current terminal.
For instance,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tput cols&lt;/code&gt; =&amp;gt; number of columns in the current terminal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tput colors&lt;/code&gt; =&amp;gt; number of colors the terminal supports&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tput setaf&lt;/code&gt; =&amp;gt; generate ansi codes to set the foregrount color in the terminal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, &lt;code&gt;infocmp screen&lt;/code&gt; dumps a bunch of other related information drawn from &lt;code&gt;terminfo&lt;/code&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/11/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/23/</guid><description>&lt;p&gt;&lt;code&gt;locate&lt;/code&gt; searches all filenames for a keyword using a database which you can update &lt;code&gt;updatedb&lt;/code&gt;.
&lt;code&gt;whereis&lt;/code&gt; searches for binaries using the same mechanism.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.madebygps.com/an-intro-to-finding-things-in-linux/"&gt;https://www.madebygps.com/an-intro-to-finding-things-in-linux/&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/12/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/12/01/</guid><description>&lt;p&gt;that you can write any file in your git history using &lt;code&gt;git show &amp;lt;ref&amp;gt;:&amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://juplo.de/cat-any-file-in-any-commit-with-git/"&gt;https://juplo.de/cat-any-file-in-any-commit-with-git/&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/01/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/31/</guid><description>&lt;p&gt;that the &lt;code&gt;fmt&lt;/code&gt; utility exists. It seems to fold or center text according to a target width.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/08/</guid><description>&lt;p&gt;In &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;ls *(n)&lt;/code&gt; will &amp;ldquo;human-sort&amp;rdquo; mostly-numeric filenames.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers"&gt;https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/nedbat/status/1491032300800421892"&gt;https://twitter.com/nedbat/status/1491032300800421892&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/02/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/25/</guid><description>&lt;p&gt;that you can use variables in make targets, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-make" data-lang="make"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nf"&gt;path/${TO}/file&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;/${&lt;span class="n"&gt;TO&lt;/span&gt;}/&lt;span class="n"&gt;other&lt;/span&gt;/&lt;span class="n"&gt;file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/03/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/06/</guid><description>&lt;p&gt;About &lt;code&gt;git-sparse-checkout&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://linuxhint.com/what-is-git-sparse-checkout/"&gt;https://linuxhint.com/what-is-git-sparse-checkout/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/git-sparse-checkout"&gt;https://git-scm.com/docs/git-sparse-checkout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The general script for doing a sparse checkout is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="nv"&gt;git_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;git_url&lt;/span&gt;&lt;span class="p"&gt;:?required&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;target_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_dir&lt;/span&gt;&lt;span class="p"&gt;:?required&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;is_git_dir&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; git rev-parse&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;init&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; mkdir -p &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$target_dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$target_dir&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; ! is_git_dir&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; git init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote add -f origin &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$git_url&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; git config core.sparseCheckout &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; git sparse-checkout init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; git sparse-checkout &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; git pull origin master
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;see also: &lt;a href="https://about.gitlab.com/blog/2020/03/13/partial-clone-for-massive-repositories/"&gt;https://about.gitlab.com/blog/2020/03/13/partial-clone-for-massive-repositories/&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/03/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/18/</guid><description>&lt;p&gt;How to check if a debian package is installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;deb_pkg_is_installed&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; sudo dpkg --get-selections &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -q &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/03/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/19/</guid><description>&lt;p&gt;How to pass a multi-character field separator to &lt;code&gt;awk&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;awk -F &lt;span class="s1"&gt;&amp;#39;[ :]+&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $1, $3}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# character set: [ :]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# repetition: +&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/03/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/22/</guid><description>&lt;p&gt;You can replace the &lt;code&gt;nth&lt;/code&gt; instance of a pattern on a line with sed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;a\tb\tc\n&amp;#34;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/\t/\t~/2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# a b ~c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/04/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/04/</guid><description>&lt;p&gt;to run &lt;code&gt;terraform output $output_name&lt;/code&gt; to print a named output&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/04/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/20/</guid><description>&lt;p&gt;&lt;code&gt;tar -ztvf file.tar.gz&lt;/code&gt; will list the files in tar.gz&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/04/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/29/</guid><description>&lt;p&gt;how to check the last &lt;code&gt;apt update&lt;/code&gt; time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;last_update&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;stat --format&lt;span class="o"&gt;=&lt;/span&gt;%Y /var/cache/apt/pkgcache.bin&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href="https://askubuntu.com/a/410259/505362"&gt;https://askubuntu.com/a/410259/505362&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/09/</guid><description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;that &lt;code&gt;sudo&lt;/code&gt; can be configured with the &lt;code&gt;visudo&lt;/code&gt; command &lt;em&gt;and&lt;/em&gt; that sudo can produce audit logs.
See &lt;a href="https://www.sudo.ws/posts/2022/05/sudo-for-blue-teams-how-to-control-and-log-better/"&gt;https://www.sudo.ws/posts/2022/05/sudo-for-blue-teams-how-to-control-and-log-better/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;that there&amp;rsquo;s an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/closest"&gt;&lt;code&gt;Element.closest(selector)&lt;/code&gt;&lt;/a&gt; method, which means you can run this function to set the url to the closest link to an element:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;[id]&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;that you can use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one_table&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;other_table&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;USING&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;common_column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;as shorthand for &lt;code&gt;one_table.common_column = other_table.common_column&lt;/code&gt;.
See &lt;a href="https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM"&gt;https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/06/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/01/</guid><description>&lt;p&gt;That &lt;code&gt;pg_dumpall&lt;/code&gt; exists.
That you need to use &lt;code&gt;pg_dumpall&lt;/code&gt; to dump tablespaces, roles, and subscriptions.
That &lt;code&gt;pg_dumpall&lt;/code&gt; will dump the &lt;code&gt;postgres&lt;/code&gt; role by default, causing resultant dump to fail to restore.
Fortunately, I&amp;rsquo;m able to &lt;code&gt;grep -ve '^CREATE ROLE postgres&lt;/code&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/06/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/07/</guid><description>&lt;p&gt;That 1Password has a separate SSH key type! &lt;a href="https://developer.1password.com/docs/ssh/manage-keys/"&gt;https://developer.1password.com/docs/ssh/manage-keys/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, that &lt;code&gt;make&lt;/code&gt; has a &lt;code&gt;MAKEFLAGS&lt;/code&gt; variable that can be used in recursive calls to &lt;code&gt;make&lt;/code&gt;: see
&lt;a href="https://earthly.dev/blog/make-flags/"&gt;https://earthly.dev/blog/make-flags/&lt;/a&gt;. This also means you can set &lt;code&gt;-r&lt;/code&gt;, which eliminates default rules and file actions.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/07/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/02/</guid><description>&lt;p&gt;That you can unescape newlines with &lt;code&gt;printf &amp;quot;%b&amp;quot; 'escaped\nstring'&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;escaped&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a\nb&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;%b&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$escaped&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/08/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/24/</guid><description>&lt;p&gt;that you can &lt;code&gt;lsblk&lt;/code&gt; to list the block devices that the OS knows about without sudo.&lt;/p&gt;
&lt;p&gt;that you can &lt;code&gt;sudo growpart&lt;/code&gt; to increase a partition size without restarting the machine.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/10/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/03/</guid><description>&lt;p&gt;That you can write &lt;code&gt;&amp;gt;&amp;amp; 1&lt;/code&gt; and it still redirects to stdout!
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;f&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;ok&amp;#34;&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;2&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;f 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep ok
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/10/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/23/</guid><description>&lt;p&gt;That ARIA stands for Accessible Rich Internet Applications!
See &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"&gt;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That in linux &lt;code&gt;ls(1)&lt;/code&gt; uses the environment variable &lt;code&gt;LS_COLORS&lt;/code&gt; to determine the colors in which the filenames are to be displayed.
Also, that linux specifies a &lt;code&gt;dir_colors(5)&lt;/code&gt; configuration file format for &lt;code&gt;dircolors(1)&lt;/code&gt;, which exports &lt;code&gt;LS_COLORS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://man7.org/linux/man-pages/man5/dir_colors.5.html"&gt;https://man7.org/linux/man-pages/man5/dir_colors.5.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That nix is complicated, which is exactly what my prior research told me.&lt;/p&gt;
&lt;p&gt;On one hand, it is &lt;strong&gt;AWESOME&lt;/strong&gt; to cd into a project and watch &lt;a href=""&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt; automatically spawn a development shell with all the fixings.
On the other, the nix ecosystem is bewildering.
I read through a few articles:&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/10/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/24/</guid><description>&lt;p&gt;That you can list all addresses in terraform state by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;terraform state list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Docs at &lt;a href="https://developer.hashicorp.com/terraform/cli/commands/state/list"&gt;https://developer.hashicorp.com/terraform/cli/commands/state/list&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Also, that &lt;code&gt;compgen -v&lt;/code&gt; is a function, at least on Mac zsh.
Apparently in zsh &lt;code&gt;compgen -v&lt;/code&gt; calls something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; var_name in &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;(k)parameters[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s\n&amp;#39;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;$var_name&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which is the first time I&amp;rsquo;ve seen that kind of shell syntax.
It generates a &lt;code&gt;bad substitution&lt;/code&gt; message in bash 3.2, so I can only assume it&amp;rsquo;s zsh-specific.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2023/01/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/28/</guid><description>&lt;p&gt;That you need ato &lt;code&gt;git add&lt;/code&gt; a &lt;code&gt;flake.nix&lt;/code&gt; for the flake&amp;rsquo;s contents to start to work with &lt;code&gt;nix develop&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is needed because Nix flakes respects gitignores. If you don&amp;rsquo;t add things to the git staging area, git doesn&amp;rsquo;t know about the files at all, and Nix flakes can&amp;rsquo;t know if it should ignore them.
&amp;ndash; &lt;a href="https://xeiaso.net/blog/nix-flakes-go-programs"&gt;https://xeiaso.net/blog/nix-flakes-go-programs&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;that &amp;ldquo;truecolor&amp;rdquo; support in shells is detected with the &lt;code&gt;$COLORTERM&lt;/code&gt; env var&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2023/05/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/30/</guid><description>&lt;p&gt;That there&amp;rsquo;s a Linux command to do sql-like &lt;code&gt;JOIN&lt;/code&gt;s of lines in files, possibly based on a field in each line: &lt;a href="https://linux.die.net/man/1/join"&gt;&lt;code&gt;join(1)&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2024/04/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/17/</guid><description>&lt;p&gt;That &lt;code&gt;shasum(1)&lt;/code&gt; is implemented in perl: &lt;a href="https://linux.die.net/man/1/shasum"&gt;https://linux.die.net/man/1/shasum&lt;/a&gt;, though
&lt;code&gt;shaXXXsum&lt;/code&gt; et al. seem to be implemented in C: &lt;a href="https://github.com/coreutils/coreutils/blob/a9b78541fa7c06567c5b82fb4e89d85a1dc0c611/src/digest.c#L103"&gt;https://github.com/coreutils/coreutils/blob/a9b78541fa7c06567c5b82fb4e89d85a1dc0c611/src/digest.c#L103&lt;/a&gt;&lt;/p&gt;</description></item></channel></rss>