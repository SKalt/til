<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Shell on Today I Learned</title><link>https://skalt.github.io/til/tags/shell/</link><description>Recent content in Shell on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/24/</guid><description>&lt;p>&lt;a href="https://web.dev/fetch-upload-streaming/#previously-on-the-exciting-adventures-of-fetch-streams">How to stream large responses using the Javascript &lt;code>Fetch&lt;/code> API:&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">reader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getReader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">reader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">read&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Received&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Response fully received&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Also: &lt;a href="https://linuxhandbook.com/login-shell/">the circumstances under which ~/.*profile files are run: only if you log in.&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/31/</guid><description>&lt;p>&lt;a href="https://git-scm.com/docs/git-grep">That you can use &lt;code>git grep&lt;/code>&lt;/a> to search for a string in a git repo.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/09/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/15/</guid><description>&lt;p>That you &lt;em>can&lt;/em>, technically, write inline comments in bash. Specifically, you have to put the comments in a subshell:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> abc &lt;span class="sb">`&lt;/span>&lt;span class="c1">#put your comment here` \&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def &lt;span class="sb">`&lt;/span>&lt;span class="c1">#another chance for a comment` \&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> xyz etc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>^ from &lt;a href="https://stackoverflow.com/a/23872003/6571327">https://stackoverflow.com/a/23872003/6571327&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/10/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/04/</guid><description>&lt;p>that different versions of &lt;code>sort(1)&lt;/code> have different sorting presets.
For example, on ubuntu 20.04 vs debian buster, &lt;code>sort&lt;/code> will swap the order of how it sorts &lt;code>_&lt;/code>s.
These differences can be resolved by passing &lt;code>--unique --dictionary-order --stable&lt;/code>.&lt;/p>
&lt;p>Bonus: &lt;code>-h/--human-numeric-sort&lt;/code> can sort SI suffixes.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/10/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/13/</guid><description>&lt;p>about &lt;a href="https://linux.die.net/man/1/reset">&lt;code>reset&lt;/code>&lt;/a>, which resets your terminal after a series of undesired ANSI escape codes.
I also learned about &lt;a href="https://linux.die.net/man/1/echo">&lt;code>echo -e &amp;quot;\e&amp;quot;&lt;/code>&lt;/a> meaning &amp;ldquo;interpret backslash escape codes&amp;rdquo; (&lt;code>-e&lt;/code>) and &lt;code>&amp;quot;\e&amp;quot; == &amp;quot;\033&amp;quot;&lt;/code>.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/19/</guid><description>&lt;p>that you can write multiple lines to a file using a &lt;code>cat &amp;gt; path/to/file&lt;/code> with argument, like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">cat &amp;gt; /tmp/file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">subsequent typed input
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">is still stdin, which is being &lt;span class="nb">read&lt;/span> by &lt;span class="sb">`&lt;/span>cat&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">and so will be written to the file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^C &lt;span class="c1"># cancels `cat` writing to the file&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://skalt.github.io/til/2021/10/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/30/</guid><description>&lt;p>about &lt;code>terminfo&lt;/code>, the terminal information database: it can be queried to find all kinds of fun facts about your current terminal.
For instance,&lt;/p>
&lt;ul>
&lt;li>&lt;code>tput cols&lt;/code> =&amp;gt; number of columns in the current terminal&lt;/li>
&lt;li>&lt;code>tput colors&lt;/code> =&amp;gt; number of colors the terminal supports&lt;/li>
&lt;li>&lt;code>tput setaf&lt;/code> =&amp;gt; generate ansi codes to set the foregrount color in the terminal&lt;/li>
&lt;/ul>
&lt;p>Also, &lt;code>infocmp screen&lt;/code> dumps a bunch of other related information drawn from &lt;code>terminfo&lt;/code>.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/11/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/23/</guid><description>&lt;p>&lt;code>locate&lt;/code> searches all filenames for a keyword using a database which you can update &lt;code>updatedb&lt;/code>.
&lt;code>whereis&lt;/code> searches for binaries using the same mechanism.&lt;/p>
&lt;p>&lt;a href="https://www.madebygps.com/an-intro-to-finding-things-in-linux/">https://www.madebygps.com/an-intro-to-finding-things-in-linux/&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/12/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/12/01/</guid><description>&lt;p>that you can write any file in your git history using &lt;code>git show &amp;lt;ref&amp;gt;:&amp;lt;path&amp;gt;&lt;/code>.&lt;/p>
&lt;p>See &lt;a href="https://juplo.de/cat-any-file-in-any-commit-with-git/">https://juplo.de/cat-any-file-in-any-commit-with-git/&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/01/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/31/</guid><description>&lt;p>that the &lt;code>fmt&lt;/code> utility exists. It seems to fold or center text according to a target width.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/08/</guid><description>&lt;p>In &lt;code>zsh&lt;/code>, &lt;code>ls *(n)&lt;/code> will &amp;ldquo;human-sort&amp;rdquo; mostly-numeric filenames.&lt;/p>
&lt;p>&lt;a href="https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers">https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://twitter.com/nedbat/status/1491032300800421892">https://twitter.com/nedbat/status/1491032300800421892&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/02/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/25/</guid><description>&lt;p>that you can use variables in make targets, e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-make" data-lang="make">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">path/${TO}/file&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">path&lt;/span>/${&lt;span class="n">TO&lt;/span>}/&lt;span class="n">other&lt;/span>/&lt;span class="n">file&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://skalt.github.io/til/2022/03/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/06/</guid><description>&lt;p>About &lt;code>git-sparse-checkout&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://linuxhint.com/what-is-git-sparse-checkout/">https://linuxhint.com/what-is-git-sparse-checkout/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/docs/git-sparse-checkout">https://git-scm.com/docs/git-sparse-checkout&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The general script for doing a sparse checkout is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nv">git_url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">git_url&lt;/span>&lt;span class="p">:?required&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">target_dir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">target_dir&lt;/span>&lt;span class="p">:?required&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">is_git_dir&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> git rev-parse&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">init&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mkdir -p &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$target_dir&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$target_dir&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> ! is_git_dir&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git init &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git remote add -f origin &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$git_url&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config core.sparseCheckout &lt;span class="nb">true&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git sparse-checkout init &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git sparse-checkout &lt;span class="nb">set&lt;/span> &lt;span class="nb">test&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git pull origin master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>see also: &lt;a href="https://about.gitlab.com/blog/2020/03/13/partial-clone-for-massive-repositories/">https://about.gitlab.com/blog/2020/03/13/partial-clone-for-massive-repositories/&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/03/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/18/</guid><description>&lt;p>How to check if a debian package is installed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">deb_pkg_is_installed&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo dpkg --get-selections &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> grep -q &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://skalt.github.io/til/2022/03/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/19/</guid><description>&lt;p>How to pass a multi-character field separator to &lt;code>awk&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">awk -F &lt;span class="s1">&amp;#39;[ :]+&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;{print $1, $3}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># character set: [ :]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># repetition: +&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://skalt.github.io/til/2022/03/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/22/</guid><description>&lt;p>You can replace the &lt;code>nth&lt;/code> instance of a pattern on a line with sed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="p">;&lt;/span> &lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;a\tb\tc\n&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/\t/\t~/2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># a b ~c&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://skalt.github.io/til/2022/04/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/04/</guid><description>&lt;p>to run &lt;code>terraform output $output_name&lt;/code> to print a named output&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/04/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/20/</guid><description>&lt;p>&lt;code>tar -ztvf file.tar.gz&lt;/code> will list the files in tar.gz&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/04/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/29/</guid><description>&lt;p>how to check the last &lt;code>apt update&lt;/code> time:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">last_update&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>stat --format&lt;span class="o">=&lt;/span>%Y /var/cache/apt/pkgcache.bin&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://askubuntu.com/a/410259/505362">https://askubuntu.com/a/410259/505362&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/09/</guid><description>&lt;ul>
&lt;li>
&lt;p>that &lt;code>sudo&lt;/code> can be configured with the &lt;code>visudo&lt;/code> command &lt;em>and&lt;/em> that sudo can produce audit logs.
See &lt;a href="https://www.sudo.ws/posts/2022/05/sudo-for-blue-teams-how-to-control-and-log-better/">https://www.sudo.ws/posts/2022/05/sudo-for-blue-teams-how-to-control-and-log-better/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>that there&amp;rsquo;s an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/closest">&lt;code>Element.closest(selector)&lt;/code>&lt;/a> method, which means you can run this function to set the url to the closest link to an element:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="p">((&lt;/span>&lt;span class="nx">el&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">el&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">closest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;[id]&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})(&lt;/span>&lt;span class="nx">$0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>that you can use&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="cm">/*...*/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">one_table&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other_table&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">USING&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">common_column&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>as shorthand for &lt;code>one_table.common_column = other_table.common_column&lt;/code>.
See &lt;a href="https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM">https://www.postgresql.org/docs/current/sql-select.html#SQL-FROM&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title/><link>https://skalt.github.io/til/2022/06/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/01/</guid><description>&lt;p>That &lt;code>pg_dumpall&lt;/code> exists.
That you need to use &lt;code>pg_dumpall&lt;/code> to dump tablespaces, roles, and subscriptions.
That &lt;code>pg_dumpall&lt;/code> will dump the &lt;code>postgres&lt;/code> role by default, causing resultant dump to fail to restore.
Fortunately, I&amp;rsquo;m able to &lt;code>grep -ve '^CREATE ROLE postgres&lt;/code>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/06/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/07/</guid><description>&lt;p>That 1Password has a separate SSH key type! &lt;a href="https://developer.1password.com/docs/ssh/manage-keys/">https://developer.1password.com/docs/ssh/manage-keys/&lt;/a>&lt;/p>
&lt;p>Also, that &lt;code>make&lt;/code> has a &lt;code>MAKEFLAGS&lt;/code> variable that can be used in recursive calls to &lt;code>make&lt;/code>: see
&lt;a href="https://earthly.dev/blog/make-flags/">https://earthly.dev/blog/make-flags/&lt;/a>. This also means you can set &lt;code>-r&lt;/code>, which eliminates default rules and file actions.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/07/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/02/</guid><description>&lt;p>That you can unescape newlines with &lt;code>printf &amp;quot;%b&amp;quot; 'escaped\nstring'&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">escaped&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;a\nb&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%b&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$escaped&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># b&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://skalt.github.io/til/2022/08/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/24/</guid><description>&lt;p>that you can &lt;code>lsblk&lt;/code> to list the block devices that the OS knows about without sudo.&lt;/p>
&lt;p>that you can &lt;code>sudo growpart&lt;/code> to increase a partition size without restarting the machine.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/10/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/03/</guid><description>&lt;p>That you can write &lt;code>&amp;gt;&amp;amp; 1&lt;/code> and it still redirects to stdout!
example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">f&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ok&amp;#34;&lt;/span> &amp;gt;&lt;span class="p">&amp;amp;&lt;/span>2&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="p">|&lt;/span> grep ok
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://skalt.github.io/til/2022/10/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/23/</guid><description>&lt;p>That ARIA stands for Accessible Rich Internet Applications!
See &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA">https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&lt;/a>&lt;/p>
&lt;hr>
&lt;p>That in linux &lt;code>ls(1)&lt;/code> uses the environment variable &lt;code>LS_COLORS&lt;/code> to determine the colors in which the filenames are to be displayed.
Also, that linux specifies a &lt;code>dir_colors(5)&lt;/code> configuration file format for &lt;code>dircolors(1)&lt;/code>, which exports &lt;code>LS_COLORS&lt;/code>&lt;/p>
&lt;p>See &lt;a href="https://man7.org/linux/man-pages/man5/dir_colors.5.html">https://man7.org/linux/man-pages/man5/dir_colors.5.html&lt;/a>&lt;/p>
&lt;hr>
&lt;p>That nix is complicated, which is exactly what my prior research told me.&lt;/p>
&lt;p>On one hand, it is &lt;strong>AWESOME&lt;/strong> to cd into a project and watch &lt;a href="">&lt;code>direnv&lt;/code>&lt;/a> automatically spawn a development shell with all the fixings.
On the other, the nix ecosystem is bewildering.
I read through a few articles:&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/10/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/24/</guid><description>&lt;p>That you can list all addresses in terraform state by running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">terraform state list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docs at &lt;a href="https://developer.hashicorp.com/terraform/cli/commands/state/list">https://developer.hashicorp.com/terraform/cli/commands/state/list&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Also, that &lt;code>compgen -v&lt;/code> is a function, at least on Mac zsh.
Apparently in zsh &lt;code>compgen -v&lt;/code> calls something like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> var_name in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">(k)parameters[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">printf&lt;/span> &lt;span class="s1">&amp;#39;%s\n&amp;#39;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$var_name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which is the first time I&amp;rsquo;ve seen that kind of shell syntax.
It generates a &lt;code>bad substitution&lt;/code> message in bash 3.2, so I can only assume it&amp;rsquo;s zsh-specific.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2023/01/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/28/</guid><description>&lt;p>That you need ato &lt;code>git add&lt;/code> a &lt;code>flake.nix&lt;/code> for the flake&amp;rsquo;s contents to start to work with &lt;code>nix develop&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>This is needed because Nix flakes respects gitignores. If you don&amp;rsquo;t add things to the git staging area, git doesn&amp;rsquo;t know about the files at all, and Nix flakes can&amp;rsquo;t know if it should ignore them.
&amp;ndash; &lt;a href="https://xeiaso.net/blog/nix-flakes-go-programs">https://xeiaso.net/blog/nix-flakes-go-programs&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>that &amp;ldquo;truecolor&amp;rdquo; support in shells is detected with the &lt;code>$COLORTERM&lt;/code> env var&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2023/05/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/30/</guid><description>&lt;p>That there&amp;rsquo;s a Linux command to do sql-like &lt;code>JOIN&lt;/code>s of lines in files, possibly based on a field in each line: &lt;a href="https://linux.die.net/man/1/join">&lt;code>join(1)&lt;/code>&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/04/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/17/</guid><description>&lt;p>That &lt;code>shasum(1)&lt;/code> is implemented in perl: &lt;a href="https://linux.die.net/man/1/shasum">https://linux.die.net/man/1/shasum&lt;/a>, though
&lt;code>shaXXXsum&lt;/code> et al. seem to be implemented in C: &lt;a href="https://github.com/coreutils/coreutils/blob/a9b78541fa7c06567c5b82fb4e89d85a1dc0c611/src/digest.c#L103">https://github.com/coreutils/coreutils/blob/a9b78541fa7c06567c5b82fb4e89d85a1dc0c611/src/digest.c#L103&lt;/a>&lt;/p></description></item></channel></rss>