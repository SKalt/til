<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Workspaces on Today I Learned</title><link>https://skalt.github.io/til/tags/workspaces/</link><description>Recent content in Workspaces on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/workspaces/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2024/04/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/27/</guid><description>&lt;p>That you can add a &lt;code>[workspace.dependencies]&lt;/code> table in your top-level &lt;code>Cargo.toml&lt;/code> specifying paths to internal crates:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># ${PROJECT_DIR}/Cargo.toml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">workspace&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">members&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;path/to/my_crate&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">workspace&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">my_crate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;path/to/my_crate&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># ${PROJECT_DIR}/path/to/other_crate/Cargo.toml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">my_crate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">workspace&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See &lt;a href="https://doc.rust-lang.org/cargo/reference/workspaces.html#the-dependencies-table">https://doc.rust-lang.org/cargo/reference/workspaces.html#the-dependencies-table&lt;/a>.
See also &lt;a href="https://doc.rust-lang.org/cargo/reference/workspaces.html">https://doc.rust-lang.org/cargo/reference/workspaces.html&lt;/a>.&lt;/p>
&lt;p>&lt;code>workspace = true&lt;/code> can also help share external dependencies within multiple internal crates; see &lt;a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace">https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#inheriting-a-dependency-from-a-workspace&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>Also, that u32 and u64 don&amp;rsquo;t implement &lt;code>Into&amp;lt;usize&amp;gt;&lt;/code>! I guess rust supports 16-bit pointer sizes.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/05/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/05/04/</guid><description>&lt;p>That a &lt;code>go.work&lt;/code> file can point to local &amp;ldquo;main modules&amp;rdquo; used for minimum-version selection.
&lt;code>go&lt;/code> will maintain a separate &lt;code>go.work.sum&lt;/code> file with the checksums of the workspace&amp;rsquo;s dependencies.
&lt;code>go work {init,use,edit}&lt;/code> manages the work-files.
&lt;code>$GOWORK&lt;/code> pointing to a file named like &lt;code>*.work&lt;/code> can switch between multiple workspace files.
See &lt;a href="https://go.dev/ref/mod#workspaces;">https://go.dev/ref/mod#workspaces;&lt;/a> the syntax of &lt;code>*.work&lt;/code> files is roughly equivalent to the syntax in &lt;code>go.mod&lt;/code>.&lt;/p>
&lt;hr>
&lt;p>That none of the following options ensure unused debug info is not included in rust wasm output:&lt;/p></description></item></channel></rss>