<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Cli on Today I Learned</title><link>https://skalt.github.io/til/tags/cli/</link><description>Recent content in Cli on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/cli/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2022/04/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/04/</guid><description>&lt;p>to run &lt;code>terraform output $output_name&lt;/code> to print a named output&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/10/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/11/</guid><description>&lt;p>That &lt;code>terraform plan -detailed-exitcode&lt;/code> exists: 0 means no diff, 1 means error, 2 means a diff exists.&lt;/p>
&lt;p>Also, that you can print the source code of a bash function like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">print_fn_src&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="nb">declare&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://skalt.github.io/til/2022/10/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/18/</guid><description>&lt;p>That BSD &lt;code>arch&lt;/code> command found on Macs also supports a &lt;code>-${arch}&lt;/code> flag for running universal binaries.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2022/10/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/24/</guid><description>&lt;p>That you can list all addresses in terraform state by running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">terraform state list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docs at &lt;a href="https://developer.hashicorp.com/terraform/cli/commands/state/list">https://developer.hashicorp.com/terraform/cli/commands/state/list&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Also, that &lt;code>compgen -v&lt;/code> is a function, at least on Mac zsh.
Apparently in zsh &lt;code>compgen -v&lt;/code> calls something like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> var_name in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">(k)parameters[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">printf&lt;/span> &lt;span class="s1">&amp;#39;%s\n&amp;#39;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$var_name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which is the first time I&amp;rsquo;ve seen that kind of shell syntax.
It generates a &lt;code>bad substitution&lt;/code> message in bash 3.2, so I can only assume it&amp;rsquo;s zsh-specific.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2023/01/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/30/</guid><description>&lt;p>That &lt;code>psql&lt;/code> et al. support colors:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PG_COLOR&lt;/span>&lt;span class="o">=&lt;/span>auto &lt;span class="c1"># only colorize output to ttys&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>learned from &lt;a href="https://fluca1978.github.io/2023/01/23/PostgreSQLColors.html">https://fluca1978.github.io/2023/01/23/PostgreSQLColors.html&lt;/a>
See also:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.postgresql.org/docs/current/color-when.html">https://www.postgresql.org/docs/current/color-when.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.postgresql.org/docs/current/color-which.html">https://www.postgresql.org/docs/current/color-which.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://skalt.github.io/til/2024/03/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/26/</guid><description>&lt;p>That you can specify an alternate &lt;code>.terraformrc&lt;/code> file using the environment variable &lt;code>TF_CLI_CONFIG_FILE=$ABSOLUTE_PATH&lt;/code>.
This can help with local provider development.
See &lt;a href="https://developer.hashicorp.com/terraform/cli/config/environment-variables#tf_cli_config_file">https://developer.hashicorp.com/terraform/cli/config/environment-variables#tf_cli_config_file&lt;/a>&lt;/p></description></item></channel></rss>