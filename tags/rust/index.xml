<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rust on Today I Learned</title><link>https://skalt.github.io/til/tags/rust/</link><description>Recent content in Rust on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2022/04/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/13/</guid><description>That a rust if-statement can have a return type
let x: u32 = 123; let stmt_result = if x % 2 == 0 { Ok(&amp;#34;even steven&amp;#34;) } else { Err(&amp;#34;odd steven&amp;#34;) }; assert_eq!(x, Err(&amp;#34;odd steven&amp;#34;));</description></item><item><title/><link>https://skalt.github.io/til/2022/12/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/12/10/</guid><description>That you can include doc-comments in macros:
macro_rules! documented { ( $(#[$outer:meta])* $name:ident ) =&amp;gt; { $(#[$outer])* fn $name(&amp;amp;self) {} }; } documented!( /// documented my_function ); my_function(); // hovering &amp;#34;function&amp;#34; now shows that the doc-comment is &amp;#34;documented&amp;#34; h/t https://stackoverflow.com/a/33999625/6571327</description></item><item><title/><link>https://skalt.github.io/til/2023/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/08/</guid><description>That in Rust, assert! runs in both debug and release builds. For debug-only assertions, use debug_assert!. See https://doc.rust-lang.org/stable/std/macro.debug_assert.html.
That in Python, you can call isinstance(thing, (tuple, OfMany, DifferentClasses)) to check if a variable is an instance of many possible classes. See https://docs.python.org/3/library/functions.html?highlight=isinstance#isinstance.</description></item><item><title/><link>https://skalt.github.io/til/2023/03/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/04/</guid><description>The string &amp;ldquo;0.1.12&amp;rdquo; is a version requirement. Although it looks like a specific version of the time crate, it actually specifies a range of versions and allows SemVer compatible updates.
&amp;ndash; https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
Instead, in order to lock to a specific version of a crate, you need to write = 0.1.2.</description></item><item><title/><link>https://skalt.github.io/til/2023/05/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/24/</guid><description>That you can destructure struct values:
struct Point { x: i32, y: i32, } fn main() { let p = Point { x: 0, y: 7 }; let Point { x: a, y: b } = p; assert_eq!(0, a); assert_eq!(7, b); } see https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#destructuring-structs</description></item><item><title/><link>https://skalt.github.io/til/2023/06/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/18/</guid><description>By default, a closure seems to live as long as its parent function unless you use the move keyword.
fn unmoved&amp;lt;&amp;#39;a&amp;gt;(arg: &amp;amp;&amp;#39;a str) -&amp;gt; impl Fn() + &amp;#39;a { let f = || println!(&amp;#34;unmoved: {}&amp;#34;, arg); f } fn moved&amp;lt;&amp;#39;a&amp;gt;(arg: &amp;amp;&amp;#39;a str) -&amp;gt; impl Fn() + &amp;#39;a { let f = move || println!(&amp;#34;moved: {}&amp;#34;, arg); f } fn main() { unmoved(&amp;#34;a&amp;#34;)() // does not compile moved(&amp;#34;b&amp;#34;)() // works fine } &amp;ndash; playground link</description></item><item><title/><link>https://skalt.github.io/til/2023/06/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/19/</guid><description>That Option&amp;lt;T&amp;gt; costs ~1x the alignment value of T. I also learned Vec&amp;lt;T&amp;gt;&amp;rsquo;s size and alignment don&amp;rsquo;t reflect the size and alignment of T since the Vec is tracking an owned buffer on the heap which isn&amp;rsquo;t counted in the Vec&amp;rsquo;s own size.
struct Alone8(u8); // size= 1, align=1 struct Opt8(Option&amp;lt;u8&amp;gt;); // size= 2, align=1 struct Vec8(Vec&amp;lt;u8&amp;gt;); // size=24; align=8 struct Alone64(u64); // size= 8, align=8 struct Opt64(Option&amp;lt;u64&amp;gt;); // size=16, align=8 struct Vec64(Vec&amp;lt;u64&amp;gt;); // size=24; align=8 That Firefox bundles process and task managers for performance monitoring, available at about:processes and about:tasks, respectively https://support.</description></item><item><title/><link>https://skalt.github.io/til/2023/12/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/12/23/</guid><description>Turns out Rust does support Any-types and downcasting: see https://doc.rust-lang.org/std/any/index.html and https://doc.rust-lang.org/std/any/struct.TypeId.html .</description></item><item><title/><link>https://skalt.github.io/til/2024/02/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/12/</guid><description>That rust has built-in numeric types named like NonZero* that reserve the bit-pattern of 0 as a niche: see https://doc.rust-lang.org/core/num/index.html.
This is useful since that niche will absorb the cost of wrapping a NonZero int with Option:
use core::num::NonZeroU8; use std::mem::size_of; struct Struct&amp;lt;T&amp;gt;{ // has alignment 2, size 4 a: u16, b: T, } fn main() { println!(&amp;#34; NonZeroU8: {}&amp;#34;, size_of::&amp;lt;NonZeroU8&amp;gt;()); println!(&amp;#34; Option&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Option&amp;lt;NonZeroU8&amp;gt;&amp;gt;()); println!(&amp;#34; Struct&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;&amp;gt;()); println!(&amp;#34;Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;&amp;gt;&amp;gt;()); } # NonZeroU8: 1 # Option&amp;lt;NonZeroU8&amp;gt;: 1 # Struct&amp;lt;NonZeroU8&amp;gt;: 4 # Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;: 4 playground link</description></item><item><title/><link>https://skalt.github.io/til/2024/03/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/10/</guid><description>That you can add #![warn(missing_docs)] at the top of a lib.rs file to lint for undocumented public methods.</description></item><item><title/><link>https://skalt.github.io/til/2024/04/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/13/</guid><description>That you can write
fn foo&amp;lt;const N: usize&amp;gt;(arr: &amp;amp;[u8; N]) { todo!() } to specialize a function for different array sizes, etc. You can use the following types in const generics:
u8, u16, u32, u64, u128, usize i8, i16, i32, i64, i128, isize char bool See https://doc.rust-lang.org/reference/items/generics.html#const-generics See also https://blog.cocl2.com/posts/const-currying-rs/</description></item><item><title/><link>https://skalt.github.io/til/2024/05/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/05/04/</guid><description>That a go.work file can point to local &amp;ldquo;main modules&amp;rdquo; used for minimum-version selection. go will maintain a separate go.work.sum file with the checksums of the workspace&amp;rsquo;s dependencies. go work {init,use,edit} manages the work-files. $GOWORK pointing to a file named like *.work can switch between multiple workspace files. See https://go.dev/ref/mod#workspaces; the syntax of *.work files is roughly equivalent to the syntax in go.mod.
That none of the following options ensure unused debug info is not included in rust wasm output:</description></item></channel></rss>