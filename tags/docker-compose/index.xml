<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Docker-Compose on Today I Learned</title><link>https://skalt.github.io/til/tags/docker-compose/</link><description>Recent content in Docker-Compose on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/docker-compose/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2022/08/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/11/</guid><description>&lt;p&gt;That you can call &lt;code&gt;docker compose kill&lt;/code&gt; to kill all docker-compose containers
That there&amp;rsquo;s a &lt;code&gt;timeout&lt;/code&gt; shell command in gnu coreutils: &lt;a href="https://man7.org/linux/man-pages/man1/timeout.1.html"&gt;https://man7.org/linux/man-pages/man1/timeout.1.html&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2024/03/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/21/</guid><description>&lt;p&gt;that &lt;code&gt;depends_on: [ service ]&lt;/code&gt; waits for &lt;code&gt;service&lt;/code&gt; to be &lt;strong&gt;started&lt;/strong&gt;, not for &lt;code&gt;service&lt;/code&gt; to be healthy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On startup, Compose does not wait until a container is &amp;ldquo;ready&amp;rdquo;, only until it&amp;rsquo;s running.&lt;/p&gt;
&lt;p&gt;The solution for detecting the ready state of a service is to use the condition attribute with one of the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;service_started&lt;/li&gt;
&lt;li&gt;service_healthy. This specifies that a dependency is expected to be “healthy”, which is defined with healthcheck, before starting a dependent service.&lt;/li&gt;
&lt;li&gt;service_completed_successfully. This specifies that a dependency is expected to run to successful completion before starting a dependent service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ndash; &lt;a href="https://docs.docker.com/compose/startup-order/"&gt;https://docs.docker.com/compose/startup-order/&lt;/a&gt;&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2025/03/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/03/10/</guid><description>&lt;p&gt;Why &lt;code&gt;docker compose&lt;/code&gt; is called &amp;ldquo;compose&amp;rdquo;: you can pass many &lt;code&gt;compose.yaml&lt;/code&gt; files that get merged automatically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;docker compose -f first.yaml -f second.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See &lt;a href="https://docs.docker.com/compose/how-tos/multiple-compose-files/merge/"&gt;https://docs.docker.com/compose/how-tos/multiple-compose-files/merge/&lt;/a&gt;&lt;/p&gt;</description></item></channel></rss>