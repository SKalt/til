<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>oauth2 on Today I Learned</title><link>https://skalt.github.io/til/tags/oauth2/</link><description>Recent content in oauth2 on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/oauth2/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2023/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/09/</guid><description>About the hot-off-the-press OAuth2 DPoP specification: https://datatracker.ietf.org/doc/html/rfc9449. DPoP is a &amp;ldquo;sender constraint&amp;rdquo;: a way of checking that the sender of an access (JW) token is the same as the entity to whom the access token was issued.
My simplified understanding of DPoP is as follows:
the client generates a private/public key pair the client generates a request for an access token. The request includes: the client&amp;rsquo;s public key the the authorization endpoint&amp;rsquo;s URL the client signs the request with the client&amp;rsquo;s private key the authorization server validates the request (signature and all) and issues an access (JW) token including the thumbprint of the client&amp;rsquo;s public key.</description></item></channel></rss>