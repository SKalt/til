<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>fs on Today I Learned</title><link>https://skalt.github.io/til/tags/fs/</link><description>Recent content in fs on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/fs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/09/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/06/</guid><description>about PATH_MAX: the part of the POSIX standard which determines the maximum number of bytes allowed in an absolute path. In Linux, PATH_MAX is 4096 [src], but it&amp;rsquo;s possible to construct longer paths if you don&amp;rsquo;t care about some (most) utilities that use the current working directory to fail due to buffer overflow.
Also, I learned that most filesystems restrict file names to 255 bytes.</description></item><item><title/><link>https://skalt.github.io/til/2022/04/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/08/</guid><description>What hardlinks are: direct references to inodes. A hardlink can&amp;rsquo;t reference filesystem objects that don&amp;rsquo;t have inodes, such as directories or ports, and aren&amp;rsquo;t portable across different hardware devices even with the same filesystem layout (I think).
Also, the opposite of mount(8) is not unmount, it&amp;rsquo;s umount &amp;gt;:(
gzip -vt $path_to_file checks the validity of a gzip archive: see https://unix.stackexchange.com/questions/359303/check-validity-of-gz-file</description></item></channel></rss>