<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Terraform on Today I Learned</title><link>https://skalt.github.io/til/tags/terraform/</link><description>Recent content in Terraform on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/terraform/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2022/01/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/26/</guid><description>That you can extract sensitive output values from terraform, you can terraform output $output_name
&amp;ndash; see https://learn.hashicorp.com/tutorials/terraform/outputs#redact-sensitive-outputs
Also, sqlite provides a PRAGMA user_version=&amp;lt;number&amp;gt; to let applications store and retrieve a versioning number. See https://sqlite.org/pragma.html#pragma_user_version</description></item><item><title/><link>https://skalt.github.io/til/2022/03/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/17/</guid><description>About the terraform count meta-argument:
you can pass a count = n to any resource-block to create n copies of the resource you can differentiate each of the resources using ${count.index}</description></item><item><title/><link>https://skalt.github.io/til/2022/04/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/04/</guid><description>to run terraform output $output_name to print a named output</description></item><item><title/><link>https://skalt.github.io/til/2022/05/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/03/</guid><description>aws policy documents can change the order of items within permissions arrays, but that&amp;rsquo;s safe to ignore:
Order is lost for data aws_iam_policy_document Policy elements that are syntactically lists but semantically sets should have their order ignored Perpetual diffs / Objects have changed outside of Terraform tracking ticket Also, that &amp;amp; types take 8 bytes = 64 bits on 64-bit systems
use std::mem; pub struct Foo { bar: String, // 24 baz: usize, // 8 } pub struct Quux&amp;lt;&amp;#39;a&amp;gt; { foo: &amp;amp;&amp;#39;a Foo, bar: usize, } fn main() { println!</description></item><item><title/><link>https://skalt.github.io/til/2022/07/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/08/</guid><description>That there&amp;rsquo;s an official 1Password terraform provider: https://registry.terraform.io/providers/1Password/onepassword/latest/docs</description></item><item><title/><link>https://skalt.github.io/til/2022/10/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/11/</guid><description>That terraform plan -detailed-exitcode exists: 0 means no diff, 1 means error, 2 means a diff exists.
Also, that you can print the source code of a bash function like so:
print_fn_src() { declare -f &amp;#34;$1&amp;#34;; }</description></item><item><title/><link>https://skalt.github.io/til/2022/10/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/24/</guid><description>That you can list all addresses in terraform state by running
terraform state list Docs at https://developer.hashicorp.com/terraform/cli/commands/state/list
Also, that compgen -v is a function, at least on Mac zsh. Apparently in zsh compgen -v calls something like
for var_name in &amp;#34;${(k)parameters[@]}&amp;#34;; do printf &amp;#39;%s\n&amp;#39; &amp;#34;$var_name&amp;#34; done which is the first time I&amp;rsquo;ve seen that kind of shell syntax. It generates a bad substitution message in bash 3.2, so I can only assume it&amp;rsquo;s zsh-specific.</description></item><item><title/><link>https://skalt.github.io/til/2022/11/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/08/</guid><description>That the aws_ec2_tag resource can be used to add tags to AWS RAM-shared VPCs and subnets:
This resource should only be used in cases where EC2 resources are created outside Terraform (e.g., AMIs), being shared via Resource Access Manager (RAM), or implicitly created by other means (e.g., Transit Gateway VPN Attachments).
Also, that
When the source of a module is a version control repository or archive file (generically, a &amp;ldquo;package&amp;rdquo;), the module itself may be in a sub-directory relative to the root of the package.</description></item><item><title/><link>https://skalt.github.io/til/2022/11/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/30/</guid><description>that you can option+click to change your cursor&amp;rsquo;s location in iterm2 and mac&amp;rsquo;s terminal.app! H/t Vlad Grenkov for this one :)
As of Terraform 1.3, you can write
type = optional(real_type, default_value) See https://www.hashicorp.com/blog/terraform-1-3-improves-extensibility-and-maintainability-of-terraform-modules</description></item><item><title/><link>https://skalt.github.io/til/2024/03/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/26/</guid><description>That you can specify an alternate .terraformrc file using the environment variable TF_CLI_CONFIG_FILE=$ABSOLUTE_PATH. This can help with local provider development. See https://developer.hashicorp.com/terraform/cli/config/environment-variables#tf_cli_config_file</description></item></channel></rss>