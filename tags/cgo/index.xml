<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Cgo on Today I Learned</title><link>https://skalt.github.io/til/tags/cgo/</link><description>Recent content in Cgo on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/cgo/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/09/</guid><description>&lt;p&gt;That &lt;code&gt;cgo&lt;/code&gt; will automagically ship a &lt;code&gt;C.sizeof_YourStruct&lt;/code&gt; for every C struct that you can reference as &lt;code&gt;C.YourStruct&lt;/code&gt;.
This is useful for pointer arithmetic via &lt;code&gt;unsafe.Pointer(uintptr(something) + uintptr(intIndex * C.sizeof_YourStruct))&lt;/code&gt;.&lt;/p&gt;</description></item></channel></rss>