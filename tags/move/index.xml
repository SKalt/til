<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>move on Today I Learned</title><link>https://skalt.github.io/til/tags/move/</link><description>Recent content in move on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/move/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2023/06/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/18/</guid><description>By default, a closure seems to live as long as its parent function unless you use the move keyword.
fn unmoved&amp;lt;&amp;#39;a&amp;gt;(arg: &amp;amp;&amp;#39;a str) -&amp;gt; impl Fn() + &amp;#39;a { let f = || println!(&amp;#34;unmoved: {}&amp;#34;, arg); f } fn moved&amp;lt;&amp;#39;a&amp;gt;(arg: &amp;amp;&amp;#39;a str) -&amp;gt; impl Fn() + &amp;#39;a { let f = move || println!(&amp;#34;moved: {}&amp;#34;, arg); f } fn main() { unmoved(&amp;#34;a&amp;#34;)() // does not compile moved(&amp;#34;b&amp;#34;)() // works fine } &amp;ndash; playground link</description></item></channel></rss>