<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Go on Today I Learned</title><link>https://skalt.github.io/til/tags/go/</link><description>Recent content in Go on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/09/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/05/</guid><description>&lt;p>about &lt;a href="https://pkg.go.dev/cmd/go#hdr-Build_constraints">go build constraints&lt;/a>. Add&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//go:build (booleanExprUsingTagNames)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>to the top of the conditionally-included file. The boolean expression can be composed of tags (passed via &lt;code>go build -tag &amp;lt;tag&amp;gt;...&lt;/code>) or expressions referencing the host or target os and arch.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/09/</guid><description>&lt;p>That &lt;code>cgo&lt;/code> will automagically ship a &lt;code>C.sizeof_YourStruct&lt;/code> for every C struct that you can reference as &lt;code>C.YourStruct&lt;/code>.
This is useful for pointer arithmetic via &lt;code>unsafe.Pointer(uintptr(something) + uintptr(intIndex * C.sizeof_YourStruct))&lt;/code>.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/03/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/07/</guid><description>&lt;p>That &lt;code>go mod tidy&lt;/code> needs to be followed by &lt;code>go mod vendor&lt;/code> to keep &lt;code>./vendor/modules.txt&lt;/code> up-to-date.
That &lt;code>go mod vendor&lt;/code> only pulls in files that are referenced by your current project.&lt;/p>
&lt;p>See &lt;a href="https://go.dev/ref/mod#vendoring">https://go.dev/ref/mod#vendoring&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/04/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/07/</guid><description>&lt;p>That any function named &lt;code>func init(){ ... }&lt;/code> runs on load of a module.
See &lt;a href="https://go.dev/ref/spec#Package_initialization">https://go.dev/ref/spec#Package_initialization&lt;/a>.
See also &lt;a href="https://www.digitalocean.com/community/tutorials/understanding-init-in-go">https://www.digitalocean.com/community/tutorials/understanding-init-in-go&lt;/a>.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/04/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/08/</guid><description>&lt;p>That &lt;code>select&lt;/code> can only be used to race communications operations (e.g. &lt;code>&amp;lt;- myChan&lt;/code>).
See &lt;a href="https://go.dev/ref/spec#Select_statements">https://go.dev/ref/spec#Select_statements&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/04/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/22/</guid><description>&lt;p>That Go has &lt;a href="https://go.dev/ref/spec#Label_scopes">labels&lt;/a> and can &lt;a href="https://go.dev/ref/spec#Goto_statements">&lt;code>goto label&lt;/code>&lt;/a>.
I&amp;rsquo;m not entirely sure what the usefulness of these is outside of &lt;code>switch&lt;/code> statements, but it&amp;rsquo;s still cool!&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/05/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/05/04/</guid><description>&lt;p>That a &lt;code>go.work&lt;/code> file can point to local &amp;ldquo;main modules&amp;rdquo; used for minimum-version selection.
&lt;code>go&lt;/code> will maintain a separate &lt;code>go.work.sum&lt;/code> file with the checksums of the workspace&amp;rsquo;s dependencies.
&lt;code>go work {init,use,edit}&lt;/code> manages the work-files.
&lt;code>$GOWORK&lt;/code> pointing to a file named like &lt;code>*.work&lt;/code> can switch between multiple workspace files.
See &lt;a href="https://go.dev/ref/mod#workspaces;">https://go.dev/ref/mod#workspaces;&lt;/a> the syntax of &lt;code>*.work&lt;/code> files is roughly equivalent to the syntax in &lt;code>go.mod&lt;/code>.&lt;/p>
&lt;hr>
&lt;p>That none of the following options ensure unused debug info is not included in rust wasm output:&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/08/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/08/19/</guid><description>&lt;p>That &lt;code>go build ./path/to/main.go&lt;/code> disregards other files in the same directory/package.
&lt;code>go build ./path/to&lt;/code> works fine.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/09/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/09/24/</guid><description>&lt;p>That you an render code blocks in Go doc comments by indenting the lines of code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Add two numbers.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// this&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// is a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// code block&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See &lt;a href="https://tip.golang.org/doc/comment#code">https://tip.golang.org/doc/comment#code&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/10/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/10/23/</guid><description>&lt;p>That&lt;/p>
&lt;blockquote>
&lt;p>An empty go.mod in a directory will cause that directory and all of its subdirectories to be excluded from the top-level Go module.&lt;/p>
&lt;p>&amp;ndash; &lt;a href="https://go.dev/wiki/Modules#can-an-additional-gomod-exclude-unnecessary-content-do-modules-have-the-equivalent-of-a-gitignore-file">https://go.dev/wiki/Modules#can-an-additional-gomod-exclude-unnecessary-content-do-modules-have-the-equivalent-of-a-gitignore-file&lt;/a>&lt;/p>&lt;/blockquote></description></item><item><title/><link>https://skalt.github.io/til/2024/11/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/11/25/</guid><description>&lt;p>That (1) go tries to bake VCS info into go binaries and (2) go still doesn&amp;rsquo;t understand git worktrees :/ and (3) the easiest way to get go builds to work in a git worktree or bare git repo is to&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">go env -w &lt;span class="nv">GOFLAGS&lt;/span>&lt;span class="o">=&lt;/span>-buildvcs&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;m not sure how global these flags are.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2025/01/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/01/30/</guid><description>&lt;p>That you can write golang examples that get run using &lt;code>go test&lt;/code>:&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">ExampleHello&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Output: hello&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The naming convention to declare examples for the package, a function F, a type T and method M on type T are:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Example&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">ExampleF&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">ExampleT&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">ExampleT_M&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;ndash; &lt;a href="https://pkg.go.dev/testing#hdr-Examples">https://pkg.go.dev/testing#hdr-Examples&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>I feel like this might be able to be combined with &lt;a href="https://go.dev/doc/comment#:~:text=a%20code%20block%20is%20a%20span%20of%20indented%20or%20blank%20lines%20not%20starting%20with%20a%20bullet%20list%20marker%20or%20numbered%20list%20marker.%20it%20is%20rendered%20as%20preformatted%20text">doc comments&lt;/a>.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2025/02/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/02/12/</guid><description>&lt;p>That &lt;code>defer&lt;/code> statements are block-scoped:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;end func&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// runs at end of function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;start func&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">defer&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;end block&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// runs at end of block&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;start block&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Output:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// start func&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// statt block&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// end block&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// end func&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>see &lt;a href="https://go.dev/play/p/2OYL2-g1iUE">https://go.dev/play/p/2OYL2-g1iUE&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2025/02/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/02/19/</guid><description>&lt;p>How to set build-time variables in &lt;code>go&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">go build -ldflags &lt;span class="s2">&amp;#34;-X importpath.name=value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See &lt;a href="https://pkg.go.dev/cmd/link">https://pkg.go.dev/cmd/link&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2025/04/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/04/25/</guid><description>&lt;p>Apparently, the blessed way to do prettier-style line-wrapping in Go is &lt;code>golines&lt;/code>:
&lt;a href="https://github.com/golang/vscode-go/issues/847#issuecomment-816992225">https://github.com/golang/vscode-go/issues/847#issuecomment-816992225&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2025/05/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/05/01/</guid><description>&lt;p>That wrapper types preserve type information in switch statements:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">type&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">y&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;asdf&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">z&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;cool&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;uh&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://go.dev/play/p/VkDckf3vp_O">https://go.dev/play/p/VkDckf3vp_O&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2025/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/05/09/</guid><description>&lt;p>Clicking &amp;ldquo;Debug Test&amp;rdquo; in VSCode doesn&amp;rsquo;t use the configuration in &lt;code>launch.json&lt;/code>: &lt;a href="https://github.com/golang/vscode-go/wiki/debugging#:~:text=the%20%22debug%20test%22%20codelens%20and%20the%20test%20ui%20do%20not%20use%20the%20launch.json%20configuration">https://github.com/golang/vscode-go/wiki/debugging#:~:text=the%20%22debug%20test%22%20codelens%20and%20the%20test%20ui%20do%20not%20use%20the%20launch.json%20configuration&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2025/06/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/06/14/</guid><description>&lt;p>That mobile OS&amp;rsquo;s often do not define a &lt;code>$HOME&lt;/code> variable:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// On some geese the home directory is not always defined.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GOOS&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;android&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;/sdcard&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;ios&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Side note: hats off to the programmer that called the plural of &lt;code>GOOS&lt;/code>es &amp;ldquo;geese&amp;rdquo;.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2025/06/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2025/06/19/</guid><description>&lt;p>That go&amp;rsquo;s &lt;code>runtime/debug&lt;/code> package keeps track of the version of all modules:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;runtime/debug&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">info&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">debug&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ReadBuildInfo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;info: %#v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">info&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// info: &amp;amp;debug.BuildInfo{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// GoVersion: &amp;#34;go1.24.4&amp;#34;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Path: &amp;#34;play&amp;#34;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Main:debug.Module{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Path:&amp;#34;play&amp;#34;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Version:&amp;#34;(devel)&amp;#34;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Sum:&amp;#34;&amp;#34;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Replace:(*debug.Module)(nil),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// },&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Deps:[]*debug.Module(nil),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Settings:[]debug.BuildSetting{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// debug.BuildSetting{Key:&amp;#34;-buildmode&amp;#34;, Value:&amp;#34;exe&amp;#34;},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// debug.BuildSetting{Key:&amp;#34;-compiler&amp;#34;, Value:&amp;#34;gc&amp;#34;},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// debug.BuildSetting{Key:&amp;#34;-tags&amp;#34;, Value:&amp;#34;faketime&amp;#34;},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// debug.BuildSetting{Key:&amp;#34;CGO_ENABLED&amp;#34;, Value:&amp;#34;0&amp;#34;},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// debug.BuildSetting{Key:&amp;#34;GOARCH&amp;#34;, Value:&amp;#34;amd64&amp;#34;},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// debug.BuildSetting{Key:&amp;#34;GOOS&amp;#34;, Value:&amp;#34;linux&amp;#34;},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// debug.BuildSetting{Key:&amp;#34;GOAMD64&amp;#34;, Value:&amp;#34;v1&amp;#34;}}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://go.dev/play/p/RPP3ld4kPmD">https://go.dev/play/p/RPP3ld4kPmD&lt;/a>&lt;/p></description></item></channel></rss>