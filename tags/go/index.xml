<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Go on Today I Learned</title><link>https://skalt.github.io/til/tags/go/</link><description>Recent content in Go on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/09/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/05/</guid><description>&lt;p>about &lt;a href="https://pkg.go.dev/cmd/go#hdr-Build_constraints">go build constraints&lt;/a>. Add&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//go:build (booleanExprUsingTagNames)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>to the top of the conditionally-included file. The boolean expression can be composed of tags (passed via &lt;code>go build -tag &amp;lt;tag&amp;gt;...&lt;/code>) or expressions referencing the host or target os and arch.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2021/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/09/</guid><description>&lt;p>That &lt;code>cgo&lt;/code> will automagically ship a &lt;code>C.sizeof_YourStruct&lt;/code> for every C struct that you can reference as &lt;code>C.YourStruct&lt;/code>.
This is useful for pointer arithmetic via &lt;code>unsafe.Pointer(uintptr(something) + uintptr(intIndex * C.sizeof_YourStruct))&lt;/code>.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/03/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/07/</guid><description>&lt;p>That &lt;code>go mod tidy&lt;/code> needs to be followed by &lt;code>go mod vendor&lt;/code> to keep &lt;code>./vendor/modules.txt&lt;/code> up-to-date.
That &lt;code>go mod vendor&lt;/code> only pulls in files that are referenced by your current project.&lt;/p>
&lt;p>See &lt;a href="https://go.dev/ref/mod#vendoring">https://go.dev/ref/mod#vendoring&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/04/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/07/</guid><description>&lt;p>That any function named &lt;code>func init(){ ... }&lt;/code> runs on load of a module.
See &lt;a href="https://go.dev/ref/spec#Package_initialization">https://go.dev/ref/spec#Package_initialization&lt;/a>.
See also &lt;a href="https://www.digitalocean.com/community/tutorials/understanding-init-in-go">https://www.digitalocean.com/community/tutorials/understanding-init-in-go&lt;/a>.&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/04/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/08/</guid><description>&lt;p>That &lt;code>select&lt;/code> can only be used to race communications operations (e.g. &lt;code>&amp;lt;- myChan&lt;/code>).
See &lt;a href="https://go.dev/ref/spec#Select_statements">https://go.dev/ref/spec#Select_statements&lt;/a>&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/04/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/22/</guid><description>&lt;p>That Go has &lt;a href="https://go.dev/ref/spec#Label_scopes">labels&lt;/a> and can &lt;a href="https://go.dev/ref/spec#Goto_statements">&lt;code>goto label&lt;/code>&lt;/a>.
I&amp;rsquo;m not entirely sure what the usefulness of these is outside of &lt;code>switch&lt;/code> statements, but it&amp;rsquo;s still cool!&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/05/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/05/04/</guid><description>&lt;p>That a &lt;code>go.work&lt;/code> file can point to local &amp;ldquo;main modules&amp;rdquo; used for minimum-version selection.
&lt;code>go&lt;/code> will maintain a separate &lt;code>go.work.sum&lt;/code> file with the checksums of the workspace&amp;rsquo;s dependencies.
&lt;code>go work {init,use,edit}&lt;/code> manages the work-files.
&lt;code>$GOWORK&lt;/code> pointing to a file named like &lt;code>*.work&lt;/code> can switch between multiple workspace files.
See &lt;a href="https://go.dev/ref/mod#workspaces;">https://go.dev/ref/mod#workspaces;&lt;/a> the syntax of &lt;code>*.work&lt;/code> files is roughly equivalent to the syntax in &lt;code>go.mod&lt;/code>.&lt;/p>
&lt;hr>
&lt;p>That none of the following options ensure unused debug info is not included in rust wasm output:&lt;/p></description></item><item><title/><link>https://skalt.github.io/til/2024/08/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/08/19/</guid><description>&lt;p>That &lt;code>go build ./path/to/main.go&lt;/code> disregards other files in the same directory/package.
&lt;code>go build ./path/to&lt;/code> works fine.&lt;/p></description></item></channel></rss>