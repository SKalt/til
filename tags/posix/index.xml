<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posix on Today I Learned</title><link>https://skalt.github.io/til/tags/posix/</link><description>Recent content in Posix on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/posix/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/09/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/06/</guid><description>&lt;p&gt;about &lt;code&gt;PATH_MAX&lt;/code&gt;: the part of the POSIX standard which determines the maximum number of bytes allowed in an absolute path. In Linux, &lt;code&gt;PATH_MAX&lt;/code&gt; is 4096 &lt;a href="https://stackoverflow.com/a/9449307/6571327"&gt;[src]&lt;/a&gt;, but it&amp;rsquo;s possible to construct longer paths if you don&amp;rsquo;t care about some (most) utilities that use the current working directory to fail due to buffer overflow.&lt;/p&gt;
&lt;p&gt;Also, I learned that &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_file_systems#Limits"&gt;most filesystems restrict file names to 255 bytes&lt;/a&gt;.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/04/</guid><description>&lt;p&gt;that different versions of &lt;code&gt;sort(1)&lt;/code&gt; have different sorting presets.
For example, on ubuntu 20.04 vs debian buster, &lt;code&gt;sort&lt;/code&gt; will swap the order of how it sorts &lt;code&gt;_&lt;/code&gt;s.
These differences can be resolved by passing &lt;code&gt;--unique --dictionary-order --stable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Bonus: &lt;code&gt;-h/--human-numeric-sort&lt;/code&gt; can sort SI suffixes.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2022/01/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/31/</guid><description>&lt;p&gt;that the &lt;code&gt;fmt&lt;/code&gt; utility exists. It seems to fold or center text according to a target width.&lt;/p&gt;</description></item><item><title/><link>https://skalt.github.io/til/2023/10/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/31/</guid><description>&lt;p&gt;That POSIX shell has configuration option, &lt;a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_25_03"&gt;&lt;code&gt;set -a&lt;/code&gt; or &lt;code&gt;set -o allexport&lt;/code&gt;&lt;/a&gt; that exports all assigned variables.
This simplifies using &lt;code&gt;.env&lt;/code&gt; files in &lt;code&gt;.envrc&lt;/code&gt; files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# evaluate a .env file, if it exists&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f .env &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;set&lt;/span&gt; -a &lt;span class="c1"&gt;# assigning a variable exports the variable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# shellcheck disable=SC1091&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;source&lt;/span&gt; .env
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;set&lt;/span&gt; +a
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;That JS has a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw"&gt;&lt;code&gt;String.raw&lt;/code&gt;&lt;/a&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates"&gt;template literal tag function&lt;/a&gt; that unescapes escape sequences in a backtick-string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="sb"&gt;`\t\r\n`&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; &amp;#34;\\t\\r\\n&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item></channel></rss>