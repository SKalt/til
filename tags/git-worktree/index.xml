<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>git-worktree on Today I Learned</title><link>https://skalt.github.io/til/tags/git-worktree/</link><description>Recent content in git-worktree on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/git-worktree/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2022/12/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/12/05/</guid><description>That NFC in the context of security keys stands for Near Field Communication: a (usually bluetooth) connection that lets your security key authenticate with a nearby device.
That git-worktree(1) is pretty handy! During the process of a refactor, I was able to run
git worktree add --checkout $local_path $old_branch Explore some deleted/significantly altered files, then inspect the diff between the current and old state of the files!
See also: https://jmtd.net/log/worktrees/ https://git-scm.</description></item><item><title/><link>https://skalt.github.io/til/2023/03/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/09/</guid><description>This was a bit of a rollercoaster morning: (1) I tried git worktree add $branch, and it was pretty convenient! (2) until I got a pre-commit error, then I got error: unable to read $HASH on git status (3) which led me to discover git fsck --full --name-objects, which is currently yelling about error: $HASH: invalid sha1 pointer in cache-tree</description></item><item><title/><link>https://skalt.github.io/til/2023/07/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/07/30/</guid><description>Getting the top-level directory of the relevant git worktree #!/usr/bin/env bash # set up a dummy repo set -euo pipefail experiment_dir=&amp;#34;$(mktemp -d --tmpdir test_repo.XXX)&amp;#34; git clone --recurse-submodules git@github.com:SKalt/dummy_repo.git &amp;#34;$experiment_dir&amp;#34; cd &amp;#34;$experiment_dir&amp;#34; git pull --recurse-submodules=yes git checkout -b brnch &amp;amp;&amp;amp; git checkout - # set up a dummy branch git worktree add wrktr brnch # add a wortree cd wrktr &amp;amp;&amp;amp; git submodule update --init --recursive # init the recursive submodules in the worktree tree .</description></item></channel></rss>