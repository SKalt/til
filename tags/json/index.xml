<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>json on Today I Learned</title><link>https://skalt.github.io/til/tags/json/</link><description>Recent content in json on Today I Learned</description><generator>Hugo -- gohugo.io</generator><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/tags/json/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2022/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/31/</guid><description>About creating json values using sqlite3&amp;rsquo;s built-in json value support.
Example:
SELECT json_object(&amp;#39;foo&amp;#39;, json_object(&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;)); -- {&amp;#34;foo&amp;#34;:{&amp;#34;bar&amp;#34;:&amp;#34;baz&amp;#34;}} SELECT json_object(&amp;#39;foo&amp;#39;, json_array(&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;)); -- {&amp;#34;foo&amp;#34;:[&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;]} -- works with nested queries too SELECT json_object(&amp;#39;foo&amp;#39;, (SELECT json_array(&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;))); -- {&amp;#34;foo&amp;#34;:[&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;]} CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c); INSERT INTO t1 VALUES (1, &amp;#39;A&amp;#39;, &amp;#39;one&amp;#39; ), (2, &amp;#39;B&amp;#39;, &amp;#39;two&amp;#39; ), (3, &amp;#39;C&amp;#39;, &amp;#39;three&amp;#39;), (4, &amp;#39;D&amp;#39;, &amp;#39;one&amp;#39; ), (5, &amp;#39;A&amp;#39;, &amp;#39;two&amp;#39; ), (6, &amp;#39;B&amp;#39;, &amp;#39;three&amp;#39;), (7, &amp;#39;C&amp;#39;, &amp;#39;one&amp;#39; ); SELECT json_group_array(b) FROM t1 GROUP BY c; -- [&amp;#34;A&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;C&amp;#34;] -- [&amp;#34;C&amp;#34;,&amp;#34;B&amp;#34;] -- [&amp;#34;B&amp;#34;,&amp;#34;A&amp;#34;] Caveat: you sometimes have to wrap nested values from nested queries in json(), else they&amp;rsquo;ll be escaped as json string literals.</description></item></channel></rss>