<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Today I Learned</title><link>https://skalt.github.io/til/</link><description>Recent content on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/12/</guid><description>TIL that terminals attached to interactive docker containers don&amp;rsquo;t necesarily respect ANSI escape codes. I&amp;rsquo;m still not 100% sure what causes the terminal to respect ANSI escape codes or not, but test -t 1 didn&amp;rsquo;t seem to correctly discriminate.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/13/</guid><description>That pickle.loads(pickle.dumps(obj)) is faster than copy.deepcopy(obj) Learned from Simon Willison&amp;rsquo;s twitter</description></item><item><title/><link>https://skalt.github.io/til/2021/07/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/14/</guid><description>that Cmd+D selects the next occurence of the currently-highlighted text in VS Code! Thanks to Mark Brewer for teaching me this!</description></item><item><title/><link>https://skalt.github.io/til/2021/07/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/22/</guid><description>about const enums in typescript, which get compiled to their values rather than getting represented as a mapping object. See https://www.typescriptlang.org/docs/handbook/enums.html#const-enums.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/24/</guid><description>How to stream large responses using the Javascript Fetch API:
const response = await fetch(url); const reader = response.body.getReader(); while (true) { const { value, done } = await reader.read(); if (done) break; console.log(&amp;#39;Received&amp;#39;, value); } console.log(&amp;#39;Response fully received&amp;#39;); Also: the circumstances under which ~/.*profile files are run: only if you log in.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/25/</guid><description>You can create new google docs/spreadsheets/presentations, office365 docs/sheets/presentations, and github repos/gists/codespaces by accessing specific URLs in the browser:
G Suite docs: https://doc.new, https://docs.new sheets: https://sheet.new, https://sheets.new slides: http://slide.new, http://slides.new Office 365 docs: https://word.new sheets: https://excel.new slides: https://ppt.new github https://repo.new https://gist.new https://codespace.new source: https://twitter.com/rothgar/status/1419339782258184192</description></item><item><title/><link>https://skalt.github.io/til/2021/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/31/</guid><description>That you can use git grep to search for a string in a git repo.</description></item><item><title/><link>https://skalt.github.io/til/2021/08/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/05/</guid><description>that running python with the -O flag disables assert statements</description></item><item><title/><link>https://skalt.github.io/til/2021/08/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/12/</guid><description>about a new source of standard-ish python functionality: https://github.com/mahmoud/boltons</description></item><item><title/><link>https://skalt.github.io/til/2021/09/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/05/</guid><description>about go build constraints. Add
//go:build (booleanExprUsingTagNames) to the top of the conditionally-included file. The boolean expression can be composed of tags (passed via go build -tag &amp;lt;tag&amp;gt;...) or expressions referencing the host or target os and arch.</description></item><item><title/><link>https://skalt.github.io/til/2021/09/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/06/</guid><description>about PATH_MAX: the part of the POSIX standard which determines the maximum number of bytes allowed in an absolute path. In Linux, PATH_MAX is 4096 [src], but it&amp;rsquo;s possible to construct longer paths if you don&amp;rsquo;t care about some (most) utilities that use the current working directory to fail due to buffer overflow.
Also, I learned that most filesystems restrict file names to 255 bytes.</description></item><item><title/><link>https://skalt.github.io/til/2021/09/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/15/</guid><description>That you can, technically, write inline comments in bash. Specifically, you have to put the comments in a subshell:
echo abc `#put your comment here` \ def `#another chance for a comment` \ xyz etc ^ from https://stackoverflow.com/a/23872003/6571327</description></item><item><title/><link>https://skalt.github.io/til/2021/09/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/21/</guid><description>That the IANA suggests 49152–65535 (215 + 214 to 216 − 1) for dynamic or private ports. source: https://en.wikipedia.org/wiki/Ephemeral_port#Range</description></item><item><title/><link>https://skalt.github.io/til/2021/09/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/24/</guid><description>that you can find the version of debian used by your current ubuntu version by running cat /etc/debian_version. Even better, you can source /etc/os-release and get $ID and $VERSION_ID variables. Here&amp;rsquo;s what&amp;rsquo;s in the os-release for Ubuntu 20.04:
NAME=&amp;#34;Ubuntu&amp;#34; VERSION=&amp;#34;20.04.3 LTS (Focal Fossa)&amp;#34; ID=ubuntu ID_LIKE=debian PRETTY_NAME=&amp;#34;Ubuntu 20.04.3 LTS&amp;#34; VERSION_ID=&amp;#34;20.04&amp;#34; HOME_URL=&amp;#34;https://www.ubuntu.com/&amp;#34; SUPPORT_URL=&amp;#34;https://help.ubuntu.com/&amp;#34; BUG_REPORT_URL=&amp;#34;https://bugs.launchpad.net/ubuntu/&amp;#34; PRIVACY_POLICY_URL=&amp;#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;#34; VERSION_CODENAME=focal UBUNTU_CODENAME=focal Sources: https://askubuntu.com/a/445496/505362 and the source code at https://dot.net/v1/dotnet-installer.sh</description></item><item><title/><link>https://skalt.github.io/til/2021/10/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/01/</guid><description>That there&amp;rsquo;s a postgres keyword DEALLOCATE to remove prepared statements from memory: https://www.postgresql.org/docs/current/sql-deallocate.html</description></item><item><title/><link>https://skalt.github.io/til/2021/10/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/02/</guid><description>that you can hold shift+alt (linux) or shift+opt (mac) and click to select box of rows and columns in VS Code. See https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_column-box-selection</description></item><item><title/><link>https://skalt.github.io/til/2021/10/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/04/</guid><description>that different versions of sort(1) have different sorting presets. For example, on ubuntu 20.04 vs debian buster, sort will swap the order of how it sorts _s. These differences can be resolved by passing --unique --dictionary-order --stable.
Bonus: -h/--human-numeric-sort can sort SI suffixes.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/07/</guid><description>That GNU awk has a networking stack: https://www.gnu.org/software/gawk/manual/gawkinet/gawkinet.html</description></item><item><title/><link>https://skalt.github.io/til/2021/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/09/</guid><description>That cgo will automagically ship a C.sizeof_YourStruct for every C struct that you can reference as C.YourStruct. This is useful for pointer arithmetic via unsafe.Pointer(uintptr(something) + uintptr(intIndex * C.sizeof_YourStruct)).</description></item><item><title/><link>https://skalt.github.io/til/2021/10/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/12/</guid><description>about the shell until keyword, which is equivalent to while !.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/13/</guid><description>about reset, which resets your terminal after a series of undesired ANSI escape codes. I also learned about echo -e &amp;quot;\e&amp;quot; meaning &amp;ldquo;interpret backslash escape codes&amp;rdquo; (-e) and &amp;quot;\e&amp;quot; == &amp;quot;\033&amp;quot;.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/19/</guid><description>that you can write multiple lines to a file using a cat &amp;gt; path/to/file with argument, like
cat &amp;gt; /tmp/file subsequent typed input is still stdin, which is being read by `cat` and so will be written to the file ^C # cancels `cat` writing to the file</description></item><item><title/><link>https://skalt.github.io/til/2021/10/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/22/</guid><description>That there are special CSS classes for theme colors in MSFT PowerPoint: https://www.brightcarbon.com/blog/responsive-svgs-and-smart-icons-in-powerpoint/</description></item><item><title/><link>https://skalt.github.io/til/2021/10/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/27/</guid><description>About the svg view element: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view It can be used to create views referable like
&amp;lt;svg id=&amp;#34;total&amp;#34;&amp;gt; &amp;lt;view id=&amp;#34;view-1&amp;#34; viewBox=&amp;#34;...&amp;#34; /&amp;gt; &amp;lt;circle cx=&amp;#34;1&amp;#34; cy=&amp;#34;1&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; &amp;lt;img src=&amp;#34;#view-1&amp;#34; /&amp;gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/28/</guid><description>That you can detect the terminal you&amp;rsquo;re running in (including vscode) by checking the value of &amp;quot;${TERM_PROGRAM:-}&amp;quot;. The VS Code integrated termial always has a $TERM_PROGRAM of vscode.
Source: https://stackoverflow.com/a/59231654/6571327</description></item><item><title/><link>https://skalt.github.io/til/2021/10/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/30/</guid><description>about terminfo, the terminal information database: it can be queried to find all kinds of fun facts about your current terminal. For instance,
tput cols =&amp;gt; number of columns in the current terminal tput colors =&amp;gt; number of colors the terminal supports tput setaf =&amp;gt; generate ansi codes to set the foregrount color in the terminal Also, infocmp screen dumps a bunch of other related information drawn from terminfo.</description></item><item><title/><link>https://skalt.github.io/til/2021/11/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/03/</guid><description>That
There are two accepted formats for these strings: plain keyword/value strings and URIs. URIs generally follow RFC 3986, except that multi-host connection strings are allowed.
&amp;ndash; https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING
you can pass a application_name parameter to a connection string &amp;ndash; https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-APPLICATION-NAME</description></item><item><title/><link>https://skalt.github.io/til/2021/11/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/05/</guid><description>That sudo has a webpage and an unfortunate mascot: https://www.sudo.ws/</description></item><item><title/><link>https://skalt.github.io/til/2021/11/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/23/</guid><description>locate searches all filenames for a keyword using a database which you can update updatedb. whereis searches for binaries using the same mechanism.
https://www.madebygps.com/an-intro-to-finding-things-in-linux/</description></item><item><title/><link>https://skalt.github.io/til/2021/11/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/29/</guid><description>that there&amp;rsquo;s a pg_sleep(seconds) function: see https://til.hashrocket.com/posts/8a6f68519d-sleeping-in-postgresql</description></item><item><title/><link>https://skalt.github.io/til/2021/12/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/12/01/</guid><description>that you can write any file in your git history using git show &amp;lt;ref&amp;gt;:&amp;lt;path&amp;gt;.
See https://juplo.de/cat-any-file-in-any-commit-with-git/</description></item><item><title/><link>https://skalt.github.io/til/2022/01/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/04/</guid><description>about the css :target selector (matches the element with the id specified by the url document-fragment) and the svg &amp;lt;view&amp;gt; element, which specifies a viewBox and can have an id.
see https://css-tricks.com/svg-fragment-identifiers-work/</description></item><item><title/><link>https://skalt.github.io/til/2022/01/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/09/</guid><description>1: That you can set statement timeouts:
ALTER DATABASE mydatabase SET statement_timeout = &amp;#39;60s&amp;#39;; Source: https://blog.crunchydata.com/blog/five-tips-for-a-healthier-postgres-database-in-the-new-year
2: that you can query your cache and index hit metrics (src)
3: writes to indexed columns don&amp;rsquo;t necessarily update indices:
If an indexed column has to have new values inserted, or existing values updated or deleted, the corresponding index does get updated as well. Ironically, that might make queries take more time to evaluate.</description></item><item><title/><link>https://skalt.github.io/til/2022/01/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/10/</guid><description>Of the html table &amp;lt;caption&amp;gt; element</description></item><item><title/><link>https://skalt.github.io/til/2022/01/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/11/</guid><description>that you can pass default values to css variable references, e.g. var(--button-color, pink)
Also,
If the SVG fragment identifier addresses a time segment (e.g., MyDrawing.svg#t=10),then the initial view into the SVG document is established as if no fragment identifier was provided. The rendering of the SVG Document shall be as if the setCurrentTime method on the SVG Document element had been called with the begin time value from the fragment identifier.</description></item><item><title/><link>https://skalt.github.io/til/2022/01/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/13/</guid><description>In sqlite, all rows have a 64-bit ROWID (with some exceptions). Putting those aside, if you have a single-column integer primary key and use the magic words PRIMARY KEY INTEGER then the pkey becomes an alias for rowid, greatly speeding up lookups. I&amp;rsquo;m not sure how this affects insertions, though.
https://sqlite.org/lang_createtable.html#rowids_and_the_integer_primary_key</description></item><item><title/><link>https://skalt.github.io/til/2022/01/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/26/</guid><description>That you can extract sensitive output values from terraform, you can terraform output $output_name
&amp;ndash; see https://learn.hashicorp.com/tutorials/terraform/outputs#redact-sensitive-outputs
Also, sqlite provides a PRAGMA user_version=&amp;lt;number&amp;gt; to let applications store and retrieve a versioning number. See https://sqlite.org/pragma.html#pragma_user_version</description></item><item><title/><link>https://skalt.github.io/til/2022/01/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/31/</guid><description>that the fmt utility exists. It seems to fold or center text according to a target width.</description></item><item><title/><link>https://skalt.github.io/til/2022/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/08/</guid><description>In zsh, ls *(n) will &amp;ldquo;human-sort&amp;rdquo; mostly-numeric filenames.
https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers
https://twitter.com/nedbat/status/1491032300800421892</description></item><item><title/><link>https://skalt.github.io/til/2022/02/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/14/</guid><description>that adding a ! suffix tells tsc that the expression to the left doesn&amp;rsquo;t evaluate to null
https://mariusschulz.com/blog/assertion-functions-in-typescript#using-the-non-null-assertion-operator
that going to about:profile in firefox lets you create separate firefox profiles.</description></item><item><title/><link>https://skalt.github.io/til/2022/02/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/18/</guid><description>you can import from a parent-module using from ... import .</description></item><item><title/><link>https://skalt.github.io/til/2022/02/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/25/</guid><description>that you can use variables in make targets, e.g.
path/${TO}/file: path/${TO}/other/file</description></item><item><title/><link>https://skalt.github.io/til/2022/02/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/28/</guid><description>If you want to get a list of aws:principalTags/* values that can be used in your IAM conditions, search CloudTrail events for Event Name: AssumeRoleWithSaml.</description></item><item><title/><link>https://skalt.github.io/til/2022/03/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/06/</guid><description>About git-sparse-checkout:
https://linuxhint.com/what-is-git-sparse-checkout/ https://git-scm.com/docs/git-sparse-checkout The general script for doing a sparse checkout is:
#!/usr/bin/env bash git_url=&amp;#34;${git_url:?required}&amp;#34; target_dir=&amp;#34;${target_dir:?required}&amp;#34; is_git_dir() { git rev-parse; } init() { mkdir -p &amp;#34;$target_dir&amp;#34; &amp;amp;&amp;amp; cd &amp;#34;$target_dir&amp;#34; if ! is_git_dir; then git init &amp;amp;&amp;amp; git remote add -f origin &amp;#34;$git_url&amp;#34; fi git config core.sparseCheckout true &amp;amp;&amp;amp; git sparse-checkout init &amp;amp;&amp;amp; git sparse-checkout set test &amp;amp;&amp;amp; git pull origin master } see also: https://about.gitlab.com/blog/2020/03/13/partial-clone-for-massive-repositories/</description></item><item><title/><link>https://skalt.github.io/til/2022/03/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/08/</guid><description>random: turns out HTML comments are valid line-comments in JS: https://smitop.com/post/js-html-comments/</description></item><item><title/><link>https://skalt.github.io/til/2022/03/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/17/</guid><description>About the terraform count meta-argument:
you can pass a count = n to any resource-block to create n copies of the resource you can differentiate each of the resources using ${count.index}</description></item><item><title/><link>https://skalt.github.io/til/2022/03/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/18/</guid><description>How to check if a debian package is installed:
deb_pkg_is_installed() { sudo dpkg --get-selections &amp;#34;$1&amp;#34; | grep -q &amp;#34;$1&amp;#34;; }</description></item><item><title/><link>https://skalt.github.io/til/2022/03/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/19/</guid><description>How to pass a multi-character field separator to awk:
awk -F &amp;#39;[ :]+&amp;#39; &amp;#39;{print $1, $3}&amp;#39; # character set: [ :] # repetition: +</description></item><item><title/><link>https://skalt.github.io/til/2022/03/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/22/</guid><description>You can replace the nth instance of a pattern on a line with sed:
; printf &amp;#34;a\tb\tc\n&amp;#34; | sed &amp;#39;s/\t/\t~/2&amp;#39; # a b ~c</description></item><item><title/><link>https://skalt.github.io/til/2022/04/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/04/</guid><description>to run terraform output $output_name to print a named output</description></item><item><title/><link>https://skalt.github.io/til/2022/04/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/06/</guid><description>That python f-strings can do
date and time formatting: f&amp;quot;{today:%Y-%m-%d}&amp;quot; have a variable-debugging format: f&amp;quot;{x = }, {y = }&amp;quot; can use __repr__ rather than __str__: f&amp;quot;{user!r}&amp;quot; can be nested: f&amp;quot;output: {value:{width}.{precision}}&amp;quot; https://martinheinz.dev/blog/70 Of the window.prompt() method: https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt</description></item><item><title/><link>https://skalt.github.io/til/2022/04/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/08/</guid><description>What hardlinks are: direct references to inodes. A hardlink can&amp;rsquo;t reference filesystem objects that don&amp;rsquo;t have inodes, such as directories or ports, and aren&amp;rsquo;t portable across different hardware devices even with the same filesystem layout (I think).
Also, the opposite of mount(8) is not unmount, it&amp;rsquo;s umount &amp;gt;:(
gzip -vt $path_to_file checks the validity of a gzip archive: see https://unix.stackexchange.com/questions/359303/check-validity-of-gz-file</description></item><item><title/><link>https://skalt.github.io/til/2022/04/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/11/</guid><description>You can use journalctl -u ${service_name}.service --since ${time:-today} to view the logs of a systemd service: https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</description></item><item><title/><link>https://skalt.github.io/til/2022/04/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/13/</guid><description>That a rust if-statement can have a return type
let x: u32 = 123; let stmt_result = if x % 2 == 0 { Ok(&amp;#34;even steven&amp;#34;) } else { Err(&amp;#34;odd steven&amp;#34;) }; assert_eq!(x, Err(&amp;#34;odd steven&amp;#34;));</description></item><item><title/><link>https://skalt.github.io/til/2022/04/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/20/</guid><description>tar -ztvf file.tar.gz will list the files in tar.gz</description></item><item><title/><link>https://skalt.github.io/til/2022/04/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/22/</guid><description>that there&amp;rsquo;s a scheduled send option in slack. It&amp;rsquo;s the first option in the dropdown next to the send button.</description></item><item><title/><link>https://skalt.github.io/til/2022/04/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/29/</guid><description>how to check the last apt update time:
last_update=&amp;#34;$(stat --format=%Y /var/cache/apt/pkgcache.bin)&amp;#34; https://askubuntu.com/a/410259/505362</description></item><item><title/><link>https://skalt.github.io/til/2022/04/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/30/</guid><description>That there&amp;rsquo;s an IETF spec for CSVs/TSVs, and it uses doubled double-quotes as quote-escapes, as SQL does https://datatracker.ietf.org/doc/html/rfc4180#section-2</description></item><item><title/><link>https://skalt.github.io/til/2022/05/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/03/</guid><description>aws policy documents can change the order of items within permissions arrays, but that&amp;rsquo;s safe to ignore:
Order is lost for data aws_iam_policy_document Policy elements that are syntactically lists but semantically sets should have their order ignored Perpetual diffs / Objects have changed outside of Terraform tracking ticket Also, that &amp;amp; types take 8 bytes = 64 bits on 64-bit systems
use std::mem; pub struct Foo { bar: String, // 24 baz: usize, // 8 } pub struct Quux&amp;lt;&amp;#39;a&amp;gt; { foo: &amp;amp;&amp;#39;a Foo, bar: usize, } fn main() { println!</description></item><item><title/><link>https://skalt.github.io/til/2022/05/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/04/</guid><description>Not to use BETWEEN for timestamps Not to use char(n), or varchar(n), since they&amp;rsquo;re not natively fixed-width and will defy expectations. See https://wiki.postgresql.org/wiki/Don't_Do_This
Also, I learned that you can&amp;rsquo;t run chsh(1) with sudo; chsh needs to run as the user who&amp;rsquo;s changing their shell.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/05/</guid><description>To prefer async context managers or asyncio.run() instead of creating+managing event loops natively.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/09/</guid><description>that sudo can be configured with the visudo command and that sudo can produce audit logs. See https://www.sudo.ws/posts/2022/05/sudo-for-blue-teams-how-to-control-and-log-better/
that there&amp;rsquo;s an Element.closest(selector) method, which means you can run this function to set the url to the closest link to an element:
((el) =&amp;gt; { let id = el.closest(&amp;#34;[id]&amp;#34;)?.id; if (!id) return; else location.hash = id; })($0); that you can use
SELECT /*...*/ FROM one_table JOIN other_table USING (common_column) as shorthand for one_table.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/10/</guid><description>That you can call time(1) to time how long a shell command takes, like so:
; time terraform fmt -write=true -recursive . # terraform fmt -write=true -recursive . 0.10s user 0.23s system 24% cpu 1.377 total</description></item><item><title/><link>https://skalt.github.io/til/2022/05/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/16/</guid><description>that gzip(1), by default, includes file mtimes. The flag to prevent gzip from zipping non-deterministically is gzip --no-name or gzip -n.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/18/</guid><description>The term &amp;ldquo;brochureware&amp;rdquo;: &amp;ldquo;simply listing products and services on a [static] Web site&amp;rdquo;. https://en.wikipedia.org/wiki/Brochureware</description></item><item><title/><link>https://skalt.github.io/til/2022/05/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/23/</guid><description>aarch64 is a 64-bit version of armv7 (which seems to be 32-bit). Thus, aarch64 = arm64 ~= armv8
AArch64 is the 64-bit state introduced in the Armv8-A architecture (https://en.wikipedia.org/wiki/ARM_architecture#ARMv8-A). The 32-bit state which is backwards compatible with Armv7-A and previous 32-bit Arm architectures is referred to as AArch32. Therefore the GNU triplet for the 64-bit ISA is aarch64. The Linux kernel community chose to call their port of the kernel to this architecture arm64 rather than aarch64, so that&amp;rsquo;s where some of the arm64 usage comes from.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/30/</guid><description>How to write hugo templates. Hugo seems to require RTFM to get a grasp on the functions and variables available in its DSL.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/31/</guid><description>That sql has assertions:
CREATE ASSERTION &amp;lt;Constraint name&amp;gt; CHECK (search condition) [ &amp;lt;constraint attributes&amp;gt; ] see https://crate.io/docs/sql-99/en/latest/chapters/20.html#create-assertion-statement.
h/t https://www.scattered-thoughts.net/log/0024/ for bringing that to my attention.
Also, from the weekend: in postgres, at least, you can call TABLE :table_name; directly to SELECT * FROM :table_name;
Also: how to look up a domain name from an ip:
reverse_ip_lookup() { ip_address=&amp;#34;$1&amp;#34; dig -x $ip_address +noall +answer } Also: how to audit AWS VPC flow logs from CloudWatch Log Insights: use the example queries in the right sidebar.</description></item><item><title/><link>https://skalt.github.io/til/2022/06/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/01/</guid><description>That pg_dumpall exists. That you need to use pg_dumpall to dump tablespaces, roles, and subscriptions. That pg_dumpall will dump the postgres role by default, causing resultant dump to fail to restore. Fortunately, I&amp;rsquo;m able to grep -ve '^CREATE ROLE postgres</description></item><item><title/><link>https://skalt.github.io/til/2022/06/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/02/</guid><description>How to create a JS BigInt value:
A BigInt value, also sometimes just called a BigInt, is a bigint primitive, created by appending n to the end of an integer literal, or by calling the BigInt() constructor (but without the new operator) and giving it an integer value or string value. &amp;ndash; https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt</description></item><item><title/><link>https://skalt.github.io/til/2022/06/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/06/</guid><description>that chickens are native to tropical jungles in south-east Asia.
Source: https://www.theguardian.com/science/2022/jun/06/chickens-were-first-tempted-down-from-trees-by-rice-research-suggests</description></item><item><title/><link>https://skalt.github.io/til/2022/06/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/07/</guid><description>That 1Password has a separate SSH key type! https://developer.1password.com/docs/ssh/manage-keys/
Also, that make has a MAKEFLAGS variable that can be used in recursive calls to make: see https://earthly.dev/blog/make-flags/. This also means you can set -r, which eliminates default rules and file actions.</description></item><item><title/><link>https://skalt.github.io/til/2022/06/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/08/</guid><description>that you can write raise SomeException() from prev_exception: see https://docs.python.org/3/reference/simple_stmts.html#raise</description></item><item><title/><link>https://skalt.github.io/til/2022/06/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/14/</guid><description>That Array.sort separates floats and ints:
x = [8, 7.4, 14, 13, 12, 11] // [ 8, 7.4, 14, 13, 12, 11 ] x.sort() // [ 11, 12, 13, 14, 7.4, 8 ] x.sort().reverse() // [ 8, 7.4, 14, 13, 12, 11 ]</description></item><item><title/><link>https://skalt.github.io/til/2022/06/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/24/</guid><description>That on GitHub, you can add footers like
statement[^1] [^1]: footnote See https://github.blog/changelog/2021-09-30-footnotes-now-supported-in-markdown-fields/ or https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#footnotes</description></item><item><title/><link>https://skalt.github.io/til/2022/07/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/01/</guid><description>That in Chrome/chromium you can view the actually-rendered font by
inspecting an element view computed properties source: https://stackoverflow.com/a/31254584/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/07/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/02/</guid><description>That you can unescape newlines with printf &amp;quot;%b&amp;quot; 'escaped\nstring':
escaped=&amp;#39;a\nb&amp;#39; printf &amp;#34;%b&amp;#34; &amp;#34;$escaped&amp;#34; # a # b</description></item><item><title/><link>https://skalt.github.io/til/2022/07/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/04/</guid><description>How to subset fonts:
# in a virtualenv pip install fonttools brotli zopfli pyftsubset --help see:
https://fonttools.readthedocs.io/en/latest/subset/index.html#initial-glyph-set-specification https://markoskon.com/creating-font-subsets/#available-tools https://clagnut.com/blog/2418/ https://wakamaifondue.com/beta/ Also, optical-sized variable fonts look great.</description></item><item><title/><link>https://skalt.github.io/til/2022/07/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/06/</guid><description>that DNS listens on port 53</description></item><item><title/><link>https://skalt.github.io/til/2022/07/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/08/</guid><description>That there&amp;rsquo;s an official 1Password terraform provider: https://registry.terraform.io/providers/1Password/onepassword/latest/docs</description></item><item><title/><link>https://skalt.github.io/til/2022/07/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/11/</guid><description>CMD+K clears the screen same as clear does!</description></item><item><title/><link>https://skalt.github.io/til/2022/07/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/27/</guid><description>That there&amp;rsquo;s a npm outdated command that finds packages which are not at their most recent versions! Example:
npm outdated --global # Package Current Wanted Latest Location # n 7.5.0 7.5.0 9.0.0 global # npm 6.14.15 6.14.17 8.15.0 global # pnpm 6.15.2 6.33.1 7.6.0 global # yarn 1.22.11 1.22.19 1.22.19 global</description></item><item><title/><link>https://skalt.github.io/til/2022/07/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/29/</guid><description>that in bash and zsh, you can put a newline in a variable like so:
newline=$&amp;#39;\n&amp;#39; echo &amp;#34;&amp;gt;&amp;gt;&amp;gt;${newline}&amp;lt;&amp;lt;&amp;lt;&amp;#34; learned from: https://stackoverflow.com/a/4456399/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/07/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/30/</guid><description>Of the existence of MDX (MultiDimensional eXpressions), a query language for OLAP cubes. I came across it while researching clickhouse db.</description></item><item><title/><link>https://skalt.github.io/til/2022/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/31/</guid><description>About creating json values using sqlite3&amp;rsquo;s built-in json value support.
Example:
SELECT json_object(&amp;#39;foo&amp;#39;, json_object(&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;)); -- {&amp;#34;foo&amp;#34;:{&amp;#34;bar&amp;#34;:&amp;#34;baz&amp;#34;}} SELECT json_object(&amp;#39;foo&amp;#39;, json_array(&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;)); -- {&amp;#34;foo&amp;#34;:[&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;]} -- works with nested queries too SELECT json_object(&amp;#39;foo&amp;#39;, (SELECT json_array(&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;))); -- {&amp;#34;foo&amp;#34;:[&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;]} CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c); INSERT INTO t1 VALUES (1, &amp;#39;A&amp;#39;, &amp;#39;one&amp;#39; ), (2, &amp;#39;B&amp;#39;, &amp;#39;two&amp;#39; ), (3, &amp;#39;C&amp;#39;, &amp;#39;three&amp;#39;), (4, &amp;#39;D&amp;#39;, &amp;#39;one&amp;#39; ), (5, &amp;#39;A&amp;#39;, &amp;#39;two&amp;#39; ), (6, &amp;#39;B&amp;#39;, &amp;#39;three&amp;#39;), (7, &amp;#39;C&amp;#39;, &amp;#39;one&amp;#39; ); SELECT json_group_array(b) FROM t1 GROUP BY c; -- [&amp;#34;A&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;C&amp;#34;] -- [&amp;#34;C&amp;#34;,&amp;#34;B&amp;#34;] -- [&amp;#34;B&amp;#34;,&amp;#34;A&amp;#34;] Caveat: you sometimes have to wrap nested values from nested queries in json(), else they&amp;rsquo;ll be escaped as json string literals.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/06/</guid><description>How to consistently establish relative symlinks within a git repo:
cd &amp;#34;$target_dir&amp;#34; # the directory in which you want to create the symlink ln -s ../relative/path/to/source.file ./symlink.name https://stackoverflow.com/a/15465514/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/08/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/11/</guid><description>That you can call docker compose kill to kill all docker-compose containers That there&amp;rsquo;s a timeout shell command in gnu coreutils: https://man7.org/linux/man-pages/man1/timeout.1.html</description></item><item><title/><link>https://skalt.github.io/til/2022/08/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/15/</guid><description>That if you run kubectl logs -n my_namespace $pod_name, you need to pass a container name afterwards. I always forget that pod != container.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/22/</guid><description>About IfExists AWS IAM conditions: if a condition key might not exist (the resource doesn&amp;rsquo;t have it built-in, or a tag isn&amp;rsquo;t set), you can append IfExists to the condition test. For example StringEquals -&amp;gt; StringEqualsIfExists.
See https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html#Conditions_IfExists</description></item><item><title/><link>https://skalt.github.io/til/2022/08/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/24/</guid><description>that you can lsblk to list the block devices that the OS knows about without sudo.
that you can sudo growpart to increase a partition size without restarting the machine.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/25/</guid><description>That the 14kb limit for fast pages comes from TCP sending 10 initial 1500b packets to guess the amount of bandwidth the client can handle. h/t https://endtimes.dev/why-your-website-should-be-under-14kb-in-size/
I&amp;rsquo;ve heard of the 14-15kb limit before, but this was the clearest explanation I&amp;rsquo;d heard so far of why the limit exists. Also, the author alleges that the limit applies to http/2 and http/3+QUIC.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/29/</guid><description>That you can list the listening ports on a UNIX machine using sudo lsof -i -P -n | grep LISTEN</description></item><item><title/><link>https://skalt.github.io/til/2022/08/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/30/</guid><description>That the max duration for any AWS assumed role session is 12h.
--duration-seconds (integer) The duration, in seconds, of the role session. The value specified can range from 900 seconds (15 minutes) up to the maximum session duration set for the role. **The maximum session duration setting can have a value from 1 hour to 12 hours.** If you specify a value higher than this setting or the administrator setting (whichever is lower), the operation fails.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/31/</guid><description>That linux has a capability system: https://man7.org/linux/man-pages/man7/capabilities.7.html
I heard about this in a discussion of privileged ports on linux, specifically about PRIV_NET_PRIVADDR.</description></item><item><title/><link>https://skalt.github.io/til/2022/09/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/09/02/</guid><description>that &amp;ldquo;cf.&amp;rdquo; stands for &amp;ldquo;conferatur&amp;rdquo;, or &amp;ldquo;to compare&amp;rdquo;</description></item><item><title/><link>https://skalt.github.io/til/2022/09/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/09/19/</guid><description>Incentive stock options (ISOs): typically taxed only on sale of shares.
Non-qualifying stock options (NSOs): typically taxed both on exercise and on sale of shares.
Restricted stock units (RSUs): type of equity grant where you own shares automatically if certain conditions are met (like vesting). More likely to be issued by larger/older companies. Taxed on vesting.
Stock options: A type of equity compensation that gives you the option to buy (&amp;ldquo;exercise&amp;rdquo;) shares at the &amp;ldquo;strike price&amp;rdquo; listed on your equity grant.</description></item><item><title/><link>https://skalt.github.io/til/2022/09/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/09/20/</guid><description>A hack to detect if an element is visible/not:
const isVisible = (el) =&amp;gt; (el.offsetWidth || el.offsetHeight) &amp;gt; 0; see https://stackoverflow.com/questions/1343237/how-to-check-elements-visibility-via-javascript</description></item><item><title/><link>https://skalt.github.io/til/2022/09/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/09/30/</guid><description>that OCSP stands for Online Certificate Status Protocol. See https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol</description></item><item><title/><link>https://skalt.github.io/til/2022/10/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/03/</guid><description>That you can write &amp;gt;&amp;amp; 1 and it still redirects to stdout! example:
f() { echo &amp;#34;ok&amp;#34; &amp;gt;&amp;amp;2; } f 2&amp;gt;&amp;amp; 1 | grep ok</description></item><item><title/><link>https://skalt.github.io/til/2022/10/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/07/</guid><description>STUN: Session Traversal Utilities for NAT. A standardized set of methods, including a network protocol, for traversal of network address translator (NAT) gateways. see https://en.wikipedia.org/wiki/STUN
DERP: Designated Encrypted Relay for Packets. See https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp</description></item><item><title/><link>https://skalt.github.io/til/2022/10/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/10/</guid><description>How to avoid opening live-share sessions in the web vscode version that I hate: https://learn.microsoft.com/en-us/visualstudio/liveshare/quickstart/browser-join#joining-from-the-desktop</description></item><item><title/><link>https://skalt.github.io/til/2022/10/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/11/</guid><description>That terraform plan -detailed-exitcode exists: 0 means no diff, 1 means error, 2 means a diff exists.</description></item></channel></rss>