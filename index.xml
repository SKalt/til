<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Today I Learned</title><link>https://skalt.github.io/til/</link><description>Recent content on Today I Learned</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC-SA 4.0</copyright><atom:link href="https://skalt.github.io/til/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://skalt.github.io/til/2021/07/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/12/</guid><description>TIL that terminals attached to interactive docker containers don&amp;rsquo;t necesarily respect ANSI escape codes. I&amp;rsquo;m still not 100% sure what causes the terminal to respect ANSI escape codes or not, but test -t 1 didn&amp;rsquo;t seem to correctly discriminate.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/13/</guid><description>That pickle.loads(pickle.dumps(obj)) is faster than copy.deepcopy(obj) Learned from Simon Willison&amp;rsquo;s twitter</description></item><item><title/><link>https://skalt.github.io/til/2021/07/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/14/</guid><description>that Cmd+D selects the next occurence of the currently-highlighted text in VS Code! Thanks to Mark Brewer for teaching me this!</description></item><item><title/><link>https://skalt.github.io/til/2021/07/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/22/</guid><description>about const enums in typescript, which get compiled to their values rather than getting represented as a mapping object. See https://www.typescriptlang.org/docs/handbook/enums.html#const-enums.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/24/</guid><description>How to stream large responses using the Javascript Fetch API:
const response = await fetch(url); const reader = response.body.getReader(); while (true) { const { value, done } = await reader.read(); if (done) break; console.log(&amp;#39;Received&amp;#39;, value); } console.log(&amp;#39;Response fully received&amp;#39;); Also: the circumstances under which ~/.*profile files are run: only if you log in.</description></item><item><title/><link>https://skalt.github.io/til/2021/07/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/25/</guid><description>You can create new google docs/spreadsheets/presentations, office365 docs/sheets/presentations, and github repos/gists/codespaces by accessing specific URLs in the browser:
G Suite docs: https://doc.new, https://docs.new sheets: https://sheet.new, https://sheets.new slides: http://slide.new, http://slides.new Office 365 docs: https://word.new sheets: https://excel.new slides: https://ppt.new github https://repo.new https://gist.new https://codespace.new source: https://twitter.com/rothgar/status/1419339782258184192</description></item><item><title/><link>https://skalt.github.io/til/2021/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/07/31/</guid><description>That you can use git grep to search for a string in a git repo.</description></item><item><title/><link>https://skalt.github.io/til/2021/08/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/05/</guid><description>that running python with the -O flag disables assert statements</description></item><item><title/><link>https://skalt.github.io/til/2021/08/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/08/12/</guid><description>about a new source of standard-ish python functionality: https://github.com/mahmoud/boltons</description></item><item><title/><link>https://skalt.github.io/til/2021/09/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/05/</guid><description>about go build constraints. Add
//go:build (booleanExprUsingTagNames) to the top of the conditionally-included file. The boolean expression can be composed of tags (passed via go build -tag &amp;lt;tag&amp;gt;...) or expressions referencing the host or target os and arch.</description></item><item><title/><link>https://skalt.github.io/til/2021/09/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/06/</guid><description>about PATH_MAX: the part of the POSIX standard which determines the maximum number of bytes allowed in an absolute path. In Linux, PATH_MAX is 4096 [src], but it&amp;rsquo;s possible to construct longer paths if you don&amp;rsquo;t care about some (most) utilities that use the current working directory to fail due to buffer overflow.
Also, I learned that most filesystems restrict file names to 255 bytes.</description></item><item><title/><link>https://skalt.github.io/til/2021/09/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/15/</guid><description>That you can, technically, write inline comments in bash. Specifically, you have to put the comments in a subshell:
echo abc `#put your comment here` \ def `#another chance for a comment` \ xyz etc ^ from https://stackoverflow.com/a/23872003/6571327</description></item><item><title/><link>https://skalt.github.io/til/2021/09/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/21/</guid><description>That the IANA suggests 49152–65535 (215 + 214 to 216 − 1) for dynamic or private ports. source: https://en.wikipedia.org/wiki/Ephemeral_port#Range</description></item><item><title/><link>https://skalt.github.io/til/2021/09/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/09/24/</guid><description>that you can find the version of debian used by your current ubuntu version by running cat /etc/debian_version. Even better, you can source /etc/os-release and get $ID and $VERSION_ID variables. Here&amp;rsquo;s what&amp;rsquo;s in the os-release for Ubuntu 20.04:
NAME=&amp;#34;Ubuntu&amp;#34; VERSION=&amp;#34;20.04.3 LTS (Focal Fossa)&amp;#34; ID=ubuntu ID_LIKE=debian PRETTY_NAME=&amp;#34;Ubuntu 20.04.3 LTS&amp;#34; VERSION_ID=&amp;#34;20.04&amp;#34; HOME_URL=&amp;#34;https://www.ubuntu.com/&amp;#34; SUPPORT_URL=&amp;#34;https://help.ubuntu.com/&amp;#34; BUG_REPORT_URL=&amp;#34;https://bugs.launchpad.net/ubuntu/&amp;#34; PRIVACY_POLICY_URL=&amp;#34;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;#34; VERSION_CODENAME=focal UBUNTU_CODENAME=focal Sources: https://askubuntu.com/a/445496/505362 and the source code at https://dot.net/v1/dotnet-installer.sh</description></item><item><title/><link>https://skalt.github.io/til/2021/10/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/01/</guid><description>That there&amp;rsquo;s a postgres keyword DEALLOCATE to remove prepared statements from memory: https://www.postgresql.org/docs/current/sql-deallocate.html</description></item><item><title/><link>https://skalt.github.io/til/2021/10/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/02/</guid><description>that you can hold shift+alt (linux) or shift+opt (mac) and click to select box of rows and columns in VS Code. See https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_column-box-selection</description></item><item><title/><link>https://skalt.github.io/til/2021/10/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/04/</guid><description>that different versions of sort(1) have different sorting presets. For example, on ubuntu 20.04 vs debian buster, sort will swap the order of how it sorts _s. These differences can be resolved by passing --unique --dictionary-order --stable.
Bonus: -h/--human-numeric-sort can sort SI suffixes.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/07/</guid><description>That GNU awk has a networking stack: https://www.gnu.org/software/gawk/manual/gawkinet/gawkinet.html</description></item><item><title/><link>https://skalt.github.io/til/2021/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/09/</guid><description>That cgo will automagically ship a C.sizeof_YourStruct for every C struct that you can reference as C.YourStruct. This is useful for pointer arithmetic via unsafe.Pointer(uintptr(something) + uintptr(intIndex * C.sizeof_YourStruct)).</description></item><item><title/><link>https://skalt.github.io/til/2021/10/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/12/</guid><description>about the shell until keyword, which is equivalent to while !.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/13/</guid><description>about reset, which resets your terminal after a series of undesired ANSI escape codes. I also learned about echo -e &amp;quot;\e&amp;quot; meaning &amp;ldquo;interpret backslash escape codes&amp;rdquo; (-e) and &amp;quot;\e&amp;quot; == &amp;quot;\033&amp;quot;.</description></item><item><title/><link>https://skalt.github.io/til/2021/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/19/</guid><description>that you can write multiple lines to a file using a cat &amp;gt; path/to/file with argument, like
cat &amp;gt; /tmp/file subsequent typed input is still stdin, which is being read by `cat` and so will be written to the file ^C # cancels `cat` writing to the file</description></item><item><title/><link>https://skalt.github.io/til/2021/10/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/22/</guid><description>That there are special CSS classes for theme colors in MSFT PowerPoint: https://www.brightcarbon.com/blog/responsive-svgs-and-smart-icons-in-powerpoint/</description></item><item><title/><link>https://skalt.github.io/til/2021/10/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/27/</guid><description>About the svg view element: https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view It can be used to create views referable like
&amp;lt;svg id=&amp;#34;total&amp;#34;&amp;gt; &amp;lt;view id=&amp;#34;view-1&amp;#34; viewBox=&amp;#34;...&amp;#34; /&amp;gt; &amp;lt;circle cx=&amp;#34;1&amp;#34; cy=&amp;#34;1&amp;#34; /&amp;gt; &amp;lt;/svg&amp;gt; &amp;lt;img src=&amp;#34;#view-1&amp;#34; /&amp;gt;</description></item><item><title/><link>https://skalt.github.io/til/2021/10/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/28/</guid><description>That you can detect the terminal you&amp;rsquo;re running in (including vscode) by checking the value of &amp;quot;${TERM_PROGRAM:-}&amp;quot;. The VS Code integrated termial always has a $TERM_PROGRAM of vscode.
Source: https://stackoverflow.com/a/59231654/6571327</description></item><item><title/><link>https://skalt.github.io/til/2021/10/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/10/30/</guid><description>about terminfo, the terminal information database: it can be queried to find all kinds of fun facts about your current terminal. For instance,
tput cols =&amp;gt; number of columns in the current terminal tput colors =&amp;gt; number of colors the terminal supports tput setaf =&amp;gt; generate ansi codes to set the foregrount color in the terminal Also, infocmp screen dumps a bunch of other related information drawn from terminfo.</description></item><item><title/><link>https://skalt.github.io/til/2021/11/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/03/</guid><description>That
There are two accepted formats for these strings: plain keyword/value strings and URIs. URIs generally follow RFC 3986, except that multi-host connection strings are allowed.
&amp;ndash; https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING
you can pass a application_name parameter to a connection string &amp;ndash; https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT-APPLICATION-NAME</description></item><item><title/><link>https://skalt.github.io/til/2021/11/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/05/</guid><description>That sudo has a webpage and an unfortunate mascot: https://www.sudo.ws/</description></item><item><title/><link>https://skalt.github.io/til/2021/11/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/23/</guid><description>locate searches all filenames for a keyword using a database which you can update updatedb. whereis searches for binaries using the same mechanism.
https://www.madebygps.com/an-intro-to-finding-things-in-linux/</description></item><item><title/><link>https://skalt.github.io/til/2021/11/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/11/29/</guid><description>that there&amp;rsquo;s a pg_sleep(seconds) function: see https://til.hashrocket.com/posts/8a6f68519d-sleeping-in-postgresql</description></item><item><title/><link>https://skalt.github.io/til/2021/12/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2021/12/01/</guid><description>that you can write any file in your git history using git show &amp;lt;ref&amp;gt;:&amp;lt;path&amp;gt;.
See https://juplo.de/cat-any-file-in-any-commit-with-git/</description></item><item><title/><link>https://skalt.github.io/til/2022/01/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/04/</guid><description>about the css :target selector (matches the element with the id specified by the url document-fragment) and the svg &amp;lt;view&amp;gt; element, which specifies a viewBox and can have an id.
see https://css-tricks.com/svg-fragment-identifiers-work/</description></item><item><title/><link>https://skalt.github.io/til/2022/01/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/09/</guid><description>1: That you can set statement timeouts:
ALTER DATABASE mydatabase SET statement_timeout = &amp;#39;60s&amp;#39;; Source: https://blog.crunchydata.com/blog/five-tips-for-a-healthier-postgres-database-in-the-new-year
2: that you can query your cache and index hit metrics (src)
3: writes to indexed columns don&amp;rsquo;t necessarily update indices:
If an indexed column has to have new values inserted, or existing values updated or deleted, the corresponding index does get updated as well. Ironically, that might make queries take more time to evaluate.</description></item><item><title/><link>https://skalt.github.io/til/2022/01/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/10/</guid><description>Of the html table &amp;lt;caption&amp;gt; element</description></item><item><title/><link>https://skalt.github.io/til/2022/01/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/11/</guid><description>that you can pass default values to css variable references, e.g. var(--button-color, pink)
Also,
If the SVG fragment identifier addresses a time segment (e.g., MyDrawing.svg#t=10),then the initial view into the SVG document is established as if no fragment identifier was provided. The rendering of the SVG Document shall be as if the setCurrentTime method on the SVG Document element had been called with the begin time value from the fragment identifier.</description></item><item><title/><link>https://skalt.github.io/til/2022/01/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/13/</guid><description>In sqlite, all rows have a 64-bit ROWID (with some exceptions). Putting those aside, if you have a single-column integer primary key and use the magic words PRIMARY KEY INTEGER then the pkey becomes an alias for rowid, greatly speeding up lookups. I&amp;rsquo;m not sure how this affects insertions, though.
https://sqlite.org/lang_createtable.html#rowids_and_the_integer_primary_key</description></item><item><title/><link>https://skalt.github.io/til/2022/01/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/26/</guid><description>That you can extract sensitive output values from terraform, you can terraform output $output_name
&amp;ndash; see https://learn.hashicorp.com/tutorials/terraform/outputs#redact-sensitive-outputs
Also, sqlite provides a PRAGMA user_version=&amp;lt;number&amp;gt; to let applications store and retrieve a versioning number. See https://sqlite.org/pragma.html#pragma_user_version</description></item><item><title/><link>https://skalt.github.io/til/2022/01/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/01/31/</guid><description>that the fmt utility exists. It seems to fold or center text according to a target width.</description></item><item><title/><link>https://skalt.github.io/til/2022/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/08/</guid><description>In zsh, ls *(n) will &amp;ldquo;human-sort&amp;rdquo; mostly-numeric filenames.
https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers
https://twitter.com/nedbat/status/1491032300800421892</description></item><item><title/><link>https://skalt.github.io/til/2022/02/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/14/</guid><description>that adding a ! suffix tells tsc that the expression to the left doesn&amp;rsquo;t evaluate to null
https://mariusschulz.com/blog/assertion-functions-in-typescript#using-the-non-null-assertion-operator
that going to about:profile in firefox lets you create separate firefox profiles.</description></item><item><title/><link>https://skalt.github.io/til/2022/02/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/18/</guid><description>you can import from a parent-module using from ... import .</description></item><item><title/><link>https://skalt.github.io/til/2022/02/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/25/</guid><description>that you can use variables in make targets, e.g.
path/${TO}/file: path/${TO}/other/file</description></item><item><title/><link>https://skalt.github.io/til/2022/02/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/02/28/</guid><description>If you want to get a list of aws:principalTags/* values that can be used in your IAM conditions, search CloudTrail events for Event Name: AssumeRoleWithSaml.</description></item><item><title/><link>https://skalt.github.io/til/2022/03/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/06/</guid><description>About git-sparse-checkout:
https://linuxhint.com/what-is-git-sparse-checkout/ https://git-scm.com/docs/git-sparse-checkout The general script for doing a sparse checkout is:
#!/usr/bin/env bash git_url=&amp;#34;${git_url:?required}&amp;#34; target_dir=&amp;#34;${target_dir:?required}&amp;#34; is_git_dir() { git rev-parse; } init() { mkdir -p &amp;#34;$target_dir&amp;#34; &amp;amp;&amp;amp; cd &amp;#34;$target_dir&amp;#34; if ! is_git_dir; then git init &amp;amp;&amp;amp; git remote add -f origin &amp;#34;$git_url&amp;#34; fi git config core.sparseCheckout true &amp;amp;&amp;amp; git sparse-checkout init &amp;amp;&amp;amp; git sparse-checkout set test &amp;amp;&amp;amp; git pull origin master } see also: https://about.gitlab.com/blog/2020/03/13/partial-clone-for-massive-repositories/</description></item><item><title/><link>https://skalt.github.io/til/2022/03/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/08/</guid><description>random: turns out HTML comments are valid line-comments in JS: https://smitop.com/post/js-html-comments/</description></item><item><title/><link>https://skalt.github.io/til/2022/03/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/17/</guid><description>About the terraform count meta-argument:
you can pass a count = n to any resource-block to create n copies of the resource you can differentiate each of the resources using ${count.index}</description></item><item><title/><link>https://skalt.github.io/til/2022/03/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/18/</guid><description>How to check if a debian package is installed:
deb_pkg_is_installed() { sudo dpkg --get-selections &amp;#34;$1&amp;#34; | grep -q &amp;#34;$1&amp;#34;; }</description></item><item><title/><link>https://skalt.github.io/til/2022/03/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/19/</guid><description>How to pass a multi-character field separator to awk:
awk -F &amp;#39;[ :]+&amp;#39; &amp;#39;{print $1, $3}&amp;#39; # character set: [ :] # repetition: +</description></item><item><title/><link>https://skalt.github.io/til/2022/03/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/03/22/</guid><description>You can replace the nth instance of a pattern on a line with sed:
; printf &amp;#34;a\tb\tc\n&amp;#34; | sed &amp;#39;s/\t/\t~/2&amp;#39; # a b ~c</description></item><item><title/><link>https://skalt.github.io/til/2022/04/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/04/</guid><description>to run terraform output $output_name to print a named output</description></item><item><title/><link>https://skalt.github.io/til/2022/04/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/06/</guid><description>That python f-strings can do
date and time formatting: f&amp;quot;{today:%Y-%m-%d}&amp;quot; have a variable-debugging format: f&amp;quot;{x = }, {y = }&amp;quot; can use __repr__ rather than __str__: f&amp;quot;{user!r}&amp;quot; can be nested: f&amp;quot;output: {value:{width}.{precision}}&amp;quot; https://martinheinz.dev/blog/70 Of the window.prompt() method: https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt</description></item><item><title/><link>https://skalt.github.io/til/2022/04/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/08/</guid><description>What hardlinks are: direct references to inodes. A hardlink can&amp;rsquo;t reference filesystem objects that don&amp;rsquo;t have inodes, such as directories or ports, and aren&amp;rsquo;t portable across different hardware devices even with the same filesystem layout (I think).
Also, the opposite of mount(8) is not unmount, it&amp;rsquo;s umount &amp;gt;:(
gzip -vt $path_to_file checks the validity of a gzip archive: see https://unix.stackexchange.com/questions/359303/check-validity-of-gz-file</description></item><item><title/><link>https://skalt.github.io/til/2022/04/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/11/</guid><description>You can use journalctl -u ${service_name}.service --since ${time:-today} to view the logs of a systemd service: https://www.digitalocean.com/community/tutorials/how-to-use-journalctl-to-view-and-manipulate-systemd-logs</description></item><item><title/><link>https://skalt.github.io/til/2022/04/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/13/</guid><description>That a rust if-statement can have a return type
let x: u32 = 123; let stmt_result = if x % 2 == 0 { Ok(&amp;#34;even steven&amp;#34;) } else { Err(&amp;#34;odd steven&amp;#34;) }; assert_eq!(x, Err(&amp;#34;odd steven&amp;#34;));</description></item><item><title/><link>https://skalt.github.io/til/2022/04/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/20/</guid><description>tar -ztvf file.tar.gz will list the files in tar.gz</description></item><item><title/><link>https://skalt.github.io/til/2022/04/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/22/</guid><description>that there&amp;rsquo;s a scheduled send option in slack. It&amp;rsquo;s the first option in the dropdown next to the send button.</description></item><item><title/><link>https://skalt.github.io/til/2022/04/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/29/</guid><description>how to check the last apt update time:
last_update=&amp;#34;$(stat --format=%Y /var/cache/apt/pkgcache.bin)&amp;#34; https://askubuntu.com/a/410259/505362</description></item><item><title/><link>https://skalt.github.io/til/2022/04/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/04/30/</guid><description>That there&amp;rsquo;s an IETF spec for CSVs/TSVs, and it uses doubled double-quotes as quote-escapes, as SQL does https://datatracker.ietf.org/doc/html/rfc4180#section-2</description></item><item><title/><link>https://skalt.github.io/til/2022/05/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/03/</guid><description>aws policy documents can change the order of items within permissions arrays, but that&amp;rsquo;s safe to ignore:
Order is lost for data aws_iam_policy_document Policy elements that are syntactically lists but semantically sets should have their order ignored Perpetual diffs / Objects have changed outside of Terraform tracking ticket Also, that &amp;amp; types take 8 bytes = 64 bits on 64-bit systems
use std::mem; pub struct Foo { bar: String, // 24 baz: usize, // 8 } pub struct Quux&amp;lt;&amp;#39;a&amp;gt; { foo: &amp;amp;&amp;#39;a Foo, bar: usize, } fn main() { println!</description></item><item><title/><link>https://skalt.github.io/til/2022/05/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/04/</guid><description>Not to use BETWEEN for timestamps Not to use char(n), or varchar(n), since they&amp;rsquo;re not natively fixed-width and will defy expectations. See https://wiki.postgresql.org/wiki/Don't_Do_This
Also, I learned that you can&amp;rsquo;t run chsh(1) with sudo; chsh needs to run as the user who&amp;rsquo;s changing their shell.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/05/</guid><description>To prefer async context managers or asyncio.run() instead of creating+managing event loops natively.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/09/</guid><description>that sudo can be configured with the visudo command and that sudo can produce audit logs. See https://www.sudo.ws/posts/2022/05/sudo-for-blue-teams-how-to-control-and-log-better/
that there&amp;rsquo;s an Element.closest(selector) method, which means you can run this function to set the url to the closest link to an element:
((el) =&amp;gt; { let id = el.closest(&amp;#34;[id]&amp;#34;)?.id; if (!id) return; else location.hash = id; })($0); that you can use
SELECT /*...*/ FROM one_table JOIN other_table USING (common_column) as shorthand for one_table.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/10/</guid><description>That you can call time(1) to time how long a shell command takes, like so:
; time terraform fmt -write=true -recursive . # terraform fmt -write=true -recursive . 0.10s user 0.23s system 24% cpu 1.377 total</description></item><item><title/><link>https://skalt.github.io/til/2022/05/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/16/</guid><description>that gzip(1), by default, includes file mtimes. The flag to prevent gzip from zipping non-deterministically is gzip --no-name or gzip -n.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/18/</guid><description>The term &amp;ldquo;brochureware&amp;rdquo;: &amp;ldquo;simply listing products and services on a [static] Web site&amp;rdquo;. https://en.wikipedia.org/wiki/Brochureware</description></item><item><title/><link>https://skalt.github.io/til/2022/05/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/23/</guid><description>aarch64 is a 64-bit version of armv7 (which seems to be 32-bit). Thus, aarch64 = arm64 ~= armv8
AArch64 is the 64-bit state introduced in the Armv8-A architecture (https://en.wikipedia.org/wiki/ARM_architecture#ARMv8-A). The 32-bit state which is backwards compatible with Armv7-A and previous 32-bit Arm architectures is referred to as AArch32. Therefore the GNU triplet for the 64-bit ISA is aarch64. The Linux kernel community chose to call their port of the kernel to this architecture arm64 rather than aarch64, so that&amp;rsquo;s where some of the arm64 usage comes from.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/30/</guid><description>How to write hugo templates. Hugo seems to require RTFM to get a grasp on the functions and variables available in its DSL.</description></item><item><title/><link>https://skalt.github.io/til/2022/05/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/05/31/</guid><description>That sql has assertions:
CREATE ASSERTION &amp;lt;Constraint name&amp;gt; CHECK (search condition) [ &amp;lt;constraint attributes&amp;gt; ] see https://crate.io/docs/sql-99/en/latest/chapters/20.html#create-assertion-statement.
h/t https://www.scattered-thoughts.net/log/0024/ for bringing that to my attention.
Also, from the weekend: in postgres, at least, you can call TABLE :table_name; directly to SELECT * FROM :table_name;
Also: how to look up a domain name from an ip:
reverse_ip_lookup() { ip_address=&amp;#34;$1&amp;#34; dig -x $ip_address +noall +answer } Also: how to audit AWS VPC flow logs from CloudWatch Log Insights: use the example queries in the right sidebar.</description></item><item><title/><link>https://skalt.github.io/til/2022/06/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/01/</guid><description>That pg_dumpall exists. That you need to use pg_dumpall to dump tablespaces, roles, and subscriptions. That pg_dumpall will dump the postgres role by default, causing resultant dump to fail to restore. Fortunately, I&amp;rsquo;m able to grep -ve '^CREATE ROLE postgres</description></item><item><title/><link>https://skalt.github.io/til/2022/06/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/02/</guid><description>How to create a JS BigInt value:
A BigInt value, also sometimes just called a BigInt, is a bigint primitive, created by appending n to the end of an integer literal, or by calling the BigInt() constructor (but without the new operator) and giving it an integer value or string value. &amp;ndash; https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt</description></item><item><title/><link>https://skalt.github.io/til/2022/06/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/06/</guid><description>that chickens are native to tropical jungles in south-east Asia.
Source: https://www.theguardian.com/science/2022/jun/06/chickens-were-first-tempted-down-from-trees-by-rice-research-suggests</description></item><item><title/><link>https://skalt.github.io/til/2022/06/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/07/</guid><description>That 1Password has a separate SSH key type! https://developer.1password.com/docs/ssh/manage-keys/
Also, that make has a MAKEFLAGS variable that can be used in recursive calls to make: see https://earthly.dev/blog/make-flags/. This also means you can set -r, which eliminates default rules and file actions.</description></item><item><title/><link>https://skalt.github.io/til/2022/06/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/08/</guid><description>that you can write raise SomeException() from prev_exception: see https://docs.python.org/3/reference/simple_stmts.html#raise</description></item><item><title/><link>https://skalt.github.io/til/2022/06/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/14/</guid><description>That Array.sort separates floats and ints:
x = [8, 7.4, 14, 13, 12, 11] // [ 8, 7.4, 14, 13, 12, 11 ] x.sort() // [ 11, 12, 13, 14, 7.4, 8 ] x.sort().reverse() // [ 8, 7.4, 14, 13, 12, 11 ]</description></item><item><title/><link>https://skalt.github.io/til/2022/06/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/06/24/</guid><description>That on GitHub, you can add footers like
statement[^1] [^1]: footnote See https://github.blog/changelog/2021-09-30-footnotes-now-supported-in-markdown-fields/ or https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#footnotes</description></item><item><title/><link>https://skalt.github.io/til/2022/07/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/01/</guid><description>That in Chrome/chromium you can view the actually-rendered font by
inspecting an element view computed properties source: https://stackoverflow.com/a/31254584/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/07/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/02/</guid><description>That you can unescape newlines with printf &amp;quot;%b&amp;quot; 'escaped\nstring':
escaped=&amp;#39;a\nb&amp;#39; printf &amp;#34;%b&amp;#34; &amp;#34;$escaped&amp;#34; # a # b</description></item><item><title/><link>https://skalt.github.io/til/2022/07/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/04/</guid><description>How to subset fonts:
# in a virtualenv pip install fonttools brotli zopfli pyftsubset --help see:
https://fonttools.readthedocs.io/en/latest/subset/index.html#initial-glyph-set-specification https://markoskon.com/creating-font-subsets/#available-tools https://clagnut.com/blog/2418/ https://wakamaifondue.com/beta/ Also, optical-sized variable fonts look great.</description></item><item><title/><link>https://skalt.github.io/til/2022/07/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/06/</guid><description>that DNS listens on port 53</description></item><item><title/><link>https://skalt.github.io/til/2022/07/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/08/</guid><description>That there&amp;rsquo;s an official 1Password terraform provider: https://registry.terraform.io/providers/1Password/onepassword/latest/docs</description></item><item><title/><link>https://skalt.github.io/til/2022/07/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/11/</guid><description>CMD+K clears the screen same as clear does!</description></item><item><title/><link>https://skalt.github.io/til/2022/07/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/27/</guid><description>That there&amp;rsquo;s a npm outdated command that finds packages which are not at their most recent versions! Example:
npm outdated --global # Package Current Wanted Latest Location # n 7.5.0 7.5.0 9.0.0 global # npm 6.14.15 6.14.17 8.15.0 global # pnpm 6.15.2 6.33.1 7.6.0 global # yarn 1.22.11 1.22.19 1.22.19 global</description></item><item><title/><link>https://skalt.github.io/til/2022/07/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/29/</guid><description>that in bash and zsh, you can put a newline in a variable like so:
newline=$&amp;#39;\n&amp;#39; echo &amp;#34;&amp;gt;&amp;gt;&amp;gt;${newline}&amp;lt;&amp;lt;&amp;lt;&amp;#34; learned from: https://stackoverflow.com/a/4456399/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/07/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/30/</guid><description>Of the existence of MDX (MultiDimensional eXpressions), a query language for OLAP cubes. I came across it while researching clickhouse db.</description></item><item><title/><link>https://skalt.github.io/til/2022/07/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/07/31/</guid><description>About creating json values using sqlite3&amp;rsquo;s built-in json value support.
Example:
SELECT json_object(&amp;#39;foo&amp;#39;, json_object(&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;)); -- {&amp;#34;foo&amp;#34;:{&amp;#34;bar&amp;#34;:&amp;#34;baz&amp;#34;}} SELECT json_object(&amp;#39;foo&amp;#39;, json_array(&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;)); -- {&amp;#34;foo&amp;#34;:[&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;]} -- works with nested queries too SELECT json_object(&amp;#39;foo&amp;#39;, (SELECT json_array(&amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;))); -- {&amp;#34;foo&amp;#34;:[&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;]} CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c); INSERT INTO t1 VALUES (1, &amp;#39;A&amp;#39;, &amp;#39;one&amp;#39; ), (2, &amp;#39;B&amp;#39;, &amp;#39;two&amp;#39; ), (3, &amp;#39;C&amp;#39;, &amp;#39;three&amp;#39;), (4, &amp;#39;D&amp;#39;, &amp;#39;one&amp;#39; ), (5, &amp;#39;A&amp;#39;, &amp;#39;two&amp;#39; ), (6, &amp;#39;B&amp;#39;, &amp;#39;three&amp;#39;), (7, &amp;#39;C&amp;#39;, &amp;#39;one&amp;#39; ); SELECT json_group_array(b) FROM t1 GROUP BY c; -- [&amp;#34;A&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;C&amp;#34;] -- [&amp;#34;C&amp;#34;,&amp;#34;B&amp;#34;] -- [&amp;#34;B&amp;#34;,&amp;#34;A&amp;#34;] Caveat: you sometimes have to wrap nested values from nested queries in json(), else they&amp;rsquo;ll be escaped as json string literals.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/06/</guid><description>How to consistently establish relative symlinks within a git repo:
cd &amp;#34;$target_dir&amp;#34; # the directory in which you want to create the symlink ln -s ../relative/path/to/source.file ./symlink.name https://stackoverflow.com/a/15465514/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/08/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/11/</guid><description>That you can call docker compose kill to kill all docker-compose containers That there&amp;rsquo;s a timeout shell command in gnu coreutils: https://man7.org/linux/man-pages/man1/timeout.1.html</description></item><item><title/><link>https://skalt.github.io/til/2022/08/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/15/</guid><description>That if you run kubectl logs -n my_namespace $pod_name, you need to pass a container name afterwards. I always forget that pod != container.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/22/</guid><description>About IfExists AWS IAM conditions: if a condition key might not exist (the resource doesn&amp;rsquo;t have it built-in, or a tag isn&amp;rsquo;t set), you can append IfExists to the condition test. For example StringEquals -&amp;gt; StringEqualsIfExists.
See https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html#Conditions_IfExists</description></item><item><title/><link>https://skalt.github.io/til/2022/08/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/24/</guid><description>that you can lsblk to list the block devices that the OS knows about without sudo.
that you can sudo growpart to increase a partition size without restarting the machine.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/25/</guid><description>That the 14kb limit for fast pages comes from TCP sending 10 initial 1500b packets to guess the amount of bandwidth the client can handle. h/t https://endtimes.dev/why-your-website-should-be-under-14kb-in-size/
I&amp;rsquo;ve heard of the 14-15kb limit before, but this was the clearest explanation I&amp;rsquo;d heard so far of why the limit exists. Also, the author alleges that the limit applies to http/2 and http/3+QUIC.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/29/</guid><description>That you can list the listening ports on a UNIX machine using sudo lsof -i -P -n | grep LISTEN</description></item><item><title/><link>https://skalt.github.io/til/2022/08/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/30/</guid><description>That the max duration for any AWS assumed role session is 12h.
--duration-seconds (integer) The duration, in seconds, of the role session. The value specified can range from 900 seconds (15 minutes) up to the maximum session duration set for the role. **The maximum session duration setting can have a value from 1 hour to 12 hours.** If you specify a value higher than this setting or the administrator setting (whichever is lower), the operation fails.</description></item><item><title/><link>https://skalt.github.io/til/2022/08/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/08/31/</guid><description>That linux has a capability system: https://man7.org/linux/man-pages/man7/capabilities.7.html
I heard about this in a discussion of privileged ports on linux, specifically about PRIV_NET_PRIVADDR.</description></item><item><title/><link>https://skalt.github.io/til/2022/09/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/09/02/</guid><description>that &amp;ldquo;cf.&amp;rdquo; stands for &amp;ldquo;conferatur&amp;rdquo;, or &amp;ldquo;to compare&amp;rdquo;</description></item><item><title/><link>https://skalt.github.io/til/2022/09/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/09/19/</guid><description>Incentive stock options (ISOs): typically taxed only on sale of shares.
Non-qualifying stock options (NSOs): typically taxed both on exercise and on sale of shares.
Restricted stock units (RSUs): type of equity grant where you own shares automatically if certain conditions are met (like vesting). More likely to be issued by larger/older companies. Taxed on vesting.
Stock options: A type of equity compensation that gives you the option to buy (&amp;ldquo;exercise&amp;rdquo;) shares at the &amp;ldquo;strike price&amp;rdquo; listed on your equity grant.</description></item><item><title/><link>https://skalt.github.io/til/2022/09/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/09/20/</guid><description>A hack to detect if an element is visible/not:
const isVisible = (el) =&amp;gt; (el.offsetWidth || el.offsetHeight) &amp;gt; 0; see https://stackoverflow.com/questions/1343237/how-to-check-elements-visibility-via-javascript</description></item><item><title/><link>https://skalt.github.io/til/2022/09/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/09/30/</guid><description>that OCSP stands for Online Certificate Status Protocol. See https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol</description></item><item><title/><link>https://skalt.github.io/til/2022/10/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/03/</guid><description>That you can write &amp;gt;&amp;amp; 1 and it still redirects to stdout! example:
f() { echo &amp;#34;ok&amp;#34; &amp;gt;&amp;amp;2; } f 2&amp;gt;&amp;amp; 1 | grep ok</description></item><item><title/><link>https://skalt.github.io/til/2022/10/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/07/</guid><description>STUN: Session Traversal Utilities for NAT. A standardized set of methods, including a network protocol, for traversal of network address translator (NAT) gateways. see https://en.wikipedia.org/wiki/STUN
DERP: Designated Encrypted Relay for Packets. See https://tailscale.com/blog/how-tailscale-works/#encrypted-tcp-relays-derp</description></item><item><title/><link>https://skalt.github.io/til/2022/10/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/10/</guid><description>How to avoid opening live-share sessions in the web vscode version that I hate: https://learn.microsoft.com/en-us/visualstudio/liveshare/quickstart/browser-join#joining-from-the-desktop</description></item><item><title/><link>https://skalt.github.io/til/2022/10/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/11/</guid><description>That terraform plan -detailed-exitcode exists: 0 means no diff, 1 means error, 2 means a diff exists.
Also, that you can print the source code of a bash function like so:
print_fn_src() { declare -f &amp;#34;$1&amp;#34;; }</description></item><item><title/><link>https://skalt.github.io/til/2022/10/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/13/</guid><description>That &amp;ldquo;CWE&amp;rdquo; is a MITRE abbreviation for &amp;ldquo;common weakness enumeration&amp;rdquo;</description></item><item><title/><link>https://skalt.github.io/til/2022/10/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/18/</guid><description>That BSD arch command found on Macs also supports a -${arch} flag for running universal binaries.</description></item><item><title/><link>https://skalt.github.io/til/2022/10/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/19/</guid><description>that you can easily send asyncio tasks to threads:
#!/usr/bin/env python3 import asyncio from asyncio.threads import to_thread async def foo(bar: str): asyncio.sleep print(bar) asyncio.run(to_thread(foo, &amp;#34;baz&amp;#34;))</description></item><item><title/><link>https://skalt.github.io/til/2022/10/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/23/</guid><description>That ARIA stands for Accessible Rich Internet Applications! See https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA
That in linux ls(1) uses the environment variable LS_COLORS to determine the colors in which the filenames are to be displayed. Also, that linux specifies a dir_colors(5) configuration file format for dircolors(1), which exports LS_COLORS
See https://man7.org/linux/man-pages/man5/dir_colors.5.html
That nix is complicated, which is exactly what my prior research told me.
On one hand, it is AWESOME to cd into a project and watch direnv automatically spawn a development shell with all the fixings.</description></item><item><title/><link>https://skalt.github.io/til/2022/10/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/10/24/</guid><description>That you can list all addresses in terraform state by running
terraform state list Docs at https://developer.hashicorp.com/terraform/cli/commands/state/list
Also, that compgen -v is a function, at least on Mac zsh. Apparently in zsh compgen -v calls something like
for var_name in &amp;#34;${(k)parameters[@]}&amp;#34;; do printf &amp;#39;%s\n&amp;#39; &amp;#34;$var_name&amp;#34; done which is the first time I&amp;rsquo;ve seen that kind of shell syntax. It generates a bad substitution message in bash 3.2, so I can only assume it&amp;rsquo;s zsh-specific.</description></item><item><title/><link>https://skalt.github.io/til/2022/11/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/01/</guid><description>That you can have too many SSH keys :)
When I got
Received disconnect from 256.256.256.256 port 22:2: too many authentication failures I found the following: https://www.tecmint.com/fix-ssh-too-many-authentication-failures-error/ which advocated adding
Host * IdentitiesOnly yes to reduce the number of tried keys</description></item><item><title/><link>https://skalt.github.io/til/2022/11/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/07/</guid><description>that AWS ALB target groups support HTTPS healthcheck targets: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/target-group-health-checks.html
That FQDN stands for Fully Qualified Domain Name. For example sub.domain.tld. is a FQDN.</description></item><item><title/><link>https://skalt.github.io/til/2022/11/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/08/</guid><description>That the aws_ec2_tag resource can be used to add tags to AWS RAM-shared VPCs and subnets:
This resource should only be used in cases where EC2 resources are created outside Terraform (e.g., AMIs), being shared via Resource Access Manager (RAM), or implicitly created by other means (e.g., Transit Gateway VPN Attachments).
Also, that
When the source of a module is a version control repository or archive file (generically, a &amp;ldquo;package&amp;rdquo;), the module itself may be in a sub-directory relative to the root of the package.</description></item><item><title/><link>https://skalt.github.io/til/2022/11/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/10/</guid><description>That Bitbucket pipelines has pipeline-specific SSH keys available at the path $BITBUCKET_SSH_KEY_FILE. See https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/
Also, git rev-parse --show-git-dir yields a relative path to the .git dir for that repo.</description></item><item><title/><link>https://skalt.github.io/til/2022/11/11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/11/</guid><description>that SAN = Subject Alternate Name. A SAN certificate is a TLS certificate that certifies multiple domain names.
see https://support.dnsimple.com/articles/what-is-ssl-san/
that AWS Certificate Manager and other free-TLS-certificate services can&amp;rsquo;t validate private domain names since ACME (Automated Certificate Management Environment) relies on public DNS or WHOIS records.
See also https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html.</description></item><item><title/><link>https://skalt.github.io/til/2022/11/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/14/</guid><description>That pg_catalog.pg_shdepend exists, and &amp;ldquo;records the dependency relationships between database objects and shared objects, such as roles.&amp;rdquo; See https://www.postgresql.org/docs/current/catalog-pg-shdepend.html</description></item><item><title/><link>https://skalt.github.io/til/2022/11/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/11/30/</guid><description>that you can option+click to change your cursor&amp;rsquo;s location in iterm2 and mac&amp;rsquo;s terminal.app! H/t Vlad Grenkov for this one :)
As of Terraform 1.3, you can write
type = optional(real_type, default_value) See https://www.hashicorp.com/blog/terraform-1-3-improves-extensibility-and-maintainability-of-terraform-modules</description></item><item><title/><link>https://skalt.github.io/til/2022/12/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/12/05/</guid><description>That NFC in the context of security keys stands for Near Field Communication: a (usually bluetooth) connection that lets your security key authenticate with a nearby device.
That git-worktree(1) is pretty handy! During the process of a refactor, I was able to run
git worktree add --checkout $local_path $old_branch Explore some deleted/significantly altered files, then inspect the diff between the current and old state of the files!
See also: https://jmtd.net/log/worktrees/ https://git-scm.</description></item><item><title/><link>https://skalt.github.io/til/2022/12/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/12/10/</guid><description>That you can include doc-comments in macros:
macro_rules! documented { ( $(#[$outer:meta])* $name:ident ) =&amp;gt; { $(#[$outer])* fn $name(&amp;amp;self) {} }; } documented!( /// documented my_function ); my_function(); // hovering &amp;#34;function&amp;#34; now shows that the doc-comment is &amp;#34;documented&amp;#34; h/t https://stackoverflow.com/a/33999625/6571327</description></item><item><title/><link>https://skalt.github.io/til/2022/12/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/12/14/</guid><description>that it&amp;rsquo;s possible to create indices on materialized views in postgres: https://www.postgresql.org/docs/current/rules-materializedviews.html#RULES-MATERIALIZEDVIEWS</description></item><item><title/><link>https://skalt.github.io/til/2022/12/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/12/18/</guid><description>That you can group fields in an html form with a &amp;lt;fieldset&amp;gt; tag, and that it accepts a top-level child &amp;lt;legend&amp;gt; tag. Together,
&amp;lt;fieldset&amp;gt; &amp;lt;legend&amp;gt;Legend&amp;lt;/legend&amp;gt; &amp;lt;div&amp;gt;...&amp;lt;/div&amp;gt; &amp;lt;/fieldset&amp;gt; produces
┌────legend─────┐ │ │ │ │ │ ... │ │ │ │ │ └───────────────┘ which is simultaneously cool and hard to style.</description></item><item><title/><link>https://skalt.github.io/til/2022/12/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2022/12/26/</guid><description>That you need to set a value=&amp;quot;number&amp;quot; attribute AND a max=&amp;quot;number&amp;quot; attribute on a html &amp;lt;progress&amp;gt; element in order to display fractional progress.
See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress</description></item><item><title/><link>https://skalt.github.io/til/2023/01/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/01/</guid><description>The difference between triggers and event triggers in postgres:
Unlike regular triggers, which are attached to a single table and capture only DML events, event triggers are global to a particular database and are capable of capturing DDL events. Like regular triggers, event triggers can be written in any procedural language that includes event trigger support, or in C, but not in plain SQL.
&amp;ndash; https://www.postgresql.org/docs/current/event-triggers.html</description></item><item><title/><link>https://skalt.github.io/til/2023/01/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/09/</guid><description>That a directory service doesn&amp;rsquo;t necessarily provide authentication: https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ldap/what-is-a-directory-service describes a directory service as a document database optimized for searches of a hierarchical (directory) tree.
[Directory] entries are arranged hierarchically in a tree that is structured geographically and organizationally. Global entries, such as countries/regions, reside at the top of the tree, followed by state or national organizations, then organizational units, people, devices, or anything else that might be represented in a directory.</description></item><item><title/><link>https://skalt.github.io/til/2023/01/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/17/</guid><description>that you can set PYTHONDONTWRITEBYTECODE=1 to prevent python from writing pycs (see https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE)
Also: that AWS SSO does SCIM actions using the sso-directory:* IAM prefix rather than the sso:* prefix.</description></item><item><title/><link>https://skalt.github.io/til/2023/01/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/28/</guid><description>That you need ato git add a flake.nix for the flake&amp;rsquo;s contents to start to work with nix develop
This is needed because Nix flakes respects gitignores. If you don&amp;rsquo;t add things to the git staging area, git doesn&amp;rsquo;t know about the files at all, and Nix flakes can&amp;rsquo;t know if it should ignore them. &amp;ndash; https://xeiaso.net/blog/nix-flakes-go-programs
that &amp;ldquo;truecolor&amp;rdquo; support in shells is detected with the $COLORTERM env var</description></item><item><title/><link>https://skalt.github.io/til/2023/01/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/29/</guid><description>how to setup passwordless SSH login:
ssh-copy-id $(whoami)@${other_host} https://linuxize.com/post/how-to-setup-passwordless-ssh-login/
how to change a ubuntu machine&amp;rsquo;s computer&amp;rsquo;s hostname:
echo &amp;#34;new-hostname&amp;#34; &amp;gt; sudo tee /etc/hostname; sudo sed -i &amp;#39;s/old-hostname/new-hostname/1&amp;#39; /etc/hosts; sudo hosname &amp;#39;new-hostname&amp;#39;; # &amp;lt;- for changes to take effect prior to reboot h/t https://www.howtogeek.com/197934/how-to-change-your-hostname-computer-name-on-ubuntu-linux/</description></item><item><title/><link>https://skalt.github.io/til/2023/01/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/01/30/</guid><description>That psql et al. support colors:
export PG_COLOR=auto # only colorize output to ttys learned from https://fluca1978.github.io/2023/01/23/PostgreSQLColors.html See also:
https://www.postgresql.org/docs/current/color-when.html https://www.postgresql.org/docs/current/color-which.html</description></item><item><title/><link>https://skalt.github.io/til/2023/02/01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/01/</guid><description>git restore exists, and works like a more destructive git stash
See https://git-scm.com/docs/git-restore</description></item><item><title/><link>https://skalt.github.io/til/2023/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/08/</guid><description>That in Rust, assert! runs in both debug and release builds. For debug-only assertions, use debug_assert!. See https://doc.rust-lang.org/stable/std/macro.debug_assert.html.
That in Python, you can call isinstance(thing, (tuple, OfMany, DifferentClasses)) to check if a variable is an instance of many possible classes. See https://docs.python.org/3/library/functions.html?highlight=isinstance#isinstance.</description></item><item><title/><link>https://skalt.github.io/til/2023/02/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/21/</guid><description>That properties of a NamedTuple can have docstrings:
class FooBar(NamedTuple): foo: str &amp;#34;&amp;#34;&amp;#34;Foo&amp;#34;&amp;#34;&amp;#34; bar: int &amp;#34;&amp;#34;&amp;#34;Bar&amp;#34;&amp;#34;&amp;#34; As seen in https://github.com/sqlalchemy/sqlalchemy/blob/main/lib/sqlalchemy/sql/compiler.py#L348</description></item><item><title/><link>https://skalt.github.io/til/2023/02/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/02/22/</guid><description>How to make a self-signed TLS certificate:
#!/usr/bin/env bash # stolen from https://stackoverflow.com/questions/10175812/how-to-generate-a-self-signed-ssl-certificate-using-openssl openssl \ req -x509 \ -newkey rsa:4096 \ -keyout key.pem \ -out cert.pem \ -sha256 -days 365 -nodes -subj &amp;#39;/CN=localhost&amp;#39;</description></item><item><title/><link>https://skalt.github.io/til/2023/03/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/02/</guid><description>that there&amp;rsquo;s a git commit --trailer &amp;lt;token&amp;gt;:&amp;lt;value&amp;gt; flag.
https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---trailerlttokengtltvaluegt</description></item><item><title/><link>https://skalt.github.io/til/2023/03/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/04/</guid><description>The string &amp;ldquo;0.1.12&amp;rdquo; is a version requirement. Although it looks like a specific version of the time crate, it actually specifies a range of versions and allows SemVer compatible updates.
&amp;ndash; https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
Instead, in order to lock to a specific version of a crate, you need to write = 0.1.2.</description></item><item><title/><link>https://skalt.github.io/til/2023/03/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/09/</guid><description>This was a bit of a rollercoaster morning: (1) I tried git worktree add $branch, and it was pretty convenient! (2) until I got a pre-commit error, then I got error: unable to read $HASH on git status (3) which led me to discover git fsck --full --name-objects, which is currently yelling about error: $HASH: invalid sha1 pointer in cache-tree</description></item><item><title/><link>https://skalt.github.io/til/2023/03/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/03/19/</guid><description>That you can use a .gitattributes file to prevent files from appearing in GitHub diffs like so:
generated/**/* linguist-generated=true See https://docs.github.com/en/repositories/working-with-files/managing-files/customizing-how-changed-files-appear-on-github</description></item><item><title/><link>https://skalt.github.io/til/2023/05/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/09/</guid><description>About the precedent for deriving serde from serialize/deserialize:
A codec is a device or computer program that encodes or decodes a data stream or signal. Codec is a portmanteau of coder/decoder. In electronic communications, an endec is a device that acts as both an encoder and a decoder on a signal or data stream, and hence is a type of codec. Endec is a portmanteau of encoder/decoder. &amp;ndash; https://en.wikipedia.org/wiki/Codec</description></item><item><title/><link>https://skalt.github.io/til/2023/05/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/15/</guid><description>That powerline networking kits exist: they send signals over home electrical wiring to extend your home network. Similarly, MoCA (Multimedia over Coaxial Alliance) sends signals over coax cable.</description></item><item><title/><link>https://skalt.github.io/til/2023/05/16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/16/</guid><description>That there are instances where a git commit-message can start with a #:
set -eu experiment=&amp;#34;$(mkdtemp -d)&amp;#34; cd &amp;#34;$experiment&amp;#34; git init# touch readme &amp;amp;&amp;amp; git add readme git commit -m &amp;#34;# not a comment, apparently&amp;#34; actual=&amp;#34;$(cat ./.git/COMMIT_EDITMSG)&amp;#34; expected=&amp;#34;# not a comment, apparently&amp;#34; test &amp;#34;$actual&amp;#34; = &amp;#34;$expected&amp;#34; git log # &amp;lt;hash&amp;gt; # # not a comment, apparently</description></item><item><title/><link>https://skalt.github.io/til/2023/05/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/24/</guid><description>That you can destructure struct values:
struct Point { x: i32, y: i32, } fn main() { let p = Point { x: 0, y: 7 }; let Point { x: a, y: b } = p; assert_eq!(0, a); assert_eq!(7, b); } see https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#destructuring-structs</description></item><item><title/><link>https://skalt.github.io/til/2023/05/27/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/27/</guid><description>That you can list the files in a zipfile using unzip -l path/to/file.zip. Also, that VSIX (Visual Studio and VSCode extension packaging files) are zipfiles with an XML manifest.</description></item><item><title/><link>https://skalt.github.io/til/2023/05/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/28/</guid><description>type NonEmptyArray&amp;lt;T&amp;gt; = [T, ...T[]]; First seen at https://github.com/rust-lang/rust-analyzer/blob/master/editors/code/src/util.ts#L24</description></item><item><title/><link>https://skalt.github.io/til/2023/05/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/29/</guid><description>During some research on build systems, I began re-reading Build Systems a la Carte (repo, paper). I found the Haskell even more confusing than I remembered, so I set out to translate the Haskell types to Typescript, Rust, and other type systems I know. When I got into the translation, I realized I only know enough to get the vibe of what Haskell code&amp;rsquo;s saying :/.
The following are my notes on the 2021 open-source update to Learn You A Haskell for Great Good.</description></item><item><title/><link>https://skalt.github.io/til/2023/05/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/30/</guid><description>That there&amp;rsquo;s a Linux command to do sql-like JOINs of lines in files, possibly based on a field in each line: join(1)</description></item><item><title/><link>https://skalt.github.io/til/2023/05/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/05/31/</guid><description>WebDAV (Web Distributed Authoring and Versioning) is a set of extensions to the Hypertext Transfer Protocol (HTTP)[. WebDAV provides] concurrency control and namespace operations &amp;hellip; WebDAV is defined in IETF RFC 4918.
&amp;ndash; https://en.wikipedia.org/wiki/WebDAV
Apparently, Bazel, Gradle, and CCache all have support for a WebDAV-based remote cache: https://github.com/mozilla/sccache/blob/main/docs/Webdav.md</description></item><item><title/><link>https://skalt.github.io/til/2023/06/04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/04/</guid><description>That k8s can run &amp;ldquo;init containers&amp;rdquo; before a pod&amp;rsquo;s app containers: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/. This provides setup-script functionality, and Cloudflare Pages uses multiple init containers for cloning, installing toolchains, and building pages: https://blog.cloudflare.com/moderizing-cloudflare-pages-builds-toolbox/#our-modular-and-scalable-architecture</description></item><item><title/><link>https://skalt.github.io/til/2023/06/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/05/</guid><description>SPF (Sender Policy Framework) records are DNS TXT records like v=spf1 _include=${email_server_domain} ~all. SPF records help email servers verify that another email server is allowed to send messages from a domain (e.g. foo@domain.com should only be sent by servers listed in an SPF record on a DNS server with authority over domain.com). More info at https://www.cloudflare.com/learning/dns/dns-records/dns-spf-record/
DKIM is another TXT record that issues public keys to check signature headers in email: https://www.</description></item><item><title/><link>https://skalt.github.io/til/2023/06/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/13/</guid><description>That
uuids are 128 bits long in uuid v1, only the first 8 hex digits (32 bits) are randomly generated in uuid v4, the entire 128 bits are randomly generated uuid v5 derives all 128 bits deterministically from the hash of a seed uuid and some input bytes See https://www.sohamkamani.com/uuid-versions-explained/</description></item><item><title/><link>https://skalt.github.io/til/2023/06/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/18/</guid><description>By default, a closure seems to live as long as its parent function unless you use the move keyword.
fn unmoved&amp;lt;&amp;#39;a&amp;gt;(arg: &amp;amp;&amp;#39;a str) -&amp;gt; impl Fn() + &amp;#39;a { let f = || println!(&amp;#34;unmoved: {}&amp;#34;, arg); f } fn moved&amp;lt;&amp;#39;a&amp;gt;(arg: &amp;amp;&amp;#39;a str) -&amp;gt; impl Fn() + &amp;#39;a { let f = move || println!(&amp;#34;moved: {}&amp;#34;, arg); f } fn main() { unmoved(&amp;#34;a&amp;#34;)() // does not compile moved(&amp;#34;b&amp;#34;)() // works fine } &amp;ndash; playground link</description></item><item><title/><link>https://skalt.github.io/til/2023/06/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/19/</guid><description>That Option&amp;lt;T&amp;gt; costs ~1x the alignment value of T. I also learned Vec&amp;lt;T&amp;gt;&amp;rsquo;s size and alignment don&amp;rsquo;t reflect the size and alignment of T since the Vec is tracking an owned buffer on the heap which isn&amp;rsquo;t counted in the Vec&amp;rsquo;s own size.
struct Alone8(u8); // size= 1, align=1 struct Opt8(Option&amp;lt;u8&amp;gt;); // size= 2, align=1 struct Vec8(Vec&amp;lt;u8&amp;gt;); // size=24; align=8 struct Alone64(u64); // size= 8, align=8 struct Opt64(Option&amp;lt;u64&amp;gt;); // size=16, align=8 struct Vec64(Vec&amp;lt;u64&amp;gt;); // size=24; align=8 That Firefox bundles process and task managers for performance monitoring, available at about:processes and about:tasks, respectively https://support.</description></item><item><title/><link>https://skalt.github.io/til/2023/06/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/06/22/</guid><description>That you can send texts to email and recieve emails from texts. When recieving an email from a text client, the emaio sender will be an email address at the text-sender&amp;rsquo;s carrier domain (e.g. +1234567890@carrier.domain).</description></item><item><title/><link>https://skalt.github.io/til/2023/07/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/07/09/</guid><description>I guessed that not all data centers were created equal, but I hadn&amp;rsquo;t heard of an official ranking system before now.
Apparently the Uptime Institute provides international rankings of trustworthiness based on uptime guarantees, redundancy, security measures, etc.
The tiers of data centers:
Tier 1: A data center with a single path for power and cooling, and no backup components. This tier has an expected uptime of 99.671% per year.</description></item><item><title/><link>https://skalt.github.io/til/2023/07/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/07/10/</guid><description>That in vscode, you can make your keypresses display on-screen using the &amp;ldquo;Developer: Toggle screencast mode&amp;rdquo; command.</description></item><item><title/><link>https://skalt.github.io/til/2023/07/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/07/12/</guid><description>How to create subtables in a table in an array in TOML: [table_name.subtable_name].
Any reference to an array of tables points to the most recently defined table element of the array. This allows you to define sub-tables, and even sub-arrays of tables, inside the most recent table.
&amp;ndash; https://toml.io/en/v1.0.0#array-of-tables</description></item><item><title/><link>https://skalt.github.io/til/2023/07/30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/07/30/</guid><description>Getting the top-level directory of the relevant git worktree #!/usr/bin/env bash # set up a dummy repo set -euo pipefail experiment_dir=&amp;#34;$(mktemp -d --tmpdir test_repo.XXX)&amp;#34; git clone --recurse-submodules git@github.com:SKalt/dummy_repo.git &amp;#34;$experiment_dir&amp;#34; cd &amp;#34;$experiment_dir&amp;#34; git pull --recurse-submodules=yes git checkout -b brnch &amp;amp;&amp;amp; git checkout - # set up a dummy branch git worktree add wrktr brnch # add a wortree cd wrktr &amp;amp;&amp;amp; git submodule update --init --recursive # init the recursive submodules in the worktree tree .</description></item><item><title/><link>https://skalt.github.io/til/2023/08/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/02/</guid><description>On ubuntu:
# X11 keyboard options contain the codes that can be passed as options man xkeyboard-config # dconf controls how your keyboard(s) behave -- including lighting the caps-lock # indicator dconf_opts=&amp;#34;/org/gnome/desktop/input-sources/xkb-options&amp;#34; dconf read $dconf_opts dconf write $dconf_opts &amp;#34;[$values]&amp;#34; # where values are taken from `man xkeyboard-config` # notably, dconf&amp;#39;s settings clobber those set by `setxkbmap` and # `/etc/default/keyboard`&amp;#39;s XKBOPTIONS variable setxkbmap -query # prints the current key-map settings setxkbmap -option $values # &amp;lt;- these changes show up in Settings&amp;gt;Keyboard&amp;gt;${CurrentLayout} cat /etc/default/keyboard | grep XKBOPTIONS xev # opens a window and prints the events it sees -- including keypress events # with key codes https://unix.</description></item><item><title/><link>https://skalt.github.io/til/2023/08/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/08/</guid><description>sqlite3 has a .import [--csv] [--skip 1] FILE [TABLE] meta-command (docs). Also, for some reason my version of sqlite3 doesn&amp;rsquo;t respect any flags.
Also, sqlite3 has a .dump meta-command that out puts pure SQL (plus a few sqlite PRAGMAs): docs</description></item><item><title/><link>https://skalt.github.io/til/2023/08/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/09/</guid><description>That you can cancel/reset timeouts in JS using clearTimeout</description></item><item><title/><link>https://skalt.github.io/til/2023/08/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/18/</guid><description>That the authorative database of top-level domains is published by the IANA at https://www.iana.org/domains/root/db</description></item><item><title/><link>https://skalt.github.io/til/2023/08/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/20/</guid><description>That there&amp;rsquo;s a JSON schema for job postings that usually gets included in job-posting pages as a &amp;lt;script type=&amp;quot;application/ld+json&amp;quot;&amp;gt;.</description></item><item><title/><link>https://skalt.github.io/til/2023/08/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/08/26/</guid><description>That sometimes ssh sessions with x-forwarding don&amp;rsquo;t unlock the GNOME &amp;ldquo;login&amp;rdquo; keyring. This can lead to &amp;ldquo;Cannot create an item in a locked collection&amp;rdquo; errors. The way to fix the problem is to:
printf &amp;#34;password: &amp;#34; read -s password printf &amp;#34;%s&amp;#34; &amp;#34;$password&amp;#34; | gnome-keyring-daemon --replace --unlock</description></item><item><title/><link>https://skalt.github.io/til/2023/09/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/08/</guid><description>(1) that gnu ld, part of gnu&amp;rsquo;s binutils suite, is the de-facto standard interface for linker CLIs. Thus, all of gold (elf-only ld), mold/sold, and lld also try to expose ld-compatible CLIs.
(2) that ld has several modes of adding a build id to an executable:
--build-id[=style]
[Create a ] .note.gnu.build-id ELF note section or a .buildid COFF section. The contents of the note are unique bits identifying this linked file.</description></item><item><title/><link>https://skalt.github.io/til/2023/09/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/09/</guid><description>To add JSON schema validation to e.g. Cargo.toml files in VSCode using tamasfe.even-better-toml, you can add a special comment:
#:schema https://json.schemastore.org/cargo.json # see https://taplo.tamasfe.dev/configuration/directives.html#the-schema-directive That there&amp;rsquo;s such a thing as &amp;ldquo;canadian compilation&amp;rdquo;:
If build, host, and target are all the same, this is called a native. If build and host are the same but target is different, this is called a cross. If build, host, and target are all different this is called a canadian (for obscure reasons dealing with Canada’s political party and the background of the person working on the build at that time).</description></item><item><title/><link>https://skalt.github.io/til/2023/09/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/12/</guid><description>Start typing your search with&amp;hellip;
^ to show only matches in your browsing history.
* to show only matches in your bookmarks.
+ to show only matches in bookmarks you’ve tagged.
% to show only matches in your currently open tabs.
# to show only matches where every search term is part of the title or part of a tag.
$ to show only matches where every search term is part of the web address (URL).</description></item><item><title/><link>https://skalt.github.io/til/2023/09/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/20/</guid><description>The meaning of the tags
#LI-Remote: Remote #LI-Hybrid: Hybrid #LI-Onsite: Onsite #LI-DNI: To prevent jobs from displaying on LinkedIn completely. (DNI = Do Not Ingest) #LI-DNP: To prevent jobs from filling a job slot, use this tag or use the ‘block job’ functionality. &amp;ndash; https://www.reddit.com/r/AskHR/comments/ifrayb/what_does_liremote_in_a_job_description_mean/</description></item><item><title/><link>https://skalt.github.io/til/2023/09/22/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/22/</guid><description>How to position an element relative to its parent without affecting the flow of other sibling elements:
you&amp;rsquo;re most likely interested in position: absolute which will position an element relative to a container. By default, the container is the browser window, but if a parent element either has position: relative or position: absolute set on it, then it will act as the parent for positioning coordinates for its children.
&amp;ndash; https://stackoverflow.</description></item><item><title/><link>https://skalt.github.io/til/2023/09/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/25/</guid><description>Acronym Meaning DSO distribution system operators AGR aggregator TSO transmission system operator MCM market-based coordination mechanism &amp;ndash; https://lfenergy.org/projects/shapeshifter/</description></item><item><title/><link>https://skalt.github.io/til/2023/09/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/09/28/</guid><description>Executables, dynamic libraries and debug companions on all Apple platforms use the Mach Object, or short Mach-O, container format. This applies to iOS, iPadOS, tvOS, watchOS, and macOS.
Executables do not carry a file extension. For desktop applications, they are often placed in app bundle structures with the .app suffix. Unless stripped manually, executables contain unwind information and a symbol table. Debug information is never stored in executables. Dynamic Libraries use the .</description></item><item><title/><link>https://skalt.github.io/til/2023/10/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/03/</guid><description>That out of ~51672 extensions on the VSCode marketplace, there are only 31 that are marked as commercial software: &amp;ldquo;Trial&amp;rdquo; rather than &amp;ldquo;Free&amp;rdquo;.
# date extension publisher license kind 1 2020-04-18 Redis Weijan Chen MIT db 2 2020-04-21 SSH Client Weijan Chen MIT db 3 2020-05-05 MySQL Weijan Chen MIT db 4 2021-01-27 ElasticSearch Weijan Chen MIT db 5 2021-01-27 PostgreSQL Weijan Chen MIT db 6 2021-02-05 Database Client Weijan Chen MIT db 7 2021-06-20 JS Refactoring Assistant P42 MIT ai 8 2021-06-29 GitHub Copilot GitHub commercial ai 9 2021-11-22 Local CI Local CI GPL-2 tool 10 2021-12-01 SQl Server Client(mssql) Weijan Chen MIT db 11 2022-01-18 DVT IDE for Visual Studio Code AMIQ EDA s.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/09/</guid><description>About the hot-off-the-press OAuth2 DPoP specification: https://datatracker.ietf.org/doc/html/rfc9449. DPoP is a &amp;ldquo;sender constraint&amp;rdquo;: a way of checking that the sender of an access (JW) token is the same as the entity to whom the access token was issued.
My simplified understanding of DPoP is as follows:
the client generates a private/public key pair the client generates a request for an access token. The request includes: the client&amp;rsquo;s public key the the authorization endpoint&amp;rsquo;s URL the client signs the request with the client&amp;rsquo;s private key the authorization server validates the request (signature and all) and issues an access (JW) token including the thumbprint of the client&amp;rsquo;s public key.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/17/</guid><description>&amp;ldquo;relationship-based access control model (ReBAC).&amp;rdquo;</description></item><item><title/><link>https://skalt.github.io/til/2023/10/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/18/</guid><description>RFCs are labeled with different statuses:
Internet Standard (e.g. HTTP/1.1) Proposed Standard (e.g. HTTP/3, HTTP/2) Best Current Practice Experimental Informational Historic [&amp;hellip;]
RFCs usually begin as Internet-Drafts (I-Ds) written by an individual or a small group. In the IETF, these are then usually adopted by a working group, and improved and revised.
&amp;ndash; https://www.ietf.org/standards/rfcs/
Class fields are public by default, but private class members can be created by using a hash # prefix.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/20/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/20/</guid><description>First, that hugo supports goat ascii diagrams out-of-the box.
Second, about OAuth 2.0 authentication + authorization flows:
Authorization Code Flow From https://tools.ietf.org/html/rfc6749#section-4.1 and https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow
U U s s e c e r l r i c k l o g C i C l n l i i e P O e n O r T n t S e P t T d , A i c c r c c l e l e i c i s e t e s n L n t t o t t o g o I I k D I i O D e , d n T , n P t P , r o c e l I d I i D i d e A r P n t A u e t o u t c k t h t s e h o e n o r U c r i R r i z I e z a t a t t i i o o n I n D S S e t e r o r v k v e e e r n r I I d d P P Note: IdP = &amp;ldquo;Identity Provider&amp;rdquo;.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/23/</guid><description>About the three VCard specifications:
2.1 3.0 4.0 (2011) I also learned that iPhones can import contacts from a v4.0-formatted vcf file, but a (Samsung) android phne will only import portions of the same file. Exporting contacts from my android phone seems to use v2.1.</description></item><item><title/><link>https://skalt.github.io/til/2023/10/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/10/31/</guid><description>That POSIX shell has configuration option, set -a or set -o allexport that exports all assigned variables. This simplifies using .env files in .envrc files:
# evaluate a .env file, if it exists if [ -f .env ]; then set -a # assigning a variable exports the variable # shellcheck disable=SC1091 source .env set +a fi That JS has a String.raw template literal tag function that unescapes escape sequences in a backtick-string:</description></item><item><title/><link>https://skalt.github.io/til/2023/11/02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/11/02/</guid><description>How to type a decorator function or decorator factory in Python: see https://mypy.readthedocs.io/en/stable/generics.html##declaring-decorators</description></item><item><title/><link>https://skalt.github.io/til/2023/12/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/12/12/</guid><description>TL;DR: slap copyright comments on files and vendor licenses into a top-level LICENSES/${spdx_id}.${ext} directory.
The SPDX spec v2.3 references the REUSE spec v3.
Alternatively, you can use aLicenseRef-custom license identifier to refer to a license that is not on the SPDX License List, such as the following:
SPDX-License-Identifier: LicenseRef-my-special-license TheLicenseRef-format is defined in AnnexD. When using a customLicenseRef-identifier, you will also need to provide a way for others to determine what license text corresponds to it.</description></item><item><title/><link>https://skalt.github.io/til/2023/12/15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/12/15/</guid><description>That
Any value in an array may be semantically null, whether primitive or nested type.
[&amp;hellip;]
Arrays having a 0 null count may choose to not allocate the validity bitmap; how this is represented depends on the implementation
&amp;ndash; https://arrow.apache.org/docs/format/Columnar.html#null-count
Which is frustrating. I usually think of arrays or database columns as NOT NULL by default, so I&amp;rsquo;m disappointed that I need to watch out for that footgun again when writing in-memory DBs.</description></item><item><title/><link>https://skalt.github.io/til/2023/12/23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/12/23/</guid><description>Turns out Rust does support Any-types and downcasting: see https://doc.rust-lang.org/std/any/index.html and https://doc.rust-lang.org/std/any/struct.TypeId.html .</description></item><item><title/><link>https://skalt.github.io/til/2023/12/24/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2023/12/24/</guid><description>Bayer and McCreight never explained what, if anything, the B stands for: Boeing, balanced, between, broad, bushy, and Bayer have been suggested. McCreight has said that &amp;ldquo;the more you think about what the B in B-trees means, the better you understand B-trees.&amp;rdquo;
&amp;ndash; https://en.wikipedia.org/wiki/B-tree#History</description></item><item><title/><link>https://skalt.github.io/til/2024/01/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/01/03/</guid><description>bit bucket n.
(very common) 1. The universal data sink (originally, the mythical receptacle used to catch bits when they fall off the end of a register during a shift instruction). Discarded, lost, or destroyed data is said to have &amp;ldquo;gone to the bit bucket&amp;rdquo;. On Unix, often used for /dev/null. Sometimes amplified as &amp;ldquo;the Great Bit Bucket in the Sky&amp;rdquo;.
The place where all lost mail and news messages eventually go.</description></item><item><title/><link>https://skalt.github.io/til/2024/01/28/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/01/28/</guid><description>That 401 Unauthorized responses are supposed to include a www-authenticate header with a value indicating how to obtain a valid token. See https://datatracker.ietf.org/doc/html/rfc6750#section-3 for more details.</description></item><item><title/><link>https://skalt.github.io/til/2024/01/29/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/01/29/</guid><description>Typographic Units Absolute distance Name CSS Unit length Picas pc 1/6 inch Points pt 1/72 inches &amp;ndash; https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#absolute_length_units
Font-relative units em:
In metal type, the point size (and hence the em, from em quadrat) was equal to the line height of the metal body from which the letter rises. [&amp;hellip;] In some older texts, but not all, the em is defined, or said to have been defined, as the width of the capital &amp;lsquo;M&amp;rsquo; in the current typeface and point size.</description></item><item><title/><link>https://skalt.github.io/til/2024/01/31/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/01/31/</guid><description>That SQL implementations with recursive CTEs are Turing-complete! It makes sense: recursion and conditionals are all that is required for Turing completeness.
See https://learnsql.com/blog/sql-subquery-cte-difference/</description></item><item><title/><link>https://skalt.github.io/til/2024/02/05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/05/</guid><description>That a *.tiff file:
was specified in 1986 by a company later consumed by Adobe was originally intended for scanner interop starts with an 8-byte header that includes a 2-byte magic number, a 2-byte endianness flag, and a 4-byte pointer to the first Image File Directory entry the max tiff size is 2^32 bytes due to the u32 pointer size Each IFD starts with a u16 count of entries, then a sequence of 12-byte ields, then another 4-byte offset of the next IFD entry (0 = none) each IFD entry (= &amp;ldquo;field&amp;rdquo;) has a 2-byte tag, 2 bytes of field type, 4-byte count, and 4-byte offset of the value(s) of the field.</description></item><item><title/><link>https://skalt.github.io/til/2024/02/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/08/</guid><description>In signal processing, the Nyquist rate, named after Harry Nyquist, is a value (in units of samples per second or hertz, Hz) equal to twice the highest frequency (bandwidth) of a given function or signal. When the function is digitized at a higher sample rate (see &amp;ldquo;Critical frequency&amp;rdquo;), the resulting discrete-time sequence is said to be free of the distortion known as aliasing.
&amp;ndash; https://en.wikipedia.org/wiki/Nyquist_rate
In signal processing and related disciplines, aliasing is the overlapping of frequency components resulting from a sample rate below the Nyquist rate.</description></item><item><title/><link>https://skalt.github.io/til/2024/02/12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/12/</guid><description>That rust has built-in numeric types named like NonZero* that reserve the bit-pattern of 0 as a niche: see https://doc.rust-lang.org/core/num/index.html.
This is useful since that niche will absorb the cost of wrapping a NonZero int with Option:
use core::num::NonZeroU8; use std::mem::size_of; struct Struct&amp;lt;T&amp;gt;{ // has alignment 2, size 4 a: u16, b: T, } fn main() { println!(&amp;#34; NonZeroU8: {}&amp;#34;, size_of::&amp;lt;NonZeroU8&amp;gt;()); println!(&amp;#34; Option&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Option&amp;lt;NonZeroU8&amp;gt;&amp;gt;()); println!(&amp;#34; Struct&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;&amp;gt;()); println!(&amp;#34;Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;: {}&amp;#34;, size_of::&amp;lt;Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;&amp;gt;&amp;gt;()); } # NonZeroU8: 1 # Option&amp;lt;NonZeroU8&amp;gt;: 1 # Struct&amp;lt;NonZeroU8&amp;gt;: 4 # Option&amp;lt;Struct&amp;lt;NonZeroU8&amp;gt;: 4 playground link</description></item><item><title/><link>https://skalt.github.io/til/2024/02/14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/14/</guid><description>A more concise way to implement light/dark modes:
:root { color-scheme: light dark; } which saves a few more bytes than my usual
:root { --fg: #000; --bg: #fff; } @media (prefers-color-scheme: dark) { :root { --fg: #fff; --bg: #000; } } &amp;ndash; https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme#declaring_color_scheme_preferences
I also learned that CSS has special syntax for systmem-provided colors, notably:
Canvas: the default background color CanvasText: the default text color &amp;ndash; https://developer.mozilla.org/en-US/docs/Web/CSS/system-color#syntax</description></item><item><title/><link>https://skalt.github.io/til/2024/02/19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/02/19/</guid><description>That CSS can adjust any font&amp;rsquo;s aspect value using font-size-adjust &amp;ndash; the ratio between the cap height and the x-height, NOT the aspect ratio.</description></item><item><title/><link>https://skalt.github.io/til/2024/03/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/07/</guid><description>That go mod tidy needs to be followed by go mod vendor to keep ./vendor/modules.txt up-to-date. That go mod vendor only pulls in files that are referenced by your current project.
See https://go.dev/ref/mod#vendoring</description></item><item><title/><link>https://skalt.github.io/til/2024/03/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/08/</guid><description>That OpenTelemetry HTTP reciever endpoints tend to have port 4318</description></item><item><title/><link>https://skalt.github.io/til/2024/03/10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/10/</guid><description>That you can add #![warn(missing_docs)] at the top of a lib.rs file to lint for undocumented public methods.</description></item><item><title/><link>https://skalt.github.io/til/2024/03/13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/13/</guid><description>Common Platform Enumeration, a syntax for identifying &amp;ldquo;IT stuff&amp;rdquo;:
cpe :&amp;lt;cpe_version&amp;gt; :&amp;lt;part&amp;gt; :&amp;lt;vendor&amp;gt; :&amp;lt;product&amp;gt; :&amp;lt;version&amp;gt; :&amp;lt;update&amp;gt; :&amp;lt;edition&amp;gt; :&amp;lt;language&amp;gt; :&amp;lt;sw_edition&amp;gt; :&amp;lt;target_sw&amp;gt; :&amp;lt;target_hw&amp;gt; :&amp;lt;other&amp;gt; Notably, part can only be a|h|o = app | hardware | OS, not &amp;ldquo;documentation&amp;rdquo;.
See https://en.wikipedia.org/wiki/Common_Platform_Enumeration</description></item><item><title/><link>https://skalt.github.io/til/2024/03/18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/18/</guid><description>Alerts are an extension of Markdown used to emphasize critical information. On GitHub, they are displayed with distinctive colors and icons to indicate the importance of the content.
An example of all five types:
&amp;gt; [!NOTE] &amp;gt; Highlights information that users should take into account, even when skimming. &amp;gt; [!TIP] &amp;gt; Optional information to help a user be more successful. [!IMPORTANT]
Crucial information necessary for users to succeed.
[!WARNING]</description></item><item><title/><link>https://skalt.github.io/til/2024/03/21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/21/</guid><description>that depends_on: [ service ] waits for service to be started, not for service to be healthy.
On startup, Compose does not wait until a container is &amp;ldquo;ready&amp;rdquo;, only until it&amp;rsquo;s running.
The solution for detecting the ready state of a service is to use the condition attribute with one of the following options:
service_started service_healthy. This specifies that a dependency is expected to be “healthy”, which is defined with healthcheck, before starting a dependent service.</description></item><item><title/><link>https://skalt.github.io/til/2024/03/25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/25/</guid><description>The authoritative list of TLDs can be found at https://data.iana.org/TLD/tlds-alpha-by-domain.txt</description></item><item><title/><link>https://skalt.github.io/til/2024/03/26/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/03/26/</guid><description>That you can specify an alternate .terraformrc file using the environment variable TF_CLI_CONFIG_FILE=$ABSOLUTE_PATH. This can help with local provider development. See https://developer.hashicorp.com/terraform/cli/config/environment-variables#tf_cli_config_file</description></item><item><title/><link>https://skalt.github.io/til/2024/04/03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/03/</guid><description>That BuildKit supports the using OpenTelemetry to trace builds with context from the $TRACEPARENT and $TRACESTATE environment variables (directly equivalent to their w3c header counterparts): https://github.com/moby/buildkit/blob/dc23e43dc15c14dcf1871f8cc97a6e96c8f94a2e/util/tracing/env/traceenv.go#L20-L41</description></item><item><title/><link>https://skalt.github.io/til/2024/04/07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/07/</guid><description>That any function named func init(){ ... } runs on load of a module. See https://www.digitalocean.com/community/tutorials/understanding-init-in-go</description></item><item><title/><link>https://skalt.github.io/til/2024/04/08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://skalt.github.io/til/2024/04/08/</guid><description>That select can only be used to race communications operations (e.g. &amp;lt;- myChan). See https://go.dev/ref/spec#Select_statements</description></item></channel></rss>